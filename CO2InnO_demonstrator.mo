package Energysystem
  model Base_Model
    Buildings.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(filNam = Modelica.Utilities.Files.loadResource("modelica://Energysystem/resources/weatherdata/FRA_Strasbourg.071900_IWEC.mos")) annotation(
      Placement(transformation(origin = {-92, 2}, extent = {{-40, 20}, {-20, 40}})));
    Buildings.Electrical.AC.ThreePhasesBalanced.Sources.Grid grid(V = 230, f = 50) annotation(
      Placement(transformation(origin = {80, 116}, extent = {{-60, -20}, {-40, 0}})));
    Electrical.elProduction ElectricalSystem(azi = 0, onPV = true, onWT = true, onBat = true, A_pv = 10000, EMax = 1800000000, etaCha = 0.94, etaDis = 0.88, I_m = 300, V_nominal_bat = 380, h = 16, scale = 0.25, table = [3.5, 0; 6.8, 483000; 11.75, 2000000; 25, 2000000; 28, 0]) annotation(
      Placement(transformation(origin = {-18, 102}, extent = {{-18, -18}, {18, 18}})));
    Results_electrical results_electrical annotation(
      Placement(transformation(origin = {70, 110}, extent = {{-10, -10}, {10, 10}})));
    Heating.HeatingSystemDefault HeatingSystem(VTan = 5, P_th = 53700, P_el = 38000, eta_th = 0.502, eta_el = 0.355, area = 10, mod = true, T_supply = 363.15, T_return = 318.15, onST = false, azi = -0.785398, SOCmin = 0.02, SOCmax = 0.98, Zmod = 0.5, ASHP = false, GSHP = true, Pth_hp(displayUnit = "kW") = 124000, P_el_thr = 0, ratio_CH4 = 1, ratio_H2 = 0) annotation(
      Placement(transformation(origin = {-18, 4}, extent = {{-16, -16}, {16, 16}})));
    Results_heating results_heating annotation(
      Placement(transformation(origin = {70, 80}, extent = {{-10, -10}, {10, 10}})));
    Results_costs results_costs(Pwind_on = 0, Pwind_off = 0, Pwind_dom = 0, Ast = 0, Apv_res = 0, Apv_com = 10000, Pel_chp = 38000, Pth_ashp = 0, Pth_gshp = 201000, Ppemel = 0, Ebat = 0, Vtes = 0.2, Vhyd = 0) annotation(
      Placement(transformation(origin = {70, 20}, extent = {{-10, -10}, {10, 10}})));
    Data_Input data_Input annotation(
      Placement(transformation(origin = {-124, 58}, extent = {{-10, -10}, {10, 10}})));
  protected
    Real P_pemel_no = 0 "No Hydrogen system";
    Real P_com_no = 0;
    Modelica.Blocks.Math.Gain gain(k = -1) annotation(
      Placement(transformation(origin = {-90, 62}, extent = {{-4, -4}, {4, 4}})));
    Modelica.Blocks.Math.MultiSum Sum_P_el_dem(nu = 3) annotation(
      Placement(transformation(origin = {-71, 79}, extent = {{-7, 7}, {7, -7}}, rotation = 90)));
    Energysystem.Results_CO2e results_CO2e(Mix = CO2e_factors.Mix_green_ger) annotation(
      Placement(transformation(origin = {70, 50}, extent = {{-10, -10}, {10, 10}})));
  equation
    results_electrical.Pdem = ElectricalSystem.batCon.Pdem_out;
    results_electrical.Psup = ElectricalSystem.batCon.Psup_out;
    results_electrical.Pgrid = grid.P.real;
    results_CO2e.Pgrid = grid.P.real;
    connect(results_heating.m_H2, results_costs.m_H2);
    P_pemel_no = results_costs.Epemel;
    P_pemel_no = results_electrical.Ppemel;
    P_com_no = results_electrical.Pcom;
    P_com_no = results_costs.Ecom;
    results_costs.tCO2e = results_CO2e.CO2e;
    connect(weaDat.weaBus, HeatingSystem.weaBus);
    connect(weaDat.weaBus, ElectricalSystem.weaBus);
    connect(ElectricalSystem.Ppv, results_electrical.Ppv);
    connect(ElectricalSystem.Pwind, results_electrical.Pwind);
    connect(gain.y, results_electrical.Pload);
    connect(ElectricalSystem.SOCbat, results_electrical.SOCbat);
    connect(ElectricalSystem.Pbat, results_electrical.Pbat);
    connect(ElectricalSystem.term_p, grid.terminal) annotation(
      Line(points = {{2, 90}, {2, 88}, {30, 88}, {30, 96}}, color = {0, 120, 120}));
    connect(gain.y, Sum_P_el_dem.u[1]) annotation(
      Line(points = {{-86, 62}, {-71, 62}, {-71, 72}}, color = {0, 0, 127}));
    connect(Sum_P_el_dem.y, ElectricalSystem.Pdem) annotation(
      Line(points = {{-71, 87}, {-71, 92}, {-40, 92}}, color = {0, 0, 127}));
    connect(HeatingSystem.P_el_CHP, ElectricalSystem.Pchp) annotation(
      Line(points = {{0, 17}, {12, 17}, {12, 38}, {-48, 38}, {-48, 86}, {-40, 86}}, color = {0, 0, 127}));
    connect(results_electrical.Pchp, HeatingSystem.P_el_CHP);
    connect(results_electrical.Php, HeatingSystem.P_com_HP);
    connect(results_electrical.Ppump, HeatingSystem.P_el_pump);
    connect(HeatingSystem.P_com_HP, Sum_P_el_dem.u[2]) annotation(
      Line(points = {{0, 20}, {0, 20.625}, {8, 20.625}, {8, 34}, {-70, 34}, {-70, 72}}, color = {0, 0, 127}));
    connect(HeatingSystem.P_el_pump, Sum_P_el_dem.u[3]) annotation(
      Line(points = {{0, 24}, {8, 24}, {8, 34}, {-70, 34}, {-70, 72}}, color = {0, 0, 127}));
    connect(HeatingSystem.P_th_CHP, results_heating.Qchp);
    connect(HeatingSystem.P_fuel_CHP, results_heating.Pfuel);
    connect(HeatingSystem.m_dot_fuel_CH4_CHP, results_heating.m_dot_CH4);
    connect(HeatingSystem.m_dot_fuel_H2_CHP, results_heating.m_dot_H2);
    connect(HeatingSystem.P_th_HP, results_heating.Qhp);
    connect(HeatingSystem.T_Tes, results_heating.Ttank);
    connect(HeatingSystem.SOC_Tes, results_heating.SOCtes);
    connect(HeatingSystem.E_Tes, results_heating.Etes);
    connect(HeatingSystem.P_th_ST, results_heating.Qst);
    connect(HeatingSystem.Q_sup, results_heating.Qsup);
    connect(data_Input.heat_load, results_heating.Qdem);
    connect(HeatingSystem.Q_tes, results_heating.Qtes);
    HeatingSystem.HeatPump.COP = results_heating.COP;
    connect(results_heating.m_CH4, results_CO2e.m_CH4);
    results_costs.Pgrid = grid.P.real;
    connect(results_electrical.Psup, results_costs.Psup);
    connect(results_heating.m_CH4, results_costs.m_CH4);
    P_com_no = results_costs.V_H2O;
    connect(results_electrical.Epv, results_costs.Epv);
    connect(results_electrical.Ewind, results_costs.Ewind);
    connect(results_electrical.Echp, results_costs.Echp);
    connect(data_Input.heat_load, HeatingSystem.Q_dem) annotation(
      Line(points = {{-114, 55}, {-102, 55}, {-102, 4}, {-38, 4}}, color = {0, 0, 127}));
    connect(data_Input.electricity_load, gain.u) annotation(
      Line(points = {{-114, 61}, {-104, 61}, {-104, 62}, {-94, 62}}, color = {0, 0, 127}));
    connect(data_Input.electricity_load, HeatingSystem.P_el_dem) annotation(
      Line(points = {{-114, 61}, {-98, 61}, {-98, 12}, {-38, 12}}, color = {0, 0, 127}));
    connect(data_Input.pv_Profil, ElectricalSystem.pvProfil) annotation(
      Line(points = {{-114, 66}, {-104, 66}, {-104, 100}, {-40, 100}}, color = {0, 0, 127}));
    annotation(
      experiment(StartTime = 0, StopTime = 31536000, Tolerance = 1e-06, Interval = 3600),
      Diagram(coordinateSystem(extent = {{-140, 120}, {80, -20}})),
      Icon(graphics = {Bitmap(origin = {-1, -6}, extent = {{-107, -92}, {107, 92}}, imageSource = "")}),
      Documentation(info = "<html><head></head><body><div>This model does not have a decentralised hydrogen supply. For this reason, scenarios can be simulated here that obtain the fuel (hydrogen or natural gas) from the pipeline.&nbsp;</div><div><br></div><div>Electric system consists of:</div><div><ul><li>Photovoltaic</li><li>Wind power</li><li>Battery</li><li>Power grid</li></ul></div><div><br></div><div>Heating system consists of</div><div><ul><li>CHP</li><li>Heat pump</li><li>Solar thermal energy</li><li>Thermal storage tank</li></ul><div>The result blocks take the most important characteristic values from the system so that they can be found quickly</div></div></body></html>"));
  end Base_Model;

  model Hydrogen_Model
    Buildings.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(filNam = Modelica.Utilities.Files.loadResource("modelica://Energysystem/resources/weatherdata/FRA_Strasbourg.071900_IWEC.mos")) annotation(
      Placement(transformation(origin = {-86, 2}, extent = {{-40, 20}, {-20, 40}})));
    Buildings.Electrical.AC.ThreePhasesBalanced.Sources.Grid grid(V = 230, f = 50) annotation(
      Placement(transformation(origin = {94, 120}, extent = {{-60, -20}, {-40, 0}})));
    Electrical.elProduction_H2 ElectricalSystem(azi(displayUnit = "rad"), onPV = true, onWT = true, onBat = false, A_pv = 10000, EMax = 1800000000, etaCha = 0.94, etaDis = 0.88, thrmax(displayUnit = "W") = 500000, V_nominal_bat = 380, thrmin = 300, I_m = 300, scale = 0.25, h = 16, table = [3.5, 0; 6.8, 483000; 11.75, 2000000; 25, 2000000; 28, 0]) annotation(
      Placement(transformation(origin = {-18, 104}, extent = {{-18, -18}, {18, 18}})));
    Results_electrical results_electrical annotation(
      Placement(transformation(origin = {110, 108}, extent = {{-10, -10}, {10, 10}})));
    Heating.HeatingSystemH2 HeatingSystem(VTan = 5, P_th = 53700, P_el = 38000, eta_th = 0.502, eta_el = 0.355, area = 10, mod = true, T_supply = 363.15, T_return = 318.15, onST = false, azi = -0.785398, SOCmin = 0.02, SOCmax = 0.98, Zmod = 0.5, ratio_CH4 = 0, ratio_H2 = 1, Pth_hp(displayUnit = "kW") = 125000, ASHP = false, GSHP = true, P_el_thr = 0) annotation(
      Placement(transformation(origin = {-18, 4}, extent = {{-16, -16}, {16, 16}})));
    Results_heating results_heating annotation(
      Placement(transformation(origin = {110, 78}, extent = {{-10, -10}, {10, 10}})));
    Hydrogen.HydrogenSystem hydrogenSystem(N_stacks = 263, P_el_max(displayUnit = "W") = 500000, V = 1000) annotation(
      Placement(transformation(origin = {31, 61}, extent = {{13, -13}, {-13, 13}})));
    Results_hydrogen results_hydrogen annotation(
      Placement(transformation(origin = {110, 46}, extent = {{-10, -10}, {10, 10}})));
    Energysystem.Results_CO2e results_CO2e(Mix = CO2e_factors.Mix_green_ger) annotation(
      Placement(transformation(origin = {108, 18}, extent = {{-10, -10}, {10, 10}})));
    Results_costs_H2 results_costs(Ast = 0, Ebat(displayUnit = "kW.h") = 0, Pel_chp(displayUnit = "kW") = 38000, Ppemel(displayUnit = "W") = 500000, Vhyd = 1000, Vtes = 0.2, Pth_ashp = 0, Pth_gshp = 201000, T_supply = 363.15, Pwind_on(displayUnit = "W") = 0, Pwind_off = 0, Pwind_dom = 0, Apv_res = 0, Apv_com = 10000) annotation(
      Placement(transformation(origin = {108, -8}, extent = {{-10, -10}, {10, 10}})));
    Data_Input data_Input annotation(
      Placement(transformation(origin = {-118, 58}, extent = {{-10, -10}, {10, 10}})));
  protected
    Modelica.Blocks.Math.Gain gain(k = -1) annotation(
      Placement(transformation(origin = {-90, 62}, extent = {{-4, -4}, {4, 4}})));
    Modelica.Blocks.Math.MultiSum Sum_P_el_dem(nu = 3) annotation(
      Placement(transformation(origin = {-71, 81}, extent = {{-7, 7}, {7, -7}}, rotation = 90)));
  equation
    results_electrical.Pdem = ElectricalSystem.Pdem;
// total demand
    results_electrical.Psup = ElectricalSystem.Psup;
// all supply before battery storage
    results_electrical.Pgrid = grid.P.real;
    results_costs.Pgrid = grid.P.real;
    results_CO2e.Pgrid = grid.P.real;
    results_costs.tCO2e = results_CO2e.CO2e;
    connect(weaDat.weaBus, HeatingSystem.weaBus);
    connect(weaDat.weaBus, ElectricalSystem.weaBus);
    connect(hydrogenSystem.P_pemel, results_electrical.Ppemel);
    connect(hydrogenSystem.P_com, results_electrical.Pcom);
    connect(ElectricalSystem.Ppv, results_electrical.Ppv);
    connect(ElectricalSystem.Pwind, results_electrical.Pwind);
    connect(gain.y, results_electrical.Pload);
    connect(ElectricalSystem.SOCbat, results_electrical.SOCbat);
    connect(ElectricalSystem.Pbat, results_electrical.Pbat);
    connect(ElectricalSystem.term_p, grid.terminal) annotation(
      Line(points = {{2, 91}, {2, 90}, {44, 90}, {44, 100}}, color = {0, 120, 120}));
    connect(gain.y, Sum_P_el_dem.u[1]) annotation(
      Line(points = {{-86, 62}, {-86, 60}, {-71, 60}, {-71, 74}}, color = {0, 0, 127}));
    connect(Sum_P_el_dem.y, ElectricalSystem.Pdem) annotation(
      Line(points = {{-71, 89}, {-71, 95}, {-40, 95}}, color = {0, 0, 127}));
    connect(results_electrical.Pchp, HeatingSystem.P_el_CHP);
    connect(results_electrical.Php, HeatingSystem.P_com_HP);
    connect(results_electrical.Ppump, HeatingSystem.P_el_pump);
    connect(HeatingSystem.P_th_CHP, results_heating.Qchp);
    connect(HeatingSystem.P_fuel_CHP, results_heating.Pfuel);
    connect(HeatingSystem.m_dot_fuel_CH4_CHP, results_heating.m_dot_CH4);
    connect(HeatingSystem.m_dot_fuel_H2_CHP, results_heating.m_dot_H2);
    connect(HeatingSystem.P_th_HP, results_heating.Qhp);
    connect(HeatingSystem.T_Tes, results_heating.Ttank);
    connect(HeatingSystem.SOC_Tes, results_heating.SOCtes);
    connect(HeatingSystem.E_Tes, results_heating.Etes);
    connect(HeatingSystem.P_th_ST, results_heating.Qst);
    connect(HeatingSystem.Q_sup, results_heating.Qsup);
    connect(data_Input.heat_load, results_heating.Qdem);
    connect(HeatingSystem.Q_tes, results_heating.Qtes);
    HeatingSystem.HeatPump.COP = results_heating.COP;
    connect(HeatingSystem.P_el_CHP, ElectricalSystem.Pchp) annotation(
      Line(points = {{0, 17}, {10, 17}, {10, 34}, {-52, 34}, {-52, 87}, {-40, 87}}, color = {0, 0, 127}));
    connect(HeatingSystem.m_dot_fuel_H2_CHP, hydrogenSystem.m_dot_need) annotation(
      Line(points = {{0, 4}, {58, 4}, {58, 53}, {47, 53}}, color = {0, 0, 127}));
    connect(HeatingSystem.P_com_HP, Sum_P_el_dem.u[2]) annotation(
      Line(points = {{0, 20}, {6, 20}, {6, 32}, {-71, 32}, {-71, 74}}, color = {0, 0, 127}));
    connect(HeatingSystem.P_el_pump, Sum_P_el_dem.u[3]) annotation(
      Line(points = {{0, 24}, {2, 24}, {2, 32}, {-71, 32}, {-71, 74}}, color = {0, 0, 127}));
    connect(ElectricalSystem.Ppemel, hydrogenSystem.P_el) annotation(
      Line(points = {{2, 88}, {60, 88}, {60, 61}, {47, 61}}, color = {0, 0, 127}));
    connect(hydrogenSystem.p, results_hydrogen.p);
    connect(hydrogenSystem.SOC, results_hydrogen.SOC);
    connect(hydrogenSystem.eta_energy, results_hydrogen.eta_energy);
    connect(hydrogenSystem.eta_cell, results_hydrogen.eta_cell);
    connect(hydrogenSystem.m_dot_H2, results_hydrogen.m_dot_H2);
    connect(hydrogenSystem.m_dot_O2, results_hydrogen.m_dot_O2);
    connect(hydrogenSystem.m_dot_H2O, results_hydrogen.m_dot_H2O);
    connect(hydrogenSystem.V_dot_O2, results_hydrogen.V_dot_O2);
    connect(hydrogenSystem.V_dot_H2, results_hydrogen.V_dot_H2);
    connect(hydrogenSystem.V_dot_H2O, results_hydrogen.V_dot_H2O);
    connect(hydrogenSystem.P_com, results_hydrogen.P_com);
    connect(hydrogenSystem.P_pemel, results_hydrogen.P_pemel);
    connect(results_heating.m_CH4, results_CO2e.m_CH4);
    connect(results_heating.m_CH4, results_costs.m_CH4);
    connect(results_hydrogen.V_H2O, results_costs.V_H2O);
    connect(hydrogenSystem.term_p, grid.terminal) annotation(
      Line(points = {{46, 72}, {44, 72}, {44, 100}}, color = {0, 120, 120}));
    connect(results_heating.m_H2, results_costs.m_H2);
    connect(results_hydrogen.Epemel, results_costs.Epemel);
    connect(results_hydrogen.Ecom, results_costs.Ecom);
    connect(hydrogenSystem.PEMELoff, ElectricalSystem.Pemeloff) annotation(
      Line(points = {{16, 78}, {-32, 78}, {-32, 82}}, color = {255, 0, 255}));
    connect(hydrogenSystem.CHPoff, HeatingSystem.CHPoff) annotation(
      Line(points = {{16, 76}, {-46, 76}, {-46, 12}, {-38, 12}}, color = {255, 0, 255}));
    connect(results_electrical.Epv, results_costs.Epv);
    connect(results_electrical.Ewind, results_costs.Ewind);
    connect(results_electrical.Echp, results_costs.Echp);
    connect(results_electrical.Psup, results_costs.Psup);
    connect(data_Input.heat_load, HeatingSystem.Q_dem) annotation(
      Line(points = {{-108, 55}, {-100, 55}, {-100, -4}, {-38, -4}}, color = {0, 0, 127}));
    connect(data_Input.electricity_load, HeatingSystem.P_el_dem) annotation(
      Line(points = {{-108, 61}, {-98, 61}, {-98, 4}, {-38, 4}}, color = {0, 0, 127}));
    connect(data_Input.pv_Profil, ElectricalSystem.pvProfil) annotation(
      Line(points = {{-108, 66}, {-102, 66}, {-102, 102}, {-40, 102}}, color = {0, 0, 127}));
    connect(data_Input.electricity_load, gain.u) annotation(
      Line(points = {{-108, 62}, {-94, 62}}, color = {0, 0, 127}));
    annotation(
      experiment(StartTime = 1.04544e+07, StopTime = 41990400, Tolerance = 1e-06, Interval = 3600),
      Diagram(coordinateSystem(extent = {{-140, 140}, {120, -20}})),
      Icon(graphics = {Bitmap(origin = {-1, -6}, extent = {{-107, -92}, {107, 92}}, imageSource = "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")}),
      Documentation(info = "<html><head></head><body><div>This model has a decentralised hydrogen supply. For this reason, scenarios can be simulated here that obtain the fuel (hydrogen or natural gas) from the pipeline.&nbsp;</div><div><br></div><div>Electric system consists of:</div><div><ul><li>Photovoltaic</li><li>wind power</li><li>Battery</li><li>Power grid</li><li>Limits for the electrolyser</li></ul></div><div><br></div><div>Heating system consists of</div><div><ul><li>CHP</li><li>Heat pump</li><li>Solar thermal energy</li><li>Buffer storage tank</li></ul></div><div><br></div><div>Hydrogen system:</div><div><ul><li>Electrolyser</li><li>Hydrogen tank</li><li>Compressor</li></ul></div><div><br></div><div>The result blocks take the most important characteristic values from the system so that they can be found quickly</div></body></html>"));
  end Hydrogen_Model;

  model Results_electrical
    extends Modelica.Blocks.Icons.Block;
    Modelica.Units.SI.Power Pgrid_own;
    Modelica.Blocks.Interfaces.RealInput Ppv(final quantity = "Power", unit = "W") "Power supply by PV" annotation(
      Placement(transformation(origin = {-110, 100}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 90}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Pwind(final quantity = "Power", unit = "W") "Power supply by wind turbine" annotation(
      Placement(transformation(origin = {-110, 72}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 64}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Pload(final quantity = "Power", unit = "W") "Power load of the houshold" annotation(
      Placement(transformation(origin = {-106, -64}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 36}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput SOCbat "State of charge of battery" annotation(
      Placement(transformation(origin = {-106, -92}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 10}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Pbat(final quantity = "Power", unit = "W") "Power stored in Battery (P > 0 charging,P < 0 discharging " annotation(
      Placement(transformation(origin = {-110, 44}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -16}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Pgrid(final quantity = "Power", unit = "W") "P > 0 if real power is consumed from the grid, and P < 0 if it is fed into the grid" annotation(
      Placement(transformation(origin = {-106, -120}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -40}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Pchp(final quantity = "Power", unit = "W") "Generated electrical power" annotation(
      Placement(transformation(origin = {-110, 18}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -68}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Ppump(final quantity = "Power", unit = "W") "Power consumption of pumps" annotation(
      Placement(transformation(origin = {-110, -10}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -86}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Php(final quantity = "Power", unit = "W") "Power consumption of heat pump" annotation(
      Placement(transformation(origin = {-108, -38}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -112}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealOutput EsupTotal(unit = "J") "Energy supplied over time" annotation(
      Placement(transformation(origin = {92, 50}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 10}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Interfaces.RealOutput EdemTotal(unit = "J") "Energy supplied over time" annotation(
      Placement(transformation(origin = {92, -60}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -30}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Interfaces.RealOutput Ume "Unmet energy percentage" annotation(
      Placement(transformation(origin = {84, 14}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -8}, extent = {{-10, -10}, {10, 10}})));
    UME ume annotation(
      Placement(transformation(origin = {42, 14}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Continuous.Integrator intPsum(y_start = 0.01) annotation(
      Placement(transformation(origin = {12, 78}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Continuous.Integrator intPdem(y_start = 0.01, k = -1) annotation(
      Placement(transformation(origin = {14, -28}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Interfaces.RealInput Ppemel(final quantity = "Power", unit = "W") "Power consumption of electrolyser" annotation(
      Placement(transformation(origin = {-136, -24}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -2}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Pcom(final quantity = "Power", unit = "W") "Power consumption of electrolyser's compressor" annotation(
      Placement(transformation(origin = {-136, -52}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -54}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Continuous.Integrator intPload annotation(
      Placement(transformation(origin = {-50, -88}, extent = {{-6, -6}, {6, 6}})));
    Modelica.Blocks.Continuous.Integrator intPhp annotation(
      Placement(transformation(origin = {-50, -50}, extent = {{-6, -6}, {6, 6}})));
    Modelica.Blocks.Continuous.Integrator intPpump annotation(
      Placement(transformation(origin = {-50, 0}, extent = {{-6, -6}, {6, 6}})));
    Modelica.Blocks.Continuous.Integrator intPchp annotation(
      Placement(transformation(origin = {-72, 18}, extent = {{-6, -6}, {6, 6}})));
    Modelica.Blocks.Continuous.Integrator intPpv annotation(
      Placement(transformation(origin = {-68, 100}, extent = {{-6, -6}, {6, 6}})));
    Modelica.Blocks.Continuous.Integrator intPwind annotation(
      Placement(transformation(origin = {-68, 72}, extent = {{-6, -6}, {6, 6}})));
    Modelica.Blocks.Continuous.Integrator intPcom annotation(
      Placement(transformation(origin = {-50, -68}, extent = {{-6, -6}, {6, 6}})));
    Modelica.Blocks.Continuous.Integrator intPpemel annotation(
      Placement(transformation(origin = {-50, -22}, extent = {{-6, -6}, {6, 6}})));
    Modelica.Blocks.Interfaces.RealInput Pdem(final quantity = "Power", unit = "W") annotation(
      Placement(transformation(origin = {-30, -28}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -40}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Psup(final quantity = "Power", unit = "W") annotation(
      Placement(transformation(origin = {-28, 78}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -40}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealOutput Epv(unit = "J") "electrical energy supply by PV" annotation(
      Placement(transformation(origin = {-48, 98}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -50}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Interfaces.RealOutput Ewind(unit = "J") "electrical energy supply by Wind" annotation(
      Placement(transformation(origin = {-44, 70}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -70}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Interfaces.RealOutput Echp(unit = "J") "electrical energy supply by CHP" annotation(
      Placement(transformation(origin = {-50, 18}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -88}, extent = {{-10, -10}, {10, 10}})));
  equation
    Pgrid_own = Ppv + Pwind + Pload + Pchp + Ppump + Php + Ppemel + Pcom;
    connect(intPsum.y, EsupTotal) annotation(
      Line(points = {{24, 78}, {40, 78}, {40, 50}, {92, 50}}, color = {0, 0, 127}));
    connect(intPdem.y, EdemTotal) annotation(
      Line(points = {{25, -28}, {36, -28}, {36, -60}, {92, -60}}, color = {0, 0, 127}));
    connect(ume.UME, Ume) annotation(
      Line(points = {{54, 14}, {84, 14}}, color = {0, 0, 127}));
    connect(Pload, intPload.u) annotation(
      Line(points = {{-106, -64}, {-83, -64}, {-83, -88}, {-57, -88}}, color = {0, 0, 127}));
    connect(Php, intPhp.u) annotation(
      Line(points = {{-108, -38}, {-62, -38}, {-62, -50}, {-58, -50}}, color = {0, 0, 127}));
    connect(Ppump, intPpump.u) annotation(
      Line(points = {{-110, -10}, {-84, -10}, {-84, 0}, {-57, 0}}, color = {0, 0, 127}));
    connect(Pchp, intPchp.u) annotation(
      Line(points = {{-110, 18}, {-79, 18}}, color = {0, 0, 127}));
    connect(Ppv, intPpv.u) annotation(
      Line(points = {{-110, 100}, {-75, 100}}, color = {0, 0, 127}));
    connect(Pwind, intPwind.u) annotation(
      Line(points = {{-110, 72}, {-75, 72}}, color = {0, 0, 127}));
    connect(Pcom, intPcom.u) annotation(
      Line(points = {{-136, -52}, {-66, -52}, {-66, -68}, {-57, -68}}, color = {0, 0, 127}));
    connect(Ppemel, intPpemel.u) annotation(
      Line(points = {{-136, -24}, {-58, -24}, {-58, -22}}, color = {0, 0, 127}));
    connect(Psup, intPsum.u) annotation(
      Line(points = {{-28, 78}, {0, 78}}, color = {0, 0, 127}));
    connect(Pdem, intPdem.u) annotation(
      Line(points = {{-30, -28}, {2, -28}}, color = {0, 0, 127}));
    connect(Pdem, ume.Demand) annotation(
      Line(points = {{-30, -28}, {-8, -28}, {-8, 10}, {30, 10}}, color = {0, 0, 127}));
    connect(Psup, ume.Supply) annotation(
      Line(points = {{-28, 78}, {-6, 78}, {-6, 18}, {30, 18}}, color = {0, 0, 127}));
    connect(intPchp.y, Echp) annotation(
      Line(points = {{-66, 18}, {-50, 18}}, color = {0, 0, 127}));
    connect(intPwind.y, Ewind) annotation(
      Line(points = {{-62, 72}, {-44, 72}, {-44, 70}}, color = {0, 0, 127}));
    connect(intPpv.y, Epv) annotation(
      Line(points = {{-62, 100}, {-48, 100}, {-48, 98}}, color = {0, 0, 127}));
    annotation(
      Icon,
      Diagram,
      Documentation(info = "<html><head></head><body>Summary of the most important results in relation to the power supply</body></html>"));
  end Results_electrical;

  model Results_heating
    extends Modelica.Blocks.Icons.Block;
    Modelica.Blocks.Interfaces.RealInput m_dot_CH4(unit = "kg/s") "CH4 mass flow consumed by ICE CHP" annotation(
      Placement(transformation(origin = {-104, -92}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 108}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Qchp(final quantity = "Power", unit = "W") "Heat supply by ICE CHP" annotation(
      Placement(transformation(origin = {-110, 100}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 90}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Qhp(final quantity = "Power", unit = "W") "Heat supply by heat pump" annotation(
      Placement(transformation(origin = {-110, 72}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 64}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Qdem(final quantity = "Power", unit = "W") "Heat load" annotation(
      Placement(transformation(origin = {-108, -36}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 36}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput SOCtes "State of charge of TES" annotation(
      Placement(transformation(origin = {-106, -126}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 10}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Qtes(final quantity = "Power", unit = "W") "Power stored in TES (Qtes > 0 charging,Qtes < 0 discharging " annotation(
      Placement(transformation(origin = {-110, 44}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -16}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Qst(final quantity = "Power", unit = "W") "Heat supply by solar thermal" annotation(
      Placement(transformation(origin = {-110, 16}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -40}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Qsup(final quantity = "Power", unit = "W") "Total heat supply" annotation(
      Placement(transformation(origin = {-110, -12}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -68}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Etes(final quantity = "Energy", unit = "J") "Energy stored in TES" annotation(
      Placement(transformation(origin = {-106, -148}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -86}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput m_dot_H2(unit = "kg/s") "H2 mass flow consumed by ICE CHP" annotation(
      Placement(transformation(origin = {-104, -64}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -112}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Pfuel(unit = "W") "CHP fuel power demand" annotation(
      Placement(transformation(origin = {-104, 126}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-122, 128}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Ttank(unit = "K") "Current tank temperature" annotation(
      Placement(transformation(origin = {-98, 154}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -126}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealOutput m_H2(unit = "kg") "Needed H2 mass" annotation(
      Placement(transformation(origin = {92, -32}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 10}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Interfaces.RealOutput m_CH4(unit = "kg") "Needed CH4 mass" annotation(
      Placement(transformation(origin = {92, -60}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -12}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Interfaces.RealOutput EnergyCoverage "Energy coverage" annotation(
      Placement(transformation(origin = {84, 14}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 34}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Interfaces.RealOutput EdemTotal(unit = "J") "Energy demand over time" annotation(
      Placement(transformation(origin = {98, 78}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 78}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Interfaces.RealOutput EsupTotal(unit = "J") "Energy supplied over time" annotation(
      Placement(transformation(origin = {92, 50}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 56}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Interfaces.RealOutput Echp(unit = "J") "Energy supplied by chp" annotation(
      Placement(transformation(origin = {98, 100}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -30}, extent = {{-10, -10}, {10, 10}})));
  protected
    Modelica.Blocks.Continuous.Integrator intQsup annotation(
      Placement(transformation(origin = {-58, -6}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Continuous.Integrator inQdem(y_start = 0.01, k = 1) annotation(
      Placement(transformation(origin = {-58, -36}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Math.Division EnCov annotation(
      Placement(transformation(origin = {-28, -20}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Continuous.Integrator intH2 annotation(
      Placement(transformation(origin = {-58, -64}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Continuous.Integrator intCH4 annotation(
      Placement(transformation(origin = {-58, -96}, extent = {{-10, -10}, {10, 10}})));
  public
    Modelica.Blocks.Interfaces.RealInput COP(unit = "1") "Heat pump COP" annotation(
      Placement(transformation(origin = {-102, -178}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -144}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Continuous.Integrator E_CHP annotation(
      Placement(transformation(origin = {-62, 100}, extent = {{-10, -10}, {10, 10}})));
  equation
    connect(Qdem, inQdem.u) annotation(
      Line(points = {{-108, -36}, {-70, -36}}, color = {0, 0, 127}));
    connect(Qsup, intQsup.u) annotation(
      Line(points = {{-110, -12}, {-76, -12}, {-76, -6}, {-70, -6}}, color = {0, 0, 127}));
    connect(intQsup.y, EnCov.u1) annotation(
      Line(points = {{-46, -6}, {-40, -6}, {-40, -14}}, color = {0, 0, 127}));
    connect(inQdem.y, EnCov.u2) annotation(
      Line(points = {{-46, -36}, {-40, -36}, {-40, -26}}, color = {0, 0, 127}));
    connect(EnCov.y, EnergyCoverage) annotation(
      Line(points = {{-16, -20}, {16, -20}, {16, 14}, {84, 14}}, color = {0, 0, 127}));
    connect(m_dot_H2, intH2.u) annotation(
      Line(points = {{-104, -64}, {-70, -64}}, color = {0, 0, 127}));
    connect(intH2.y, m_H2) annotation(
      Line(points = {{-46, -64}, {-6, -64}, {-6, -32}, {92, -32}}, color = {0, 0, 127}));
    connect(m_dot_CH4, intCH4.u) annotation(
      Line(points = {{-104, -92}, {-76, -92}, {-76, -96}, {-70, -96}}, color = {0, 0, 127}));
    connect(intCH4.y, m_CH4) annotation(
      Line(points = {{-46, -96}, {6, -96}, {6, -60}, {92, -60}}, color = {0, 0, 127}));
    connect(intQsup.y, EsupTotal) annotation(
      Line(points = {{-46, -6}, {-42, -6}, {-42, 50}, {92, 50}}, color = {0, 0, 127}));
    connect(inQdem.y, EdemTotal) annotation(
      Line(points = {{-46, -36}, {-10, -36}, {-10, 78}, {98, 78}}, color = {0, 0, 127}));
    connect(Qchp, E_CHP.u) annotation(
      Line(points = {{-110, 100}, {-74, 100}}, color = {0, 0, 127}));
    connect(E_CHP.y, Echp) annotation(
      Line(points = {{-50, 100}, {98, 100}}, color = {0, 0, 127}));
    annotation(
      Icon,
      Diagram(coordinateSystem(extent = {{-140, 160}, {100, -180}})),
      Documentation(info = "<html><head></head><body>Summary of the most important results in relation to the heat supply</body></html>"));
  end Results_heating;

  model Results_hydrogen
    extends Modelica.Blocks.Icons.Block;
    Modelica.Blocks.Interfaces.RealInput m_dot_H2(unit = "kg/s") "Mass flow of H2 produced" annotation(
      Placement(transformation(origin = {-110, -66}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 108}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput p(unit = "Pa") "Pressure in tank" annotation(
      Placement(transformation(origin = {-110, 100}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 90}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput m_dot_H2O(unit = "kg/s") "Mass flow of H2O consumed" annotation(
      Placement(transformation(origin = {-110, 72}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 64}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput m_dot_O2(unit = "kg/s") "Mass flow of O2 produced" annotation(
      Placement(transformation(origin = {-108, -36}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 36}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput V_dot_H2(unit = "m3/s") "Volume flow of H2 produced" annotation(
      Placement(transformation(origin = {-112, -100}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 10}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput V_dot_H2O(unit = "m3/s") "Volume flow of H2O produced" annotation(
      Placement(transformation(origin = {-110, 44}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -16}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput V_dot_O2(unit = "m3/s") "Volume flow of O2 produced" annotation(
      Placement(transformation(origin = {-110, 16}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -40}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput eta_cell(unit = "1") "Cell efficiency" annotation(
      Placement(transformation(origin = {-110, -12}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -68}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput eta_energy(unit = "1") "Energy efficiency" annotation(
      Placement(transformation(origin = {-112, -122}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -86}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput P_pemel(unit = "W") "Power consumed by electrolyser" annotation(
      Placement(transformation(origin = {-104, 126}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 130}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput P_com(unit = "W") "Power consumed by compressor" annotation(
      Placement(transformation(origin = {-114, 156}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -106}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput SOC(unit = "1") "SOC of hydrogen storage" annotation(
      Placement(transformation(origin = {-108, -152}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -124}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealOutput m_H2O(unit = "kg") "Mass of H2O consumed" annotation(
      Placement(transformation(origin = {120, 72}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 90}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Interfaces.RealOutput V_H2O(unit = "m3") "Volume of H2O consumed" annotation(
      Placement(transformation(origin = {110, 44}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 70}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Interfaces.RealOutput V_O2(unit = "m3") "Volume of O2 produced" annotation(
      Placement(transformation(origin = {110, 16}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 50}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Interfaces.RealOutput m_O2(unit = "kg") "Mass of O2 produced" annotation(
      Placement(transformation(origin = {110, -36}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 30}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Interfaces.RealOutput m_H2(unit = "kg") "Mass of H2 produced" annotation(
      Placement(transformation(origin = {110, -66}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 10}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Interfaces.RealOutput V_H2(unit = "m3") "Volume of H2 produced" annotation(
      Placement(transformation(origin = {110, -100}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -8}, extent = {{-10, -10}, {10, 10}})));
  protected
    Modelica.Blocks.Continuous.Integrator int_m_H2O annotation(
      Placement(transformation(origin = {-70, 72}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Continuous.Integrator int_V_H2O annotation(
      Placement(transformation(origin = {-72, 44}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Continuous.Integrator int_V_O2 annotation(
      Placement(transformation(origin = {-72, 16}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Continuous.Integrator int_m_O2 annotation(
      Placement(transformation(origin = {-70, -36}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Continuous.Integrator int_m_H2 annotation(
      Placement(transformation(origin = {-70, -66}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Continuous.Integrator int_V_H2 annotation(
      Placement(transformation(origin = {-68, -100}, extent = {{-10, -10}, {10, 10}})));
  public
    Modelica.Blocks.Interfaces.RealOutput Epemel(unit = "J") annotation(
      Placement(transformation(origin = {120, 124}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -48}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Continuous.Integrator int_Epemel annotation(
      Placement(transformation(origin = {-50, 124}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Interfaces.RealOutput Ecom(unit = "J") annotation(
      Placement(transformation(origin = {120, 158}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -28}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Continuous.Integrator int_Ecom annotation(
      Placement(transformation(origin = {-50, 158}, extent = {{-10, -10}, {10, 10}})));
  equation
    connect(m_dot_H2O, int_m_H2O.u) annotation(
      Line(points = {{-110, 72}, {-82, 72}}, color = {0, 0, 127}));
    connect(V_dot_H2O, int_V_H2O.u) annotation(
      Line(points = {{-110, 44}, {-84, 44}}, color = {0, 0, 127}));
    connect(V_dot_O2, int_V_O2.u) annotation(
      Line(points = {{-110, 16}, {-84, 16}}, color = {0, 0, 127}));
    connect(m_dot_O2, int_m_O2.u) annotation(
      Line(points = {{-108, -36}, {-82, -36}}, color = {0, 0, 127}));
    connect(m_dot_H2, int_m_H2.u) annotation(
      Line(points = {{-110, -66}, {-82, -66}}, color = {0, 0, 127}));
    connect(V_dot_H2, int_V_H2.u) annotation(
      Line(points = {{-112, -100}, {-80, -100}}, color = {0, 0, 127}));
    connect(int_m_H2O.y, m_H2O) annotation(
      Line(points = {{-58, 72}, {120, 72}}, color = {0, 0, 127}));
    connect(int_V_H2O.y, V_H2O) annotation(
      Line(points = {{-60, 44}, {110, 44}}, color = {0, 0, 127}));
    connect(int_V_O2.y, V_O2) annotation(
      Line(points = {{-60, 16}, {110, 16}}, color = {0, 0, 127}));
    connect(int_m_O2.y, m_O2) annotation(
      Line(points = {{-58, -36}, {110, -36}}, color = {0, 0, 127}));
    connect(int_m_H2.y, m_H2) annotation(
      Line(points = {{-58, -66}, {110, -66}}, color = {0, 0, 127}));
    connect(int_V_H2.y, V_H2) annotation(
      Line(points = {{-57, -100}, {110, -100}}, color = {0, 0, 127}));
    connect(int_Epemel.y, Epemel) annotation(
      Line(points = {{-39, 124}, {120, 124}}, color = {0, 0, 127}));
    connect(int_Ecom.y, Ecom) annotation(
      Line(points = {{-39, 158}, {120, 158}}, color = {0, 0, 127}));
    connect(P_pemel, int_Epemel.u) annotation(
      Line(points = {{-104, 126}, {-70, 126}, {-70, 124}, {-62, 124}}, color = {0, 0, 127}));
    connect(P_com, int_Ecom.u) annotation(
      Line(points = {{-114, 156}, {-62, 156}, {-62, 158}}, color = {0, 0, 127}));
    annotation(
      Icon,
      Diagram(coordinateSystem(extent = {{-140, 160}, {100, -180}})),
      Documentation(info = "<html><head></head><body>Summary of the most important results in relation to hydrogen supply</body></html>"));
  end Results_hydrogen;

  model Results_CO2e "CO2e Emissions Calculation"
    extends Modelica.Blocks.Icons.Block;
    Real LHV_CH4(final unit = "kWh/kg") = 13.9 "Lower Heating Value of Natural Gas";
    parameter CO2e_factors.CO2ePower Mix = CO2e_factors.Mix_Ger "Energymix";
    Modelica.Units.NonSI.Energy_kWh Egrid "Energy from grid";
    CO2e_factors.CO2e CO2e_Grid "CO2e emissions from the grid";
    CO2e_factors.CO2e CO2e_CH4 "CO2e emissions from CH4";
    CO2e_factors.CO2e CO2e "Total CO2e emission";
    Modelica.Blocks.Interfaces.RealInput Pgrid(unit = "W") "P > 0 if real power is consumed from the grid, and P < 0 if it is fed into the grid" annotation(
      Placement(transformation(origin = {-108, 40}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-122, 36}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput m_CH4(unit = "kg") "Needed CH4 mass" annotation(
      Placement(transformation(origin = {-108, -40}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -40}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Logical.GreaterThreshold greater annotation(
      Placement(transformation(origin = {-44, 40}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Continuous.Integrator int_Pgrid annotation(
      Placement(transformation(origin = {46, 40}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Logical.Switch sw1 annotation(
      Placement(transformation(origin = {8, 40}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Sources.Constant const(k = 0) annotation(
      Placement(transformation(origin = {-46, 6}, extent = {{-10, -10}, {10, 10}})));
  equation
    CO2e_CH4 = LHV_CH4*m_CH4*CO2e_factors.CH4;
//Conversion of Joule to kWh
    Egrid = Modelica.Units.Conversions.to_kWh(int_Pgrid.y);
    if Egrid >= 0 then
      CO2e_Grid = Egrid*Mix;
    else
      CO2e_Grid = 0;
    end if;
    CO2e = (CO2e_Grid + CO2e_CH4);
    connect(greater.y, sw1.u2) annotation(
      Line(points = {{-33, 40}, {-5, 40}}, color = {255, 0, 255}));
    connect(sw1.y, int_Pgrid.u) annotation(
      Line(points = {{19, 40}, {33, 40}}, color = {0, 0, 127}));
    connect(Pgrid, greater.u) annotation(
      Line(points = {{-108, 40}, {-56, 40}}, color = {0, 0, 127}));
    connect(const.y, sw1.u3) annotation(
      Line(points = {{-34, 6}, {-4, 6}, {-4, 32}}, color = {0, 0, 127}));
    connect(Pgrid, sw1.u1) annotation(
      Line(points = {{-108, 40}, {-70, 40}, {-70, 66}, {-4, 66}, {-4, 48}}, color = {0, 0, 127}));
    annotation(
      Documentation(info = "<html><head></head><body>Summary of the most important results in relation to the CO<sub>2</sub>e calculation</body></html>"));
  end Results_CO2e;

  model Results_costs
    extends Modelica.Blocks.Icons.Block;
    parameter Real i = 0.05 "Discount rate";
    package Medium = Buildings.Media.Water "Fluid stored in the tank";
    parameter Modelica.Units.SI.Power Pwind_on "Installed onshore wind power" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.SI.Power Pwind_off "Installed offshore wind power" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.SI.Power Pwind_dom "Installed domnestic wind power" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.SI.Area Ast "Installed solar thermal" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.SI.Area Apv_res "Installed rooftop residential PV area" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.SI.Area Apv_com "Installed commercial residential PV area" annotation(
      Dialog(group = "Installed units"));
    parameter Real etapv = 0.12 "Efficiency of PV" annotation(
      Dialog(group = "Installed units"));
    parameter Real I = 1000 "Solar radiation intensity W/m2" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.SI.Power Pel_chp = 10 "Installed electrical nominal power" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.SI.Power Pth_ashp = 10 "Installed thermal power air source heat Pump" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.SI.Power Pth_gshp = 10 "Installed thermal power ground source heat Pump" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.SI.Power Ppemel "Installed electrolyser capacity" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.NonSI.Energy_kWh Ebat "Battery size" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.SI.Volume Vtes = 0.1 "TES volume" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.SI.Volume Vhyd = 0.1 "Hydrogen tank volume" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.SI.Temperature T_supply = 333.15 "Nominal heating water supply temperature" annotation(
      Dialog(group = "Heating System"));
    parameter Modelica.Units.SI.Temperature T_return = 318.15 "Nominal heating water return temperature" annotation(
      Dialog(group = "Heating System"));
    parameter Costs.EuroEnergy elPrice = Costs.El_Ger "Electricity price" annotation(
      Dialog(group = "Costs and Profit"));
    parameter Costs.EuroEnergy gasPrice = Costs.Gas_Ger "Gas price" annotation(
      Dialog(group = "Costs and Profit"));
    parameter Costs.EuroVol waterPrice = Costs.Water "Water industry price" annotation(
      Dialog(group = "Costs and Profit"));
    parameter Costs.EuroEnergy elCom = Costs.Pro_Ger "Feed-in compensation" annotation(
      Dialog(group = "Costs and Profit"));
    parameter Costs.EuroCO2 CO2_tax = Costs.CO2_tax "CO2 Tax per ton CO2" annotation(
      Dialog(group = "Costs and Profit"));
    parameter Costs.EuroMass LCOH_grid = 3.5 "CO2 Tax per ton CO2" annotation(
      Dialog(group = "Costs and Profit"));
    Modelica.Units.SI.Density rho_H2 = 0.08988 "Density H2";
    Real LHV_CH4(final unit = "kWh/kg") = 13.9 "Lower Heating Value of Natural Gas";
    Real LHV_H2(final unit = "kWh/kg") = 33.3 "Lower Heating Value of Hydrogen";
    Real HHV(final unit = "kWh/kg") = 39.4 "Hydrogen HHV";
    //ST
    Modelica.Units.NonSI.Energy_kWh Est = perfomance_ST*Ast;
    //PV
    Modelica.Units.SI.Power Ppv_res = Apv_res*etapv*I "Installed residential Wp";
    Modelica.Units.SI.Power Ppv_com = Apv_com*etapv*I "Installed commercial Wp";
    // Energy declaration
    Modelica.Units.NonSI.Energy_kWh Egrid_buy "Energy brought from grid";
    Modelica.Units.NonSI.Energy_kWh Egas "Energy used by natural gas";
    Modelica.Units.NonSI.Energy_kWh Eh2 "Energy used by Hydrogen";
    Modelica.Units.NonSI.Energy_kWh Esup "Energy supply";
    Modelica.Units.NonSI.Energy_kWh Egrid_sell "Energy sold to grid";
    Modelica.Units.NonSI.Energy_kWh Esav "Energy saved due to own production";
    Modelica.Units.NonSI.Energy_kWh Epemel_kWh "Energy consumed PEMEL";
    Modelica.Units.NonSI.Energy_kWh Ecom_kWh "Energy consumed Compressor";
    Modelica.Units.NonSI.Energy_kWh Epv_kWh = Modelica.Units.Conversions.to_kWh(Epv) "Electrical energy supplied by PV";
    Modelica.Units.NonSI.Energy_kWh Ewind_kWh = Modelica.Units.Conversions.to_kWh(Ewind) "Electrical energy supplied by Wind";
    Modelica.Units.NonSI.Energy_kWh Echp_kWh = Modelica.Units.Conversions.to_kWh(Echp) "Electrical energy supplied by CHP";
    //---
    // Calulating  Energy storage
    final parameter Modelica.Units.NonSI.Energy_kWh Etes = Modelica.Units.Conversions.to_kWh(cp_default*m*(T_supply - T_return)) "Max. thermal energy to be stored";
    Modelica.Units.NonSI.Energy_kWh E_H2 = LHV_H2*Vhyd*rho_H2 "Hydrogen tank size";
    //Investment Costs
    Costs.Euro Iwind_on "Investment cost onshore wind power";
    Costs.Euro Iwind_off "Investment cost offshore wind power";
    Costs.Euro Iwind_dom "Investment cost domestic wind power";
    Costs.Euro Ipv_res "Investment cost residential pv";
    Costs.Euro Ipv_com "Investment cost commercial pv";
    Costs.Euro Ist "Investment cost solar thermal";
    Costs.Euro Ichp "Investment cost chp unit";
    Costs.Euro Ibat "Investment cost battery including inverter";
    Costs.Euro Ibat_inv "Investment cost battery inverter";
    Costs.Euro Ites "Investment cost tes";
    Costs.Euro IH2 "Investment cost hydrogen tank";
    Costs.Euro Inv "Investment";
    Costs.Euro Ipemel "Investment costs PEMEL";
    Costs.Euro Iashp "Investment costs air source heat pump";
    Costs.Euro Igshp "Investment costs ground source heat pump";
    //Operation Costs
    Costs.Euro Cgrid "Costs from purchased electricity";
    Costs.Euro Cgas "Costs from purchased natural gas";
    Costs.Euro Ctotal "Total costs";
    Costs.Euro Csav "Cost saving";
    Costs.Euro Profit "Profit";
    Costs.Euro Cwater "Cost of water";
    Costs.Euro Cco2_tax "Cost CO2";
    Costs.Euro Cfom "Cost of Fixed Operation and Maintenance";
    Costs.Euro CH2 "Hydrogen costs";
    //Payback period
    Costs.Liftime PBT "Payback time";
    // Heat credit CHP
    Costs.EuroEnergy HC "Heat credit of CHP";
    Costs.EuroEnergy Emix_kWh "Own energy mix costs";
    //----
    Modelica.Blocks.Interfaces.RealInput Pgrid(unit = "W") "P > 0 if real power is consumed from the grid, and P < 0 if it is fed into the grid" annotation(
      Placement(transformation(origin = {-120, 40}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -22}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput m_CH4(unit = "kg") "Needed CH4 mass" annotation(
      Placement(transformation(origin = {-120, 14}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -72}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Psup(final quantity = "Power", unit = "W") "Power supply by all sources" annotation(
      Placement(transformation(origin = {-120, -86}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 80}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput V_H2O(unit = "m3") "Consumed water by electrolyzer" annotation(
      Placement(transformation(origin = {-120, -38}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 38}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Logical.LessEqualThreshold lessEqualThreshold annotation(
      Placement(transformation(origin = {-38, 46}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Logical.Switch sw annotation(
      Placement(transformation(origin = {12, 44}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Sources.Constant const(k = 0) annotation(
      Placement(transformation(origin = {-38, 18}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Logical.GreaterThreshold greater annotation(
      Placement(transformation(origin = {-38, 84}, extent = {{-10, -10}, {10, 10}})));
    final parameter Modelica.Units.SI.SpecificHeatCapacity cp_default = Medium.specificHeatCapacityCp(Medium.setState_pTX(Medium.p_default, Medium.T_default, Medium.X_default)) "Specific heat capacity of medium at default medium state";
    final parameter Modelica.Units.SI.Density d_default = Medium.d_const "Constant density of medium";
    final parameter Modelica.Units.SI.Mass m = Vtes*d_default "Mass of the medium";
    Modelica.Blocks.Continuous.Integrator int_Psup annotation(
      Placement(transformation(origin = {-72, -86}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Continuous.Integrator int_Pgrid annotation(
      Placement(transformation(origin = {52, 84}, extent = {{-10, -10}, {10, 10}})));
    Real perfomance_ST = 435 "performance kWh/m2";
    Modelica.Blocks.Continuous.Integrator int_Pgrid_profit(k = -1) annotation(
      Placement(transformation(origin = {54, 44}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Logical.Switch sw1 annotation(
      Placement(transformation(origin = {14, 84}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Interfaces.RealInput m_H2(unit = "kg") "Needed H2 mass" annotation(
      Placement(transformation(origin = {-120, 80}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-118, 4}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Epemel(unit = "J") annotation(
      Placement(transformation(origin = {-94, -38}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 80}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput tCO2e(unit = "tCo2e") annotation(
      Placement(transformation(origin = {-120, -12}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -72}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Ecom(unit = "J") annotation(
      Placement(transformation(origin = {-92, -64}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 80}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Ewind(unit = "J") annotation(
      Placement(transformation(origin = {-40, -40}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 80}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Epv(unit = "J") annotation(
      Placement(transformation(origin = {-40, -14}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 80}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Echp(unit = "J") annotation(
      Placement(transformation(origin = {-40, -66}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 80}, extent = {{-20, -20}, {20, 20}})));
    output Real LCOE_Wind_on(unit = "€/kWh") "LCOE of Wind onshore";
    output Real LCOE_Wind_off(unit = "€/kWh") "LCOE of Wind offshore";
    output Real LCOE_Wind_dom(unit = "€/kWh") "LCOE of Wind domestic";
    output Real LCOE_PV_res(unit = "€/kWh") "LCOE of PV residential";
    output Real LCOE_PV_com(unit = "€/kWh") "LCOE of PV commercial";
    output Real LCOE_CHP(unit = "€/kWh") "LCOE of CHP with heat credit";
    output Real LCOH(unit = "€/kg") "LC of Hydrogen";
    output Real LCOH_kWh(unit = "€/kWh") "LC of Hydrogen";
  algorithm
//LOCE
    LCOE_Wind_on := Costs.calculateLCOE(1, i, Iwind_on, Iwind_on*Costs.FOM_Wind_on, 0, Costs.LTWind_on*Ewind_kWh);
    LCOE_Wind_off := Costs.calculateLCOE(1, i, Iwind_off, Iwind_off*Costs.FOM_Wind_off, 0, Costs.LTWind_off*Ewind_kWh);
    LCOE_Wind_dom := Costs.calculateLCOE(1, i, Iwind_dom, Iwind_dom*Costs.FOM_Wind_dom, 0, Costs.LTWind_dom*Ewind_kWh);
    LCOE_PV_res := Costs.calculateLCOE(1, i, Ipv_res, Ipv_res*Costs.FOM_Solar_res, 0, Costs.LTSolar_res*Epv_kWh);
    LCOE_PV_com := Costs.calculateLCOE(1, i, Ipv_com, Ipv_com*Costs.FOM_Solar_com, 0, Costs.LTSolar_com*Epv_kWh);
    LCOE_CHP := Costs.calculateLCOE(1, i, Ichp, Ichp*Costs.FOM_ICE_CHP, (CH2 + Cgas)*Costs.LTICE_CHP, Costs.LTICE_CHP*Echp_kWh) - HC;
    HC := Echp_kWh/(Pel_chp/1000*4000)*39/1000;
    LCOH := LCOH_grid;
    LCOH_kWh := LCOH*1/LHV_H2;
  equation
// Energymix
    if Esup > 0 then
      Emix_kWh = Ewind_kWh/Esup*(LCOE_Wind_on + LCOE_Wind_off + LCOE_Wind_dom) + Epv_kWh/Esup*(LCOE_PV_res + LCOE_PV_com) + Echp_kWh/Esup*LCOE_CHP;
    else
      Emix_kWh = 0;
    end if;
//Cacluation energy from grid and by natrual grid
    Esav = Esup + Epemel_kWh + Ecom_kWh;
    Egrid_sell = Modelica.Units.Conversions.to_kWh(int_Pgrid_profit.y);
    Egrid_buy = Modelica.Units.Conversions.to_kWh(int_Pgrid.y);
    Egas = m_CH4*LHV_CH4;
    Eh2 = m_H2*LHV_H2;
    Esup = Epv_kWh + Ewind_kWh + Echp_kWh;
    Epemel_kWh = Modelica.Units.Conversions.to_kWh(Epemel);
    Ecom_kWh = Modelica.Units.Conversions.to_kWh(Ecom);
//Investment Costs
    Iwind_on = Costs.Wind_on*Pwind_on/1000;
    Iwind_off = Costs.Wind_off*Pwind_off/1000;
    Iwind_dom = Costs.Wind_dom*Pwind_dom/1000;
    Ipv_res = Costs.Solar_res*Ppv_res/1000;
    Ipv_com = Costs.Solar_com*Ppv_com/1000;
    Ist = Costs.ST*Est/1000;
    Ichp = Costs.ICE_CHP*Pel_chp/1000;
    Ibat = Costs.Battery*Ebat;
    if Ebat == 0 then
      Ibat_inv = 0;
    else
      Ibat_inv = Costs.BatInver*(Pel_chp + Ppv_res + Ppv_com)/1000;
    end if;
    Ites = Costs.TES*Etes;
    IH2 = Costs.H2_tank*E_H2;
    Ipemel = Costs.PEMEL*Ppemel/1000;
    Iashp = Costs.ASHP*Pth_ashp/1000;
    Igshp = Costs.GSHP*Pth_gshp/1000;
    Inv = Iwind_on + Iwind_off + Iwind_dom + Ipv_res + Ipv_com + Ist + Ichp + Ibat + Ites + IH2 + Ipemel + Iashp + Igshp + Ibat_inv;
// dCfom
    Cfom = Iwind_on/Costs.LTWind_on*Costs.FOM_Wind_on + Iwind_off/Costs.LTWind_off*Costs.FOM_Wind_off + Iwind_dom/Costs.LTWind_dom*Costs.FOM_Wind_dom + Ipv_res/Costs.LTSolar_res*Costs.FOM_Solar_res + Ipv_com/Costs.LTSolar_com*Costs.FOM_Solar_com + Ist/Costs.LTST*Costs.FOM_ST + Ichp/Costs.LTICE_CHP*Costs.FOM_ICE_CHP + Ibat/Costs.LTBattery*Costs.FOM_Battery + Ites/Costs.LTTES*Costs.FOM_TES + IH2/Costs.LTH2_tank*Costs.FOM_H2_tank + Iashp/Costs.LTASHP*Costs.FOM_ASHP + Igshp/Costs.LTGSHP*Costs.FOM_GSHP + Ibat_inv/Costs.LTBatInver*Costs.FOM_BatInver + Ipemel/Costs.LTPEMEL*Costs.FOM_PEMEL;
// Operation Costs
    Cgrid = Egrid_buy*elPrice;
    Cgas = Egas*gasPrice;
    Ctotal = Cgrid + Cgas + Cfom + Cwater + CH2;
    Cwater = V_H2O*waterPrice;
    Cco2_tax = CO2_tax*tCO2e;
    CH2 = Eh2*LCOH_kWh;
// Electricty saving
    Profit = Egrid_sell*elCom;
    Csav = (Esup + Epemel_kWh + Ecom_kWh)*elPrice;
//+ m_H2*LHV_H2*(gasPrice-LCOH_kWh); // considering hydrogen is free!
// Payback Period
    if Profit == 0 and Csav == 0 or Profit + Csav == 0 then
      PBT = 0;
    else
      PBT = Inv/(Profit + Csav);
    end if;
    connect(Psup, int_Psup.u) annotation(
      Line(points = {{-120, -86}, {-84, -86}}, color = {0, 0, 127}));
    connect(Pgrid, lessEqualThreshold.u) annotation(
      Line(points = {{-120, 40}, {-82, 40}, {-82, 46}, {-50, 46}}, color = {0, 0, 127}));
    connect(lessEqualThreshold.y, sw.u2) annotation(
      Line(points = {{-27, 46}, {-11, 46}, {-11, 44}, {-1, 44}}, color = {255, 0, 255}));
    connect(Pgrid, sw.u1) annotation(
      Line(points = {{-120, 40}, {-58, 40}, {-58, 52}, {0, 52}}, color = {0, 0, 127}));
    connect(const.y, sw.u3) annotation(
      Line(points = {{-27, 18}, {0, 18}, {0, 36}}, color = {0, 0, 127}));
    connect(sw.y, int_Pgrid_profit.u) annotation(
      Line(points = {{23, 44}, {41, 44}}, color = {0, 0, 127}));
    connect(Pgrid, greater.u) annotation(
      Line(points = {{-120, 40}, {-99, 40}, {-99, 84}, {-50, 84}}, color = {0, 0, 127}));
    connect(Pgrid, sw1.u1) annotation(
      Line(points = {{-120, 40}, {-90, 40}, {-90, 92}, {2, 92}}, color = {0, 0, 127}));
    connect(greater.y, sw1.u2) annotation(
      Line(points = {{-27, 84}, {1, 84}}, color = {255, 0, 255}));
    connect(const.y, sw1.u3) annotation(
      Line(points = {{-27, 18}, {-11, 18}, {-11, 76}, {1, 76}}, color = {0, 0, 127}));
    connect(sw1.y, int_Pgrid.u) annotation(
      Line(points = {{25, 84}, {39, 84}}, color = {0, 0, 127}));
    annotation(
      Placement(transformation(origin = {42, -34}, extent = {{-10, -10}, {10, 10}})),
      Diagram,
      Documentation(info = "<html><head></head><body>Cost calculation for the basic model with constant hydrogen prices. Database is stored in the packagae <b><i>Costs.</i></b>
    <p>Operating costs are defined as the sum of consumed natural gas, electricity from the grid, only when P<sub>grid</sub> &gt; 0, and water for hydrogen production, each multiplied by its respective costs:</p>
    
    <p>Inv = ∑ CAPEX<sub>i</sub> · N<sub>i</sub>.&nbsp;</p>
    
    <p>C<sub>op</sub> = C<sub>fuel</sub> + ∫<sub>0</sub><sup>t</sup> P<sub>grid</sub> dt · C<sub>grid</sub> + V<sub>H2O</sub> · C<sub>H2O</sub>.&nbsp;</p>
    
    <p>On the other hand, profits are made only when P<sub>grid</sub> &lt; 0 from <b>Equation 4.1</b>, multiplied by the feed-in compensation, C<sub>profit</sub>:</p>
    
    <p>Profit = ∫<sub>0</sub><sup>t</sup> P<sub>grid</sub> dt · C<sub>profit</sub>.&nbsp;</p>
    
    <p>A linear depreciation has been applied as follows:</p>
    
    <p>depr<sub>i</sub> = <sup>Inv<sub>i</sub></sup>⁄<sub>LT<sub>i</sub></sub>,&nbsp;</p>
    
    <p>where LT<sub>i</sub> represents the lifetime of the device. This can be used to calculate the costs of Fixed Operation and Maintenance (FOM), which is part of the Operational Expenditures (OPEX), as C<sub>FOM</sub>, using the corresponding factor from <b>Table 4.5</b> as follows:</p>
    
    <p>C<sub>FOM</sub> = depr<sub>i</sub> · FOM<sub>i</sub>.&nbsp;</p>
    
    <p>The costs of the consumed fuel are defined as:</p>
    
    <p>C<sub>fuel</sub> = m<sub>CH4</sub> · LHV<sub>CH4</sub> · C<sub>CH4</sub> + m<sub>H2</sub> · LHV<sub>H2</sub> · LCOH,&nbsp;</p>
    
    <p>where LCOH stands for Levelized Costs of Hydrogen.</p>
</body></html>"));
  end Results_costs;

  model Results_costs_H2
    extends Modelica.Blocks.Icons.Block;
    parameter Real i = 0.05 "Discount rate";
    package Medium = Buildings.Media.Water "Fluid stored in the tank";
    parameter Modelica.Units.SI.Power Pwind_on "Installed onshore wind power" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.SI.Power Pwind_off "Installed offshore wind power" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.SI.Power Pwind_dom "Installed domnestic wind power" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.SI.Area Ast "Installed solar thermal" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.SI.Area Apv_res "Installed rooftop residential PV area" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.SI.Area Apv_com "Installed commercial residential PV area" annotation(
      Dialog(group = "Installed units"));
    parameter Real etapv = 0.12 "Efficiency of PV" annotation(
      Dialog(group = "Installed units"));
    parameter Real I = 1000 "Solar radiation intensity W/m2" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.SI.Power Pel_chp = 10 "Installed electrical nominal power" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.SI.Power Pth_ashp = 10 "Installed thermal power air source heat Pump" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.SI.Power Pth_gshp = 10 "Installed thermal power ground source heat Pump" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.SI.Power Ppemel "Installed electrolyser capacity" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.NonSI.Energy_kWh Ebat "Battery size" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.SI.Volume Vtes = 0.1 "TES volume" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.SI.Volume Vhyd = 0.1 "Hydrogen tank volume" annotation(
      Dialog(group = "Installed units"));
    parameter Modelica.Units.SI.Temperature T_supply = 333.15 "Nominal heating water supply temperature" annotation(
      Dialog(group = "Heating System"));
    parameter Modelica.Units.SI.Temperature T_return = 318.15 "Nominal heating water return temperature" annotation(
      Dialog(group = "Heating System"));
    parameter Costs.EuroEnergy elPrice = Costs.El_Ger "Electricity price" annotation(
      Dialog(group = "Costs and Profit"));
    parameter Costs.EuroEnergy gasPrice = Costs.Gas_Ger "Gas price" annotation(
      Dialog(group = "Costs and Profit"));
    parameter Costs.EuroVol waterPrice = Costs.Water "Water industry price" annotation(
      Dialog(group = "Costs and Profit"));
    parameter Costs.EuroEnergy elCom = Costs.Pro_Ger "Feed-in compensation" annotation(
      Dialog(group = "Costs and Profit"));
    parameter Costs.EuroCO2 CO2_tax = Costs.CO2_tax "CO2 Tax per ton CO2" annotation(
      Dialog(group = "Costs and Profit"));
    Modelica.Units.SI.Density rho_H2 = 0.08988 "Density H2";
    Real LHV_CH4(final unit = "kWh/kg") = 13.9 "Lower Heating Value of Natural Gas";
    Real LHV_H2(final unit = "kWh/kg") = 33.3 "Lower Heating Value of Hydrogen";
    Real HHV(final unit = "kWh/kg") = 39.4 "Hydrogen HHV";
    //ST
    Modelica.Units.NonSI.Energy_kWh Est = perfomance_ST*Ast;
    //PV
    Modelica.Units.SI.Power Ppv_res = Apv_res*etapv*I "Installed residential Wp";
    Modelica.Units.SI.Power Ppv_com = Apv_com*etapv*I "Installed commercial Wp";
    // Energy declaration
    Modelica.Units.NonSI.Energy_kWh Egrid_buy "Energy brought from grid";
    Modelica.Units.NonSI.Energy_kWh Egas "Energy used by natural gas";
    Modelica.Units.NonSI.Energy_kWh Eh2 "Energy used by Hydrogen";
    Modelica.Units.NonSI.Energy_kWh Esup "Energy supply";
    Modelica.Units.NonSI.Energy_kWh Egrid_sell "Energy sold to grid";
    Modelica.Units.NonSI.Energy_kWh Esav "Energy saved due to own production";
    Modelica.Units.NonSI.Energy_kWh Epemel_kWh "Energy consumed PEMEL";
    Modelica.Units.NonSI.Energy_kWh Ecom_kWh "Energy consumed Compressor";
    Modelica.Units.NonSI.Energy_kWh Epv_kWh = Modelica.Units.Conversions.to_kWh(Epv) "Electrical energy supplied by PV";
    Modelica.Units.NonSI.Energy_kWh Ewind_kWh = Modelica.Units.Conversions.to_kWh(Ewind) "Electrical energy supplied by Wind";
    Modelica.Units.NonSI.Energy_kWh Echp_kWh = Modelica.Units.Conversions.to_kWh(Echp) "Electrical energy supplied by CHP";
    //---
    // Calulating  Energy storage
    final parameter Modelica.Units.NonSI.Energy_kWh Etes = Modelica.Units.Conversions.to_kWh(cp_default*m*(T_supply - T_return)) "Max. thermal energy to be stored";
    Modelica.Units.NonSI.Energy_kWh E_H2 = LHV_H2*Vhyd*rho_H2 "Hydrogen tank size";
    //Investment Costs
    Costs.Euro Iwind_on "Investment cost onshore wind power";
    Costs.Euro Iwind_off "Investment cost offshore wind power";
    Costs.Euro Iwind_dom "Investment cost domestic wind power";
    Costs.Euro Ipv_res "Investment cost residential pv";
    Costs.Euro Ipv_com "Investment cost commercial pv";
    Costs.Euro Ist "Investment cost solar thermal";
    Costs.Euro Ichp "Investment cost chp unit";
    Costs.Euro Ibat "Investment cost battery including inverter";
    Costs.Euro Ibat_inv "Investment cost battery inverter";
    Costs.Euro Ites "Investment cost tes";
    Costs.Euro IH2 "Investment cost hydrogen tank";
    Costs.Euro Inv "Investment";
    Costs.Euro Ipemel "Investment costs PEMEL";
    Costs.Euro Iashp "Investment costs air source heat pump";
    Costs.Euro Igshp "Investment costs ground source heat pump";
    //Operation Costs
    Costs.Euro Cgrid "Costs from purchased electricity";
    Costs.Euro Cgas "Costs from purchased natural gas";
    Costs.Euro Ctotal "Total costs";
    Costs.Euro Csav "Cost saving";
    Costs.Euro Profit "Profit";
    Costs.Euro Cwater "Cost of water";
    Costs.Euro Cco2_tax "Cost CO2";
    Costs.Euro Cfom "Cost of Fixed Operation and Maintenance";
    Costs.Euro CH2 "Hydrogen costs";
    //Payback period
    Costs.Liftime PBT "Payback time";
    // Heat credit CHP
    Costs.EuroEnergy HC "Heat credit of CHP";
    Costs.EuroEnergy Emix_kWh "Own energy mix costs";
    //----
    Modelica.Blocks.Interfaces.RealInput Pgrid(unit = "W") "P > 0 if real power is consumed from the grid, and P < 0 if it is fed into the grid" annotation(
      Placement(transformation(origin = {-120, 40}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -22}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput m_CH4(unit = "kg") "Needed CH4 mass" annotation(
      Placement(transformation(origin = {-120, 14}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -72}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Psup(final quantity = "Power", unit = "W") "Power supply by all sources" annotation(
      Placement(transformation(origin = {-120, -86}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 80}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput V_H2O(unit = "m3") "Consumed water by electrolyzer" annotation(
      Placement(transformation(origin = {-120, -38}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 38}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Logical.LessEqualThreshold lessEqualThreshold annotation(
      Placement(transformation(origin = {-38, 46}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Logical.Switch sw annotation(
      Placement(transformation(origin = {12, 44}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Sources.Constant const(k = 0) annotation(
      Placement(transformation(origin = {-38, 18}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Logical.GreaterThreshold greater annotation(
      Placement(transformation(origin = {-38, 84}, extent = {{-10, -10}, {10, 10}})));
    final parameter Modelica.Units.SI.SpecificHeatCapacity cp_default = Medium.specificHeatCapacityCp(Medium.setState_pTX(Medium.p_default, Medium.T_default, Medium.X_default)) "Specific heat capacity of medium at default medium state";
    final parameter Modelica.Units.SI.Density d_default = Medium.d_const "Constant density of medium";
    final parameter Modelica.Units.SI.Mass m = Vtes*d_default "Mass of the medium";
    Modelica.Blocks.Continuous.Integrator int_Psup annotation(
      Placement(transformation(origin = {-72, -86}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Continuous.Integrator int_Pgrid annotation(
      Placement(transformation(origin = {52, 84}, extent = {{-10, -10}, {10, 10}})));
    Real perfomance_ST = 435 "performance kWh/m2";
    Modelica.Blocks.Continuous.Integrator int_Pgrid_profit(k = -1) annotation(
      Placement(transformation(origin = {54, 44}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Logical.Switch sw1 annotation(
      Placement(transformation(origin = {14, 84}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Interfaces.RealInput m_H2(unit = "kg") "Needed H2 mass" annotation(
      Placement(transformation(origin = {-120, 80}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-118, 4}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Epemel(unit = "J") annotation(
      Placement(transformation(origin = {-94, -38}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 80}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput tCO2e(unit = "tCo2e") annotation(
      Placement(transformation(origin = {-120, -12}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -72}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Ecom(unit = "J") annotation(
      Placement(transformation(origin = {-92, -64}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 80}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Ewind(unit = "J") annotation(
      Placement(transformation(origin = {-40, -40}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 80}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Epv(unit = "J") annotation(
      Placement(transformation(origin = {-40, -14}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 80}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Echp(unit = "J") annotation(
      Placement(transformation(origin = {-40, -66}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 80}, extent = {{-20, -20}, {20, 20}})));
    output Real LCOE_Wind_on(unit = "€/kWh") "LCOE of Wind onshore";
    output Real LCOE_Wind_off(unit = "€/kWh") "LCOE of Wind offshore";
    output Real LCOE_Wind_dom(unit = "€/kWh") "LCOE of Wind domestic";
    output Real LCOE_PV_res(unit = "€/kWh") "LCOE of PV residential";
    output Real LCOE_PV_com(unit = "€/kWh") "LCOE of PV commercial";
    output Real LCOE_CHP(unit = "€/kWh") "LCOE of CHP with heat credit";
    output Real LCOH(unit = "€/kg") "LC of Hydrogen";
    output Real LCOH_grid(unit = "€/kg") "LC of Hydrogen with grid costs";
    output Real LCOH_kWh(unit = "€/kWh") "LC of Hydrogen";
    Real CAPEX;
    Real tau;
  initial equation
    LCOH_kWh = 0;
  algorithm
//LOCE
    LCOE_Wind_on := Costs.calculateLCOE(1, i, Iwind_on, Iwind_on*Costs.FOM_Wind_on, 0, Costs.LTWind_on*Ewind_kWh);
    LCOE_Wind_off := Costs.calculateLCOE(1, i, Iwind_off, Iwind_off*Costs.FOM_Wind_off, 0, Costs.LTWind_off*Ewind_kWh);
    LCOE_Wind_dom := Costs.calculateLCOE(1, i, Iwind_dom, Iwind_dom*Costs.FOM_Wind_dom, 0, Costs.LTWind_dom*Ewind_kWh);
    LCOE_PV_res := Costs.calculateLCOE(1, i, Ipv_res, Ipv_res*Costs.FOM_Solar_res, 0, Costs.LTSolar_res*Epv_kWh);
    LCOE_PV_com := Costs.calculateLCOE(1, i, Ipv_com, Ipv_com*Costs.FOM_Solar_com, 0, Costs.LTSolar_com*Epv_kWh);
    LCOE_CHP := Costs.calculateLCOE(1, i, Ichp, Ichp*Costs.FOM_ICE_CHP, (CH2 + Cgas)*Costs.LTICE_CHP, Costs.LTICE_CHP*Echp_kWh) - HC;
    HC := Echp_kWh/(Pel_chp/1000*4000)*39/1000;
    LCOH := Costs.calculateLCOH(eta_sys_LHV = 0.62, i = i, n = Costs.LTPEMEL, OPEX = Costs.FOM_PEMEL, CAPEX = CAPEX, tau = tau, E = Emix_kWh);
    LCOH_kWh := LCOH*1/LHV_H2;
    LCOH_grid := Costs.calculateLCOH(eta_sys_LHV = 0.62, i = i, n = Costs.LTPEMEL, OPEX = Costs.FOM_PEMEL, CAPEX = Costs.PEMEL, tau = -Epemel_kWh/(Ppemel/1000), E = elPrice);
  equation
    CAPEX = Costs.PEMEL + Costs.H2_tank;
    tau = -Epemel_kWh/(Ppemel/1000);
// Energymix
    if Esup > 0 then
      Emix_kWh = Ewind_kWh/Esup*(LCOE_Wind_on + LCOE_Wind_off + LCOE_Wind_dom) + Epv_kWh/Esup*(LCOE_PV_res + LCOE_PV_com) + Echp_kWh/Esup*LCOE_CHP;
    else
      Emix_kWh = 0;
    end if;
//Cacluation energy from grid and by natrual grid
    Esav = Esup + Epemel_kWh + Ecom_kWh;
    Egrid_sell = Modelica.Units.Conversions.to_kWh(int_Pgrid_profit.y);
    Egrid_buy = Modelica.Units.Conversions.to_kWh(int_Pgrid.y);
    Egas = m_CH4*LHV_CH4;
    Eh2 = m_H2*LHV_H2;
    Esup = Epv_kWh + Ewind_kWh + Echp_kWh;
    Epemel_kWh = Modelica.Units.Conversions.to_kWh(Epemel);
    Ecom_kWh = Modelica.Units.Conversions.to_kWh(Ecom);
//Investment Costs
    Iwind_on = Costs.Wind_on*Pwind_on/1000;
    Iwind_off = Costs.Wind_off*Pwind_off/1000;
    Iwind_dom = Costs.Wind_dom*Pwind_dom/1000;
    Ipv_res = Costs.Solar_res*Ppv_res/1000;
    Ipv_com = Costs.Solar_com*Ppv_com/1000;
    Ist = Costs.ST*Est/1000;
    Ichp = Costs.ICE_CHP*Pel_chp/1000;
    Ibat = Costs.Battery*Ebat;
    if Ebat == 0 then
      Ibat_inv = 0;
    else
      Ibat_inv = Costs.BatInver*(Pel_chp + Ppv_res + Ppv_com)/1000;
    end if;
    Ites = Costs.TES*Etes;
    IH2 = Costs.H2_tank*E_H2;
    Ipemel = Costs.PEMEL*Ppemel/1000;
    Iashp = Costs.ASHP*Pth_ashp/1000;
    Igshp = Costs.GSHP*Pth_gshp/1000;
    Inv = Iwind_on + Iwind_off + Iwind_dom + Ipv_res + Ipv_com + Ist + Ichp + Ibat + Ites + IH2 + Ipemel + Iashp + Igshp + Ibat_inv;
// dCfom
    Cfom = Iwind_on/Costs.LTWind_on*Costs.FOM_Wind_on + Iwind_off/Costs.LTWind_off*Costs.FOM_Wind_off + Iwind_dom/Costs.LTWind_dom*Costs.FOM_Wind_dom + Ipv_res/Costs.LTSolar_res*Costs.FOM_Solar_res + Ipv_com/Costs.LTSolar_com*Costs.FOM_Solar_com + Ist/Costs.LTST*Costs.FOM_ST + Ichp/Costs.LTICE_CHP*Costs.FOM_ICE_CHP + Ibat/Costs.LTBattery*Costs.FOM_Battery + Ites/Costs.LTTES*Costs.FOM_TES + IH2/Costs.LTH2_tank*Costs.FOM_H2_tank + Iashp/Costs.LTASHP*Costs.FOM_ASHP + Igshp/Costs.LTGSHP*Costs.FOM_GSHP + Ibat_inv/Costs.LTBatInver*Costs.FOM_BatInver + Ipemel/Costs.LTPEMEL*Costs.FOM_PEMEL;
// Operation Costs
    Cgrid = Egrid_buy*elPrice;
    Cgas = Egas*gasPrice;
    Ctotal = Cgrid + Cgas + Cfom + Cwater + CH2;
    Cwater = V_H2O*waterPrice;
    Cco2_tax = CO2_tax*tCO2e;
    CH2 = Eh2*LCOH_kWh;
// Electricty saving
    Profit = Egrid_sell*elCom;
    Csav = (Esup + Epemel_kWh + Ecom_kWh)*elPrice;
//+ m_H2*LHV_H2*(gasPrice-LCOH_kWh); // considering hydrogen is free!
// Payback Period
    if Profit == 0 and Csav == 0 or Profit + Csav == 0 then
      PBT = 0;
    else
      PBT = Inv/(Profit + Csav);
    end if;
    connect(Psup, int_Psup.u) annotation(
      Line(points = {{-120, -86}, {-84, -86}}, color = {0, 0, 127}));
    connect(Pgrid, lessEqualThreshold.u) annotation(
      Line(points = {{-120, 40}, {-82, 40}, {-82, 46}, {-50, 46}}, color = {0, 0, 127}));
    connect(lessEqualThreshold.y, sw.u2) annotation(
      Line(points = {{-27, 46}, {-11, 46}, {-11, 44}, {-1, 44}}, color = {255, 0, 255}));
    connect(Pgrid, sw.u1) annotation(
      Line(points = {{-120, 40}, {-58, 40}, {-58, 52}, {0, 52}}, color = {0, 0, 127}));
    connect(const.y, sw.u3) annotation(
      Line(points = {{-27, 18}, {0, 18}, {0, 36}}, color = {0, 0, 127}));
    connect(sw.y, int_Pgrid_profit.u) annotation(
      Line(points = {{23, 44}, {41, 44}}, color = {0, 0, 127}));
    connect(Pgrid, greater.u) annotation(
      Line(points = {{-120, 40}, {-99, 40}, {-99, 84}, {-50, 84}}, color = {0, 0, 127}));
    connect(Pgrid, sw1.u1) annotation(
      Line(points = {{-120, 40}, {-90, 40}, {-90, 92}, {2, 92}}, color = {0, 0, 127}));
    connect(greater.y, sw1.u2) annotation(
      Line(points = {{-27, 84}, {1, 84}}, color = {255, 0, 255}));
    connect(const.y, sw1.u3) annotation(
      Line(points = {{-27, 18}, {-11, 18}, {-11, 76}, {1, 76}}, color = {0, 0, 127}));
    connect(sw1.y, int_Pgrid.u) annotation(
      Line(points = {{25, 84}, {39, 84}}, color = {0, 0, 127}));
    annotation(
      Placement(transformation(origin = {42, -34}, extent = {{-10, -10}, {10, 10}})),
      Diagram,
      Documentation(info = "<html><head></head><body>Cost calculation for the hydrogen model with decentralised hydrogen production and dynamic hydrogen prices</body></html>"));
  end Results_costs_H2;

  model UME
    extends Modelica.Blocks.Icons.Block;
    Modelica.Blocks.Interfaces.RealInput Supply annotation(
      Placement(transformation(origin = {-108, 54}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-122, 40}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealInput Demand annotation(
      Placement(transformation(origin = {-104, -40}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -40}, extent = {{-20, -20}, {20, 20}})));
    Modelica.Blocks.Interfaces.RealOutput UME annotation(
      Placement(transformation(origin = {108, -2}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 0}, extent = {{-10, -10}, {10, 10}})));
  equation
    if Demand == 0 then
      UME = 0;
    else
      UME = (Demand + Supply)/Demand;
    end if;
    annotation(
      Documentation(info = "<html><head></head><body>Unmet energy (UME) needs at a given time in %</body></html>"));
  end UME;

  model Data_Input
    parameter String fileName = Modelica.Utilities.Files.loadResource("modelica://Energysystem/resources/loads/Loads_all.xlsx") "File path of the load sheets";
    parameter String fileNamePVProfil = Modelica.Utilities.Files.loadResource("modelica://Energysystem/resources/profils/PV_Profile1kW_Offenburg.xlsx") "File path of the pv profil";
    Modelica.Blocks.Sources.CombiTimeTable Heat(columns = 2:2, table = Loads.getRealArray2D("A1", "Heat", 8762, 2)) annotation(
      Placement(visible = true, transformation(origin = {-80, -4}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Blocks.Interfaces.RealOutput heat_load(final quantity = "Heat Load", final unit = "W") "Heat Load" annotation(
      Placement(transformation(origin = {-42, -4}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {100, -30}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Interfaces.RealOutput electricity_load(final quantity = "Electricity Load", final unit = "W") "Electricity Load" annotation(
      Placement(transformation(origin = {-42, 38}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {100, 32}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Sources.CombiTimeTable Electricity(columns = 2:2, table = Loads.getRealArray2D("A1", "Electricity", 8762, 2)) annotation(
      Placement(visible = true, transformation(origin = {-80, 38}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Blocks.Sources.CombiTimeTable pvProfil_table(table = pvProfil_excel.getRealArray2D("A1", "PVProfile1kW_1h", 8761, 2), columns = 2:2) annotation(
      Placement(transformation(origin = {-2, 38}, extent = {{-10, -10}, {10, 10}})));
    Modelica.Blocks.Interfaces.RealOutput pv_Profil(final quantity = "Power", final unit = "W") "PV profil" annotation(
      Placement(transformation(origin = {34, 38}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {100, 78}, extent = {{-10, -10}, {10, 10}})));
  protected
    inner parameter ExternData.XLSXFile pvProfil_excel(fileName = fileNamePVProfil) annotation(
      Placement(transformation(origin = {-2, 74}, extent = {{-10, -10}, {10, 10}})));
    inner parameter ExternData.XLSXFile Loads(fileName = fileName) annotation(
      Placement(visible = true, transformation(origin = {-80, 76}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  equation
    connect(Heat.y[1], heat_load) annotation(
      Line(points = {{-69, -4}, {-42, -4}}, color = {0, 0, 127}));
    connect(Electricity.y[1], electricity_load) annotation(
      Line(points = {{-69, 38}, {-42, 38}}, color = {0, 0, 127}));
    connect(pvProfil_table.y[1], pv_Profil) annotation(
      Line(points = {{10, 38}, {34, 38}}, color = {0, 0, 127}));
    annotation(
      Icon(graphics = {Polygon(fillPattern = FillPattern.Solid, points = {{-40, 90}, {-40, 40}, {-90, 40}, {-40, 90}}), Line(points = {{-40, 90}, {-90, 40}, {-90, -90}, {90, -90}, {90, 90}, {-40, 90}}), Text(origin = {-2, 102}, textColor = {0, 0, 255}, extent = {{-149, -114}, {151, -154}}, textString = "%name")}),
      Diagram(coordinateSystem(extent = {{-100, 100}, {100, -20}})),
      experiment(StartTime = 0, StopTime = 31536000, Tolerance = 1e-6, Interval = 3600),
      Documentation(info = "<html><head></head><body>Data input from Excel file. Please ensure that the Excel file has the correct structure.</body></html>"));
  end Data_Input;

  package CHP_model
    extends Modelica.Icons.Package;

    block ICE_CHP_modulation "Small ICE CHP starting from 50 kW electrical Power. Default CHP agenitor 404 bt80-1 (MN70)"
      parameter Modelica.Units.SI.Power P_th(displayUnit = "kW") "Nominal thermal Power" annotation(
        Dialog(group = "CHP"));
      parameter Modelica.Units.SI.Power P_el(displayUnit = "kW") "Nominal electrical Power" annotation(
        Dialog(group = "CHP"));
      Real eta_th "Nominal thermal efficiency" annotation(
        Dialog(group = "CHP"));
      Real eta_el "Nominal electrical efficiency" annotation(
        Dialog(group = "CHP"));
      parameter Modelica.Units.SI.Temperature T_supply = 333.15 "Nominal heating water supply temperature" annotation(
        Dialog(group = "Temperature"));
      parameter Modelica.Units.SI.Temperature T_return = 318.15 "Nominal heating water return temperature" annotation(
        Dialog(group = "Temperature"));
      parameter Real Zmin = 0.33 "minimal Modulation >= 0.33" annotation(
        Dialog(group = "Control"));
      parameter Real ratio_CH4 = 1 "Fuel composition, CH4 ratio" annotation(
        Dialog(group = "Fuel (Sum of the ratios = 1)"));
      parameter Real ratio_H2 = 0 "Fuel composition, H2 ratio" annotation(
        Dialog(group = "Fuel (Sum of the ratios = 1)"));
      Modelica.Blocks.Interfaces.RealInput Q_load(final unit = "W") "Heat load, targeted thermal power" annotation(
        Placement(transformation(origin = {-394, 252}, extent = {{-12, -12}, {12, 12}}), iconTransformation(origin = {-119, 21}, extent = {{-19, -19}, {19, 19}})));
      Modelica.Blocks.Sources.RealExpression P_thExpression(y = P_th/1000) annotation(
        Placement(transformation(origin = {-344, 230}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.RealExpression P_elExpression(y = P_el/1000) annotation(
        Placement(transformation(origin = {-198, 182}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.RealExpression T_returnExpression(y = T_return - 273.15) annotation(
        Placement(transformation(origin = {-198, 156}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.RealExpression T_supplyExpression(y = T_supply - 273.15) annotation(
        Placement(transformation(origin = {-198, 136}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.RealExpression eta_thExpression(y = eta_th) annotation(
        Placement(transformation(origin = {-200, 106}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.RealExpression eta_elExpression(y = eta_el) annotation(
        Placement(transformation(origin = {-200, 50}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Math.Gain Q_load_kW(k = 1/1000) annotation(
        Placement(transformation(origin = {-338, 206}, extent = {{-10, -10}, {10, 10}})));
      computation_eta_th calc_eta_th(Zmin = Zmin, P_th_nom = P_th) "calculation of eta thermal" annotation(
        Placement(transformation(origin = {-9, 191}, extent = {{-45, -45}, {45, 45}})));
      UpperBou_P_th Upper_Bou_Con_P_th "Upper bound controll block for thermal power generation" annotation(
        Placement(transformation(origin = {-282, 212}, extent = {{-16, -10}, {16, 16}})));
      computation_eta_el calc_eta_el(Zmin = Zmin, P_el_nom = P_el) "calculation of eta electrical" annotation(
        Placement(transformation(origin = {-5, 77}, extent = {{-45, -45}, {45, 45}})));
      Modelica.Blocks.Interfaces.RealOutput P_fuel(unit = "W") "Fuel Consumption" annotation(
        Placement(transformation(origin = {-146, -132}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 20}, extent = {{-10, -10}, {10, 10}})));
      electrical_Production calc_P_el_pro annotation(
        Placement(transformation(origin = {-3, -19}, extent = {{-29, -29}, {29, 29}})));
      Modelica.Blocks.Interfaces.RealOutput P_el_pro(unit = "W") "Generated electrical Power" annotation(
        Placement(transformation(origin = {184, 10}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 90}, extent = {{-10, -10}, {10, 10}})));
      chpKPIs KPIs annotation(
        Placement(transformation(origin = {-3, -105}, extent = {{-31, -31}, {31, 31}})));
      Modelica.Blocks.Math.Gain P_th_pro_toW(k = 1000) "Transform P_th_pro to W" annotation(
        Placement(transformation(origin = {-180, -104}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput P_th_pro(unit = "W") "Generated thermal Power" annotation(
        Placement(transformation(origin = {-128, -86}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -90}, extent = {{-10, -10}, {10, 10}})));
      Modulation calc_Z "calculation of Z" annotation(
        Placement(transformation(origin = {124, 184}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Sources.RealExpression eta_th_Expression(y = calc_eta_th.eta_th) annotation(
        Placement(transformation(origin = {-294, -144}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput m_dot_fuel_H2(unit = "kg/s") annotation(
        Placement(transformation(origin = {-194, -152}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 0}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.BooleanInput y "on off switch" annotation(
        Placement(transformation(origin = {-429, 201}, extent = {{-15, -15}, {15, 15}}), iconTransformation(origin = {-120, -20}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Logical.Switch sw annotation(
        Placement(transformation(origin = {-376, 206}, extent = {{-8, -8}, {8, 8}})));
      Modelica.Blocks.Sources.Constant Standby(k = 0) annotation(
        Placement(transformation(origin = {-390, 152}, extent = {{-8, -8}, {8, 8}})));
      FuelConsumption_CHP fuelConsumption(ratio_CH4 = ratio_CH4, ratio_H2 = ratio_H2) annotation(
        Placement(transformation(origin = {-244, -138}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput Z_calc "Calculated modulation Z" annotation(
        Placement(transformation(origin = {184, 180}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 70}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput m_dot_fuel_CH4(unit = "kg/s") annotation(
        Placement(transformation(origin = {-194, -170}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -22}, extent = {{-10, -10}, {10, 10}})));
    equation
      connect(P_thExpression.y, Upper_Bou_Con_P_th.P_th) annotation(
        Line(points = {{-333, 230}, {-301, 230}, {-301, 218}, {-294, 218}}, color = {0, 0, 127}));
      connect(calc_eta_th.nominal_thermal_power, P_thExpression.y) annotation(
        Line(points = {{-57, 217}, {-106.7, 217}, {-106.7, 230}, {-333, 230}}, color = {0, 0, 127}));
      connect(P_elExpression.y, calc_eta_th.nominal_electrical_power) annotation(
        Line(points = {{-187, 182}, {-115, 182}, {-115, 195.5}, {-57, 195.5}}, color = {0, 0, 127}));
      connect(calc_eta_th.T_return, T_returnExpression.y) annotation(
        Line(points = {{-57, 186}, {-96.7, 186}, {-96.7, 155.6}, {-186.7, 155.6}}, color = {0, 0, 127}));
      connect(calc_eta_th.T_supply, T_supplyExpression.y) annotation(
        Line(points = {{-57, 176}, {-78.7, 176}, {-78.7, 135.7}, {-186.7, 135.7}}, color = {0, 0, 127}));
      connect(calc_eta_th.eta_th_nominal, eta_thExpression.y) annotation(
        Line(points = {{-57, 167}, {-72.7, 167}, {-72.7, 106.7}, {-189.7, 106.7}}, color = {0, 0, 127}));
      connect(calc_eta_el.part_load_factor, calc_eta_th.X_out) annotation(
        Line(points = {{-54.05, 104.45}, {-66.05, 104.45}, {-66.05, 136.45}, {59.95, 136.45}, {59.95, 182.45}, {39.95, 182.45}}, color = {0, 0, 127}));
      connect(calc_eta_el.nominal_electrical_power, P_elExpression.y) annotation(
        Line(points = {{-54.05, 76.55}, {-114.05, 76.55}, {-114.05, 182.55}, {-186.05, 182.55}}, color = {0, 0, 127}));
      connect(calc_eta_el.eta_el_nominal, eta_elExpression.y) annotation(
        Line(points = {{-54.05, 49.55}, {-188.05, 49.55}}, color = {0, 0, 127}));
      connect(calc_P_el_pro.calc_eta_el, calc_eta_el.eta_el) annotation(
        Line(points = {{-37.8, 4.2}, {-71.8, 4.2}, {-71.8, 24.2}, {74.2, 24.2}, {74.2, 102.2}, {44.2, 102.2}}, color = {0, 0, 127}));
      connect(eta_elExpression.y, calc_P_el_pro.eta_el_nom) annotation(
        Line(points = {{-189, 50}, {-137, 50}, {-137, -42}, {-39, -42}}, color = {0, 0, 127}));
      connect(calc_P_el_pro.P_el_pro, P_el_pro) annotation(
        Line(points = {{28.9, 1.3}, {184.9, 1.3}, {184.9, 9.3}}, color = {0, 0, 127}));
      connect(calc_P_el_pro.P_el_pro, KPIs.P_th_pro) annotation(
        Line(points = {{28.9, 1.3}, {50.9, 1.3}, {50.9, -56.7}, {-53.1, -56.7}, {-53.1, -80.7}, {-39.1, -80.7}}, color = {0, 0, 127}));
      connect(KPIs.P_el_pro, P_th_pro_toW.y) annotation(
        Line(points = {{-40.2, -105}, {-169.2, -105}}, color = {0, 0, 127}));
      connect(P_th_pro_toW.y, P_th_pro) annotation(
        Line(points = {{-169, -104}, {-167, -104}, {-167, -86}, {-129, -86}}, color = {0, 0, 127}));
      connect(calc_Z.eta_th, calc_eta_th.eta_th) annotation(
        Line(points = {{100, 200}, {69, 200}, {69, 199}, {40.5, 199}}, color = {0, 0, 127}));
      connect(calc_eta_th.X_out, calc_Z.X_th) annotation(
        Line(points = {{40, 182}, {100, 182}, {100, 184}}, color = {0, 0, 127}));
      connect(eta_thExpression.y, calc_Z.eta_th_norm) annotation(
        Line(points = {{-188, 106}, {-72, 106}, {-72, 142}, {100, 142}, {100, 168}}, color = {0, 0, 127}));
      connect(Upper_Bou_Con_P_th.P_th_pro, calc_eta_th.P_th_target) annotation(
        Line(points = {{-270, 212}, {-258, 212}, {-258, 218}, {-120, 218}, {-120, 206}, {-56, 206}}, color = {0, 0, 127}));
      connect(P_elExpression.y, calc_P_el_pro.P_el_nom) annotation(
        Line(points = {{-186, 182}, {-114, 182}, {-114, -10}, {-38, -10}}, color = {0, 0, 127}));
      connect(calc_eta_th.X_out, calc_P_el_pro.X) annotation(
        Line(points = {{40, 182}, {60, 182}, {60, 30}, {-78, 30}, {-78, -26}, {-38, -26}}, color = {0, 0, 127}));
      connect(eta_th_Expression.y, fuelConsumption.eta) annotation(
        Line(points = {{-282, -144}, {-262, -144}, {-262, -138}, {-250, -138}}, color = {0, 0, 127}));
      connect(fuelConsumption.Pfuel, P_fuel) annotation(
        Line(points = {{-232, -134}, {-192, -134}, {-192, -132}, {-146, -132}}, color = {0, 0, 127}));
      connect(fuelConsumption.Pfuel, KPIs.fuel_con) annotation(
        Line(points = {{-232, -134}, {-40, -134}, {-40, -130}}, color = {0, 0, 127}));
      connect(Standby.y, sw.u3) annotation(
        Line(points = {{-381, 152}, {-381, 200}, {-386, 200}}, color = {0, 0, 127}));
      connect(sw.y, Q_load_kW.u) annotation(
        Line(points = {{-367.2, 206}, {-349.2, 206}}, color = {0, 0, 127}));
      connect(Q_load, sw.u1) annotation(
        Line(points = {{-394, 252}, {-386, 252}, {-386, 212}}, color = {0, 0, 127}));
      connect(Upper_Bou_Con_P_th.P_th_pro, P_th_pro_toW.u) annotation(
        Line(points = {{-270, 212}, {-258, 212}, {-258, -104}, {-192, -104}}, color = {0, 0, 127}));
      connect(Upper_Bou_Con_P_th.P_th_pro, fuelConsumption.P) annotation(
        Line(points = {{-270, 212}, {-258, 212}, {-258, -134}, {-256, -134}}, color = {0, 0, 127}));
      connect(calc_Z.Z, Z_calc) annotation(
        Line(points = {{146, 184}, {184, 184}, {184, 180}}, color = {0, 0, 127}));
      connect(fuelConsumption.m_dot_H2, m_dot_fuel_H2) annotation(
        Line(points = {{-232, -138}, {-212, -138}, {-212, -152}, {-194, -152}}, color = {0, 0, 127}));
      connect(fuelConsumption.m_dot_CH4, m_dot_fuel_CH4) annotation(
        Line(points = {{-232, -142}, {-222, -142}, {-222, -170}, {-194, -170}}, color = {0, 0, 127}));
      connect(y, sw.u2) annotation(
        Line(points = {{-428, 202}, {-390, 202}, {-390, 206}, {-386, 206}}, color = {255, 0, 255}));
      connect(Q_load_kW.y, Upper_Bou_Con_P_th.Q_load) annotation(
        Line(points = {{-326, 206}, {-294, 206}}, color = {0, 0, 127}));
      annotation(
        Documentation(info = "<html><head></head><body><div>The ICE CHP model with modulation simulates an internal combustion engine-based combined heat and power system that adjusts its output based on real-time demand. Modulation in this context refers to the ability of the system to vary its operating levels to efficiently meet fluctuating heat and power demands.&nbsp;</div><div><br></div><div>This model has been validated using real and manufacturer data for natural gas CHP, hydrogen CHP and micro CHP. In addition, this approach has been developed for natural gas based CHPs ranging from 50 to 18,321 kW electrical.</div><div><br></div><div><b>Reference:&nbsp;</b></div><div><b><br></b></div><div><!--StartFragment-->Berberich, M., Deschaintre, L., Mangold, D., Schmidt, T., and Willwerth, L. SOLAR-KWK –
Entwicklung multifunktionaler Systeme zur solar unterstützten Kraft-Wärme-Kopplung – solare
Fernwärme und saisonale Wärmespeicher für die Energiewende. Stuttgart, 2015&nbsp;<!--EndFragment--></div><div><br></div><div><!--StartFragment-->Höfner, P. Vergleich strom- und wärmegeführter Betriebsweise eines BHKW im Nahwärmenetz
mit Langzeitwärmespeicher. Vienna, 2019<!--EndFragment-->&nbsp;&nbsp;</div><!--StartFragment--><!--EndFragment-->

</body></html>"),
        defaultComponentName = "CHP",
        uses(Modelica(version = "4.0.0")),
        Icon(graphics = {Bitmap(origin = {0, 2}, extent = {{-138, -86}, {138, 86}}, imageSource = ""), Text(textColor = {0, 0, 255}, extent = {{-150, 150}, {150, 110}}, textString = "%name")}, coordinateSystem(extent = {{-100, -100}, {100, 100}})),
        Diagram(coordinateSystem(extent = {{-380, 240}, {200, -160}})),
        version = "");
    end ICE_CHP_modulation;

    model ICE_CHP_constant "2g g-box 20"
      parameter Modelica.Units.SI.Power P_th(displayUnit = "kW") = 44000 "Nominal thermal Power" annotation(
        Dialog(group = "CHP"));
      parameter Modelica.Units.SI.Power P_el(displayUnit = "kW") = 20000 "Nominal electrical Power" annotation(
        Dialog(group = "CHP"));
      parameter Real eta_th_nom = 0.704 "Nominal thermal efficiency" annotation(
        Dialog(group = "CHP"));
      parameter Real eta_el_nom = 0.718 "Nominal electrical efficiency" annotation(
        Dialog(group = "CHP"));
      parameter Real ratio_CH4 = 0.9 "Fuel composition, CH4 ratio" annotation(
        Dialog(group = "Fuel (Sum of the ratios = 1)"));
      parameter Real ratio_H2 = 0.1 "Fuel composition, H2 ratio" annotation(
        Dialog(group = "Fuel (Sum of the ratios = 1)"));
      FuelConsumption fuelConsumption(eta = eta_th_nom, ratio_CH4 = ratio_CH4, ratio_H2 = ratio_H2) annotation(
        Placement(transformation(origin = {-8, -22}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.RealExpression P_th_nom(y = P_th) annotation(
        Placement(transformation(origin = {-90, 74}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.RealExpression P_el_nom(y = P_el) annotation(
        Placement(transformation(origin = {-90, 30}, extent = {{-10, -10}, {10, 10}})));
      chpKPIs mCHPKPIs annotation(
        Placement(transformation(origin = {36, 42}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput P_th_pro(unit = "W") annotation(
        Placement(transformation(origin = {104, 78}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -88}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput P_el_pro(unit = "W") annotation(
        Placement(transformation(origin = {106, 44}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 90}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput P_fuel(unit = "W") annotation(
        Placement(transformation(origin = {70, -26}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 20}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput m_dot_fuel_H2(unit = "kg/s") annotation(
        Placement(transformation(origin = {70, -42}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 0}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.BooleanInput y "on off switch" annotation(
        Placement(transformation(origin = {-140, 56}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 0}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Logical.Switch sw1 annotation(
        Placement(transformation(origin = {-52, 58}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Logical.Switch sw2 annotation(
        Placement(transformation(origin = {-54, 6}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.Constant Standby(k = 0) annotation(
        Placement(transformation(origin = {-134, 0}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput m_dot_fuel_CH4(unit = "kg/s") annotation(
        Placement(transformation(origin = {70, -62}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -20}, extent = {{-10, -10}, {10, 10}})));
    equation
      connect(fuelConsumption.Pfuel, mCHPKPIs.fuel_con) annotation(
        Line(points = {{3, -18}, {3, 34}, {24, 34}}, color = {0, 0, 127}));
      connect(fuelConsumption.Pfuel, P_fuel) annotation(
        Line(points = {{3, -18}, {37, -18}, {37, -26}, {69, -26}}, color = {0, 0, 127}));
      connect(P_th_nom.y, sw1.u1) annotation(
        Line(points = {{-78, 74}, {-70, 74}, {-70, 66}, {-64, 66}}, color = {0, 0, 127}));
      connect(P_el_nom.y, sw2.u1) annotation(
        Line(points = {{-78, 30}, {-72, 30}, {-72, 14}, {-66, 14}}, color = {0, 0, 127}));
      connect(y, sw1.u2) annotation(
        Line(points = {{-140, 56}, {-82, 56}, {-82, 58}, {-64, 58}}, color = {255, 0, 255}));
      connect(y, sw2.u2) annotation(
        Line(points = {{-140, 56}, {-112, 56}, {-112, 6}, {-66, 6}}, color = {255, 0, 255}));
      connect(Standby.y, sw2.u3) annotation(
        Line(points = {{-122, 0}, {-66, 0}, {-66, -2}}, color = {0, 0, 127}));
      connect(Standby.y, sw1.u3) annotation(
        Line(points = {{-122, 0}, {-104, 0}, {-104, 50}, {-64, 50}}, color = {0, 0, 127}));
      connect(sw1.y, mCHPKPIs.P_th_pro) annotation(
        Line(points = {{-40, 58}, {-6, 58}, {-6, 50}, {24, 50}}, color = {0, 0, 127}));
      connect(sw1.y, P_th_pro) annotation(
        Line(points = {{-40, 58}, {-18, 58}, {-18, 78}, {104, 78}}, color = {0, 0, 127}));
      connect(sw2.y, mCHPKPIs.P_el_pro) annotation(
        Line(points = {{-42, 6}, {-28, 6}, {-28, 42}, {24, 42}}, color = {0, 0, 127}));
      connect(sw2.y, P_el_pro) annotation(
        Line(points = {{-42, 6}, {78, 6}, {78, 44}, {106, 44}}, color = {0, 0, 127}));
      connect(sw1.y, fuelConsumption.P) annotation(
        Line(points = {{-40, 58}, {-36, 58}, {-36, -18}, {-20, -18}}, color = {0, 0, 127}));
      connect(fuelConsumption.m_dot_H2, m_dot_fuel_H2) annotation(
        Line(points = {{4, -22}, {24, -22}, {24, -42}, {70, -42}}, color = {0, 0, 127}));
      connect(fuelConsumption.m_dot_CH4, m_dot_fuel_CH4) annotation(
        Line(points = {{4, -26}, {14, -26}, {14, -62}, {70, -62}}, color = {0, 0, 127}));
      annotation(
        defaultComponentName = "mCHP",
        Diagram(coordinateSystem(extent = {{-160, 100}, {120, -60}})),
        Icon(graphics = {Text(textColor = {0, 0, 255}, extent = {{-150, 150}, {150, 110}}, textString = "%name"), Bitmap(origin = {-2, 0}, extent = {{-108, -102}, {108, 102}}, imageSource = "")}),
        Documentation(info = "<html><head></head><body>CHP model with constant power output and the option of different fuel compositions (hydrogen and natural gas).<div><br></div><div><b>Reference:</b></div><div><span style=\"font-family: 'MS Shell Dlg 2'; font-size: 11.999999046325684px;\">Rosato, A. and Sibilio, S. “Calibration and validation of a model for simulating thermal and electric performance of an internal combustion engine-based micro-cogeneration device - ScienceDirect”. In: Applied Thermal Engineering 45-46 (Dec. 2012), pp. 79–98. doi: 10.1016/j. applthermaleng.2012.04.020. (Online - last accessed on 05/03/2024).</span></div></body></html>"));
    end ICE_CHP_constant;

    block computation_a_el
      parameter Real Zmin = 0.33 "minimal Modulation >= 0.33";
      parameter Modelica.Units.SI.Power P_el_nom "Nominal thermal power";
      Modelica.Blocks.Interfaces.RealInput ael_in_nominal_electrical_power "Nominal electrical power [kW]" annotation(
        Placement(visible = true, transformation(origin = {-108, -46}, extent = {{-12, -12}, {12, 12}}, rotation = 0), iconTransformation(origin = {-45, -43}, extent = {{-11, -11}, {11, 11}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealInput ael_in_eta_el_nominal "Nominal electrical efficiency [-]" annotation(
        Placement(visible = true, transformation(origin = {-107, 71}, extent = {{-11, -11}, {11, 11}}, rotation = 0), iconTransformation(origin = {-45, 23}, extent = {{-11, -11}, {11, 11}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealOutput ael_out_a_el annotation(
        Placement(visible = true, transformation(origin = {132, 16}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {71, -9}, extent = {{-11, -11}, {11, 11}}, rotation = 0)));
      Modelica.Blocks.Math.Add ael_add1(k1 = 1, k2 = -1) annotation(
        Placement(visible = true, transformation(origin = {6, 32}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Sources.Constant ael_n007(k = 0.1089*(1 - Zmin)) annotation(
        Placement(visible = true, transformation(origin = {-38, 12}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Add ael_add2(k1 = 1, k2 = -1) annotation(
        Placement(visible = true, transformation(origin = {22, -52}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Log ael_ln50 annotation(
        Placement(visible = true, transformation(origin = {-36, -76}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Sources.Constant ael_n50(k = P_el_nom*Zmin/1000) annotation(
        Placement(visible = true, transformation(origin = {-72, -76}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Gain ael_g00255(k = 0.0255) annotation(
        Placement(visible = true, transformation(origin = {52, -52}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Add ael_add3(k1 = 1, k2 = -1) annotation(
        Placement(visible = true, transformation(origin = {84, 16}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Log ael_ln_lfp annotation(
        Placement(visible = true, transformation(origin = {-34, -46}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    equation
      connect(ael_n007.y, ael_add1.u2) annotation(
        Line(points = {{-27, 12}, {-15, 12}, {-15, 26}, {-7, 26}}, color = {0, 0, 127}));
      connect(ael_n50.y, ael_ln50.u) annotation(
        Line(points = {{-61, -76}, {-49, -76}}, color = {0, 0, 127}));
      connect(ael_ln50.y, ael_add2.u2) annotation(
        Line(points = {{-25, -76}, {-13, -76}, {-13, -58}, {9, -58}}, color = {0, 0, 127}));
      connect(ael_add2.y, ael_g00255.u) annotation(
        Line(points = {{33, -52}, {39, -52}}, color = {0, 0, 127}));
      connect(ael_g00255.y, ael_add3.u2) annotation(
        Line(points = {{63, -52}, {67, -52}, {67, 10}, {72, 10}}, color = {0, 0, 127}));
      connect(ael_add1.y, ael_add3.u1) annotation(
        Line(points = {{17, 32}, {37, 32}, {37, 22}, {72, 22}}, color = {0, 0, 127}));
      connect(ael_add3.y, ael_out_a_el) annotation(
        Line(points = {{95, 16}, {132, 16}}, color = {0, 0, 127}));
      connect(ael_ln_lfp.y, ael_add2.u1) annotation(
        Line(points = {{-23, -46}, {10, -46}}, color = {0, 0, 127}));
      connect(ael_in_nominal_electrical_power, ael_ln_lfp.u) annotation(
        Line(points = {{-108, -46}, {-46, -46}}, color = {0, 0, 127}));
      connect(ael_in_eta_el_nominal, ael_add1.u1) annotation(
        Line(points = {{-107, 71}, {-18, 71}, {-18, 38}, {-6, 38}}, color = {0, 0, 127}));
      annotation(
        Icon(graphics = {Rectangle(origin = {13, -10}, fillColor = {107, 107, 107}, fillPattern = FillPattern.Sphere, extent = {{-46, 45}, {46, -45}}, radius = 5), Text(origin = {14, -6}, textColor = {255, 0, 0}, extent = {{-20, 18}, {20, -18}}, textString = "a_el")}, coordinateSystem(extent = {{-60, 40}, {80, -60}})),
        uses(Modelica(version = "4.0.0")),
        Diagram(coordinateSystem(extent = {{-140, 140}, {200, -100}}), graphics = {Bitmap(origin = {42, 103}, extent = {{-143, -31}, {143, 31}}, imageSource = ""), Rectangle(origin = {-108, 15}, lineColor = {255, 0, 0}, lineThickness = 0.5, extent = {{-28, 73}, {28, -73}})}),
        version = "",
        Documentation(info = "<html><head></head><body><div>Set of formulas:</div>
        <p>a<sub>el</sub> = η<sub>el,nenn</sub> - b<sub>el</sub> · (Z<sub>max</sub> - Z<sub>min</sub>) - c<sub>el</sub> · { ln(P<sub>el,nenn</sub>) - ln(P<sub>el,grenz</sub>) }</p>
    
        <p>a<sub>el</sub> = η<sub>el,nenn</sub> - b<sub>el</sub> · 0,67 - c<sub>el</sub> · { ln(P<sub>el,nenn</sub>) - ln(P<sub>el,grenz</sub>) }</p>
    
        <p>η<sub>el,nenn</sub> = efficiency at nominal electrical power</p>
        <p>b<sub>el</sub> = 0,1089</p>
        <p>c<sub>el</sub> = 0,0255</p>
        <p>Z<sub>max</sub> = 1</p>
        <p>Z<sub>min</sub> = 0,33</p>
        <p>P<sub>el,nenn</sub> = nominal electrical power</p>
        <p>P<sub>el,grenz</sub> = 50 kW</p>
    </body></html>"));
    end computation_a_el;

    block computation_a_th
      parameter Real Zmin = 0.33 "minimal Modulation >= 0.33";
      parameter Modelica.Units.SI.Power P_th_nom "Nominal thermal power";
      Modelica.Blocks.Interfaces.RealInput ath_in_nominal_thermal_power "Nominal thermal power [kW]" annotation(
        Placement(visible = true, transformation(origin = {-124, -16}, extent = {{-12, -12}, {12, 12}}, rotation = 0), iconTransformation(origin = {-51, -3}, extent = {{-11, -11}, {11, 11}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealInput ath_in_eta_th_nominal "Nominal thermal efficiency [-]" annotation(
        Placement(visible = true, transformation(origin = {-126, 52}, extent = {{-12, -12}, {12, 12}}, rotation = 0), iconTransformation(origin = {-51, 33}, extent = {{-11, -11}, {11, 11}}, rotation = 0)));
      Modelica.Blocks.Math.Add ath_add1(k1 = 1, k2 = -1) annotation(
        Placement(visible = true, transformation(origin = {12, 46}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealOutput ath_out_a_th annotation(
        Placement(visible = true, transformation(origin = {138, 30}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {73, -5}, extent = {{-11, -11}, {11, 11}}, rotation = 0)));
      Modelica.Blocks.Math.Add ath_add3(k1 = 1, k2 = -1) annotation(
        Placement(visible = true, transformation(origin = {90, 30}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Add ath_add2(k1 = 1, k2 = -1) annotation(
        Placement(visible = true, transformation(origin = {28, -38}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Gain ath_g00255(k = -0.0255) "c_th" annotation(
        Placement(visible = true, transformation(origin = {58, -38}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Log ath_ln_ntp annotation(
        Placement(visible = true, transformation(origin = {-30, -16}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealInput ath_in_nominal_electrical_power annotation(
        Placement(visible = true, transformation(origin = {-124, -68}, extent = {{-12, -12}, {12, 12}}, rotation = 0), iconTransformation(origin = {-51, -41}, extent = {{-11, -11}, {11, 11}}, rotation = 0)));
      Modelica.Blocks.Math.Division ath_division annotation(
        Placement(visible = true, transformation(origin = {-70, -62}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Gain ath_g50(k = P_th_nom*Zmin/1000) annotation(
        Placement(visible = true, transformation(origin = {-42, -62}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
      Modelica.Blocks.Math.Log ath_ln_P_th_limit annotation(
        Placement(visible = true, transformation(origin = {-6, -62}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Sources.RealExpression b_th_deltaZ(y = -0.0746*(1 - Zmin)) annotation(
        Placement(transformation(origin = {-58, 34}, extent = {{-10, -10}, {10, 10}})));
    equation
      connect(ath_g00255.y, ath_add3.u2) annotation(
        Line(points = {{69, -38}, {73, -38}, {73, 24}, {78, 24}}, color = {0, 0, 127}));
      connect(ath_add3.y, ath_out_a_th) annotation(
        Line(points = {{101, 30}, {138, 30}}, color = {0, 0, 127}));
      connect(ath_add1.y, ath_add3.u1) annotation(
        Line(points = {{23, 46}, {43, 46}, {43, 36}, {78, 36}}, color = {0, 0, 127}));
      connect(ath_add2.y, ath_g00255.u) annotation(
        Line(points = {{39, -38}, {45, -38}}, color = {0, 0, 127}));
      connect(ath_ln_ntp.y, ath_add2.u1) annotation(
        Line(points = {{-19, -16}, {-0.5, -16}, {-0.5, -32}, {16, -32}}, color = {0, 0, 127}));
      connect(ath_in_eta_th_nominal, ath_add1.u1) annotation(
        Line(points = {{-126, 52}, {0, 52}}, color = {0, 0, 127}));
      connect(ath_in_nominal_thermal_power, ath_ln_ntp.u) annotation(
        Line(points = {{-124, -16}, {-42, -16}}, color = {0, 0, 127}));
      connect(ath_in_nominal_electrical_power, ath_division.u2) annotation(
        Line(points = {{-124, -68}, {-82, -68}}, color = {0, 0, 127}));
      connect(ath_in_nominal_thermal_power, ath_division.u1) annotation(
        Line(points = {{-124, -16}, {-90, -16}, {-90, -56}, {-82, -56}}, color = {0, 0, 127}));
      connect(ath_division.y, ath_g50.u) annotation(
        Line(points = {{-58, -62}, {-52, -62}}, color = {0, 0, 127}));
      connect(ath_g50.y, ath_ln_P_th_limit.u) annotation(
        Line(points = {{-34, -62}, {-18, -62}}, color = {0, 0, 127}));
      connect(ath_ln_P_th_limit.y, ath_add2.u2) annotation(
        Line(points = {{5, -62}, {8, -62}, {8, -44}, {16, -44}}, color = {0, 0, 127}));
      connect(b_th_deltaZ.y, ath_add1.u2) annotation(
        Line(points = {{-47, 34}, {1, 34}, {1, 40}, {0, 40}}, color = {0, 0, 127}));
    protected
      annotation(
        uses(Modelica(version = "4.0.0")),
        Icon(graphics = {Text(origin = {10, -2}, textColor = {255, 0, 0}, extent = {{-20, 18}, {20, -18}}, textString = "a_el"), Rectangle(origin = {11, -5}, fillColor = {107, 107, 107}, fillPattern = FillPattern.Sphere, extent = {{-50, 50}, {50, -50}}, radius = 5), Text(origin = {10, -2}, textColor = {255, 0, 0}, extent = {{-20, 18}, {20, -18}}, textString = "a_th")}, coordinateSystem(extent = {{-100, 60}, {80, -60}})),
        version = "",
        Diagram(graphics = {Rectangle(origin = {-128, -18}, lineColor = {255, 0, 0}, lineThickness = 0.5, extent = {{-32, 84}, {32, -84}}), Line(origin = {-92, -40}, points = {{-62, -42}, {-62, 42}, {16, 42}, {16, 2}, {62, 2}, {62, -42}, {-62, -42}}, color = {0, 170, 0}), Text(origin = {-130, 6}, textColor = {0, 170, 0}, extent = {{-12, 4}, {12, -4}}, textString = "P_(th,limit)"), Bitmap(origin = {-65, 114}, extent = {{-97, -42}, {97, 42}}, imageSource = "")}, coordinateSystem(extent = {{-160, 160}, {160, -100}})));
    end computation_a_th;

    block computation_eta_el
      parameter Real Zmin = 0.33 "minimal Modulation >= 0.33";
      parameter Modelica.Units.SI.Power P_el_nom "Nominal thermal power";
      Modelica.Blocks.Interfaces.RealInput eta_el_nominal "Nominal electrical efficiency [-]" annotation(
        Placement(transformation(origin = {-162, 54}, extent = {{-12, -12}, {12, 12}}), iconTransformation(origin = {-109, -61}, extent = {{-9, -9}, {9, 9}})));
      Modelica.Blocks.Interfaces.RealInput nominal_electrical_power "Nominal electrical power [kW]" annotation(
        Placement(transformation(origin = {-163, 5}, extent = {{-13, -13}, {13, 13}}), iconTransformation(origin = {-109, -1}, extent = {{-9, -9}, {9, 9}})));
      Modelica.Blocks.Interfaces.RealInput part_load_factor "Ratio of fuel power to nominal fuel power [-]" annotation(
        Placement(transformation(origin = {-163, -51}, extent = {{-13, -13}, {13, 13}}), iconTransformation(origin = {-109, 61}, extent = {{-9, -9}, {9, 9}})));
      Modelica.Blocks.Interfaces.RealOutput eta_el "Electrical part load efficiency [-]" annotation(
        Placement(transformation(origin = {258, -4}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 56}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Math.Add eel_add1(k1 = 1, k2 = -1) annotation(
        Placement(visible = true, transformation(origin = {-54, -86}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Sources.Constant eel_n033(k = Zmin) annotation(
        Placement(visible = true, transformation(origin = {-156, -92}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Gain eel_g01089(k = 0.1089) annotation(
        Placement(visible = true, transformation(origin = {-18, -86}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Add eel_add2 annotation(
        Placement(visible = true, transformation(origin = {14, -10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Log eel_ln50 annotation(
        Placement(visible = true, transformation(origin = {66, 36}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Sources.Constant eel_n50(k = P_el_nom*Zmin/1000) annotation(
        Placement(visible = true, transformation(origin = {28, 36}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Add eel_add3(k2 = -1) annotation(
        Placement(visible = true, transformation(origin = {104, 62}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Gain eel_g00255(k = 0.0255) annotation(
        Placement(visible = true, transformation(origin = {138, 62}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Add eel_add4 annotation(
        Placement(visible = true, transformation(origin = {172, -4}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Log eel_ln_flp annotation(
        Placement(visible = true, transformation(origin = {66, 68}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Energysystem.CHP_model.computation_a_el block_a_el(Zmin = Zmin, P_el_nom = P_el_nom) annotation(
        Placement(transformation(origin = {-77.1428, 54.8}, extent = {{-32.8571, 18.4}, {43.8095, 64.4}})));
    equation
      connect(eel_n033.y, eel_add1.u2) annotation(
        Line(points = {{-145, -92}, {-66, -92}}, color = {0, 0, 127}));
      connect(part_load_factor, eel_add1.u1) annotation(
        Line(points = {{-163, -51}, {-84, -51}, {-84, -80}, {-66, -80}}, color = {0, 0, 127}));
      connect(eel_add1.y, eel_g01089.u) annotation(
        Line(points = {{-43, -86}, {-30, -86}}, color = {0, 0, 127}));
      connect(eel_g01089.y, eel_add2.u2) annotation(
        Line(points = {{-7, -86}, {-5, -86}, {-5, -16}, {1, -16}}, color = {0, 0, 127}));
      connect(eel_n50.y, eel_ln50.u) annotation(
        Line(points = {{39, 36}, {53, 36}}, color = {0, 0, 127}));
      connect(eel_ln50.y, eel_add3.u2) annotation(
        Line(points = {{77, 36}, {83, 36}, {83, 56}, {91, 56}}, color = {0, 0, 127}));
      connect(eel_add3.y, eel_g00255.u) annotation(
        Line(points = {{115, 62}, {125, 62}}, color = {0, 0, 127}));
      connect(eel_add2.y, eel_add4.u2) annotation(
        Line(points = {{26, -10}, {160, -10}}, color = {0, 0, 127}));
      connect(eel_g00255.y, eel_add4.u1) annotation(
        Line(points = {{150, 62}, {152, 62}, {152, 2}, {160, 2}}, color = {0, 0, 127}));
      connect(eel_ln_flp.y, eel_add3.u1) annotation(
        Line(points = {{78, 68}, {92, 68}}, color = {0, 0, 127}));
      connect(eel_add4.y, eta_el) annotation(
        Line(points = {{184, -4}, {258, -4}}, color = {0, 0, 127}));
      connect(nominal_electrical_power, eel_ln_flp.u) annotation(
        Line(points = {{-163, 5}, {-18, 5}, {-18, 68}, {54, 68}}, color = {0, 0, 127}));
      connect(eta_el_nominal, block_a_el.ael_in_eta_el_nominal) annotation(
        Line(points = {{-162, 54}, {-130, 54}, {-130, 111}, {-102, 111}}, color = {0, 0, 127}));
      connect(nominal_electrical_power, block_a_el.ael_in_nominal_electrical_power) annotation(
        Line(points = {{-163, 5}, {-120, 5}, {-120, 81}, {-102, 81}}, color = {0, 0, 127}));
      connect(block_a_el.ael_out_a_el, eel_add2.u1) annotation(
        Line(points = {{-38, 97}, {-26, 97}, {-26, -4}, {2, -4}}, color = {0, 0, 127}));
      annotation(
        defaultComponentName = "calc_eta_el",
        Icon(graphics = {Rectangle(origin = {0, 1}, fillColor = {150, 150, 150}, fillPattern = FillPattern.Sphere, extent = {{-99, 99}, {99, -99}}, radius = 5), Text(origin = {0, -128}, textColor = {255, 0, 0}, extent = {{-150, 150}, {150, 110}}, textString = "%name")}),
        uses(Modelica(version = "4.0.0")),
        Diagram(coordinateSystem(extent = {{-200, 240}, {280, -120}}), graphics = {Rectangle(origin = {-164, 9}, lineColor = {255, 0, 0}, lineThickness = 0.5, extent = {{-30, 73}, {30, -73}}), Bitmap(origin = {-57, 173}, extent = {{-143, -85}, {143, 85}}, imageSource = ""), Text(origin = {-31, 193}, extent = {{-151, 61}, {288, 17}}, textString = "Scope of equation: 100 % - 33 % mudulation, 50 kW - 18321 kW nominal electrical power", textStyle = {TextStyle.Bold, TextStyle.UnderLine})}),
        version = "");
    end computation_eta_el;

    block computation_eta_th
      parameter Real Zmin = 0.33 "minimal Modulation >= 0.33";
      parameter Modelica.Units.SI.Power P_th_nom "Nominal thermal power";
      Modelica.Blocks.Interfaces.RealInput nominal_electrical_power "Nominal electrical power [kW]" annotation(
        Placement(transformation(origin = {-296, -76}, extent = {{-12, -12}, {12, 12}}), iconTransformation(origin = {-106, 10}, extent = {{-6, -6}, {6, 6}})));
      Modelica.Blocks.Math.Log eth_ln_P_th_nominal annotation(
        Placement(visible = true, transformation(origin = {-130, -36}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
      Modelica.Blocks.Math.Gain eth_g1(k = -1) annotation(
        Placement(visible = true, transformation(origin = {72, 28}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
      Modelica.Blocks.Math.Gain eth_b_th(k = -0.0746) annotation(
        Placement(transformation(origin = {96, -100}, extent = {{-8, -8}, {8, 8}})));
      Energysystem.CHP_model.computation_a_th block_a_th(Zmin = Zmin, P_th_nom = P_th_nom) annotation(
        Placement(transformation(origin = {-155.111, 3.9999}, extent = {{-38.8889, 23.3334}, {31.1111, 70.0001}})));
      Modelica.Blocks.Interfaces.RealInput T_return "Return temperature heat circuit [°C]" annotation(
        Placement(transformation(origin = {-296, -108}, extent = {{-12, -12}, {12, 12}}), iconTransformation(origin = {-106, -12}, extent = {{-6, -6}, {6, 6}})));
      Modelica.Blocks.Interfaces.RealInput T_supply "Supply temperature heat circuit [kW]" annotation(
        Placement(transformation(origin = {-296, -172}, extent = {{-12, -12}, {12, 12}}), iconTransformation(origin = {-106, -34}, extent = {{-6, -6}, {6, 6}})));
      Modelica.Blocks.Math.Gain eth_g50(k = P_th_nom*Zmin/1000) annotation(
        Placement(visible = true, transformation(origin = {-162, -60}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
      Modelica.Blocks.Math.Log eth_ln_P_th_limit annotation(
        Placement(visible = true, transformation(origin = {-130, -60}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
      Modelica.Blocks.Math.Add eth_add2(k1 = 1, k2 = -1) annotation(
        Placement(visible = true, transformation(origin = {-110, -178}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Add eth_add1(k1 = 1, k2 = -1) annotation(
        Placement(visible = true, transformation(origin = {-110, -114}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Product eth_product2 annotation(
        Placement(visible = true, transformation(origin = {302, -178}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealOutput eta_th "Thermal efficiency at targeted thermal power [-]" annotation(
        Placement(transformation(origin = {390, -44}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 18}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealInput P_th_target "Targeted thermal power [kW]" annotation(
        Placement(transformation(origin = {-296, -252}, extent = {{-12, -12}, {12, 12}}), iconTransformation(origin = {-106, 34}, extent = {{-6, -6}, {6, 6}})));
      Modelica.Blocks.Interfaces.RealInput eta_th_nominal "Nominal thermal efficiency [-]" annotation(
        Placement(transformation(origin = {-296, -282}, extent = {{-12, -12}, {12, 12}}), iconTransformation(origin = {-106, -54}, extent = {{-6, -6}, {6, 6}})));
      Modelica.Blocks.Math.Division eth_division annotation(
        Placement(visible = true, transformation(origin = {-200, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Add eth_add(k1 = 1, k2 = -1) annotation(
        Placement(visible = true, transformation(origin = {-82, -54}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Product eth_product annotation(
        Placement(visible = true, transformation(origin = {138, -106}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Division eth_division2 annotation(
        Placement(visible = true, transformation(origin = {216, -172}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealInput nominal_thermal_power "Nominal thermal power [kW]" annotation(
        Placement(transformation(origin = {-298, -28}, extent = {{-12, -12}, {12, 12}}), iconTransformation(origin = {-106, 58}, extent = {{-6, -6}, {6, 6}})));
      Modelica.Blocks.Math.Gain eth_d_th(k = 0.002) annotation(
        Placement(visible = true, transformation(origin = {-52, -114}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
      Modelica.Blocks.Math.Gain eth_e_th(k = 0.0017) annotation(
        Placement(visible = true, transformation(origin = {-52, -178}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
      Modelica.Blocks.Sources.Constant eth_b_th_Z_min(k = -0.0746*Zmin) annotation(
        Placement(visible = true, transformation(origin = {-48, 8}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealOutput X_out "Ratio of current fuel power to nominal fuel power" annotation(
        Placement(transformation(origin = {392, -178}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -18}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Math.Add eth_add3(k1 = 1, k2 = 4) annotation(
        Placement(visible = true, transformation(origin = {188, -2}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Gain eth_c_th(k = 0.0255) annotation(
        Placement(visible = true, transformation(origin = {-52, -54}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
      Modelica.Blocks.Math.Sqrt eth_sqrt1 annotation(
        Placement(visible = true, transformation(origin = {236, -2}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Sources.Constant eth_T_supply_limit(k = 90) "maximum supply temperature according to underlying equation [°C]" annotation(
        Placement(visible = true, transformation(origin = {-154, -200}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Add eth_add4(k1 = -1, k2 = 1) annotation(
        Placement(visible = true, transformation(origin = {290, -38}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Sources.Constant eth_T_return_limit(k = 45) "minimum return temperature according to underlying equation [°C]" annotation(
        Placement(visible = true, transformation(origin = {-154, -136}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Product eth_bexpb annotation(
        Placement(visible = true, transformation(origin = {128, 22}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.MultiSum multiSum(k = fill(1, 5), nu = 5) annotation(
        Placement(visible = true, transformation(origin = {14, 28}, extent = {{-24, -24}, {24, 24}}, rotation = 0)));
      Modelica.Blocks.Math.Gain eth_g11(k = -1) annotation(
        Placement(visible = true, transformation(origin = {-88, 48}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
      Modelica.Blocks.Math.Division eth_division3 annotation(
        Placement(visible = true, transformation(origin = {50, -100}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Sources.Constant eth_n2(k = -2) annotation(
        Placement(visible = true, transformation(origin = {292, -76}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Math.Division eth_division1 annotation(
        Placement(visible = true, transformation(origin = {348, -44}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    equation
      connect(eth_ln_P_th_nominal.y, eth_add.u1) annotation(
        Line(points = {{-121.2, -36}, {-107.2, -36}, {-107.2, -48}, {-93.2, -48}}, color = {0, 0, 127}));
      connect(eth_division2.y, eth_product2.u1) annotation(
        Line(points = {{228, -172}, {290, -172}}, color = {0, 0, 127}));
      connect(eta_th_nominal, eth_product.u2) annotation(
        Line(points = {{-296, -282}, {116, -282}, {116, -112}, {126, -112}}, color = {0, 0, 127}));
      connect(eth_g50.y, eth_ln_P_th_limit.u) annotation(
        Line(points = {{-153.2, -60}, {-139.2, -60}}, color = {0, 0, 127}));
      connect(eth_division.y, eth_g50.u) annotation(
        Line(points = {{-189, -60}, {-173, -60}}, color = {0, 0, 127}));
      connect(eth_ln_P_th_limit.y, eth_add.u2) annotation(
        Line(points = {{-121.2, -60}, {-93.2, -60}}, color = {0, 0, 127}));
      connect(T_return, eth_add1.u1) annotation(
        Line(points = {{-296, -108}, {-122, -108}}, color = {0, 0, 127}));
      connect(eth_product.y, eth_add3.u2) annotation(
        Line(points = {{150, -106}, {166, -106}, {166, -8}, {176, -8}}, color = {0, 0, 127}));
      connect(eth_T_return_limit.y, eth_add1.u2) annotation(
        Line(points = {{-143, -136}, {-132, -136}, {-132, -120}, {-122, -120}}, color = {0, 0, 127}));
      connect(eth_sqrt1.y, eth_add4.u1) annotation(
        Line(points = {{248, -2}, {264, -2}, {264, -32}, {278, -32}}, color = {0, 0, 127}));
      connect(eta_th_nominal, eth_division2.u1) annotation(
        Line(points = {{-296, -282}, {160, -282}, {160, -166}, {204, -166}}, color = {0, 0, 127}));
      connect(eth_add3.y, eth_sqrt1.u) annotation(
        Line(points = {{200, -2}, {224, -2}}, color = {0, 0, 127}));
      connect(eth_g1.y, eth_bexpb.u1) annotation(
        Line(points = {{80, 28}, {116, 28}}, color = {0, 0, 127}));
      connect(nominal_electrical_power, eth_division.u2) annotation(
        Line(points = {{-296, -76}, {-224, -76}, {-224, -66}, {-212, -66}}, color = {0, 0, 127}));
      connect(T_supply, eth_add2.u1) annotation(
        Line(points = {{-296, -172}, {-122, -172}}, color = {0, 0, 127}));
      connect(eth_product2.y, X_out) annotation(
        Line(points = {{314, -178}, {392, -178}}, color = {0, 0, 127}));
      connect(eth_T_supply_limit.y, eth_add2.u2) annotation(
        Line(points = {{-142, -200}, {-132, -200}, {-132, -184}, {-122, -184}}, color = {0, 0, 127}));
      connect(eth_b_th.y, eth_product.u1) annotation(
        Line(points = {{104, -100}, {126, -100}}, color = {0, 0, 127}));
      connect(eth_add2.y, eth_e_th.u) annotation(
        Line(points = {{-98, -178}, {-62, -178}}, color = {0, 0, 127}));
      connect(eth_add.y, eth_c_th.u) annotation(
        Line(points = {{-71, -54}, {-63, -54}}, color = {0, 0, 127}));
      connect(eth_bexpb.y, eth_add3.u1) annotation(
        Line(points = {{140, 22}, {160, 22}, {160, 4}, {176, 4}}, color = {0, 0, 127}));
      connect(eth_add1.y, eth_d_th.u) annotation(
        Line(points = {{-98, -114}, {-62, -114}}, color = {0, 0, 127}));
      connect(eth_g1.y, eth_bexpb.u2) annotation(
        Line(points = {{80, 28}, {96, 28}, {96, 16}, {116, 16}}, color = {0, 0, 127}));
      connect(multiSum.y, eth_g1.u) annotation(
        Line(points = {{42, 28}, {62, 28}}, color = {0, 0, 127}));
      connect(multiSum.y, eth_add4.u2) annotation(
        Line(points = {{42, 28}, {52, 28}, {52, -44}, {278, -44}}, color = {0, 0, 127}));
      connect(eth_e_th.y, multiSum.u[1]) annotation(
        Line(points = {{-44, -178}, {-26, -178}, {-26, 28}, {-10, 28}}, color = {0, 0, 127}));
      connect(eth_g11.y, multiSum.u[2]) annotation(
        Line(points = {{-80, 48}, {-36, 48}, {-36, 28}, {-10, 28}}, color = {0, 0, 127}));
      connect(eth_b_th_Z_min.y, multiSum.u[3]) annotation(
        Line(points = {{-37, 8}, {-30, 8}, {-30, 28}, {-10, 28}}, color = {0, 0, 127}));
      connect(eth_c_th.y, multiSum.u[4]) annotation(
        Line(points = {{-44, -54}, {-26, -54}, {-26, 28}, {-10, 28}}, color = {0, 0, 127}));
      connect(eth_d_th.y, multiSum.u[5]) annotation(
        Line(points = {{-44, -114}, {-26, -114}, {-26, 28}, {-10, 28}}, color = {0, 0, 127}));
      connect(P_th_target, eth_division3.u1) annotation(
        Line(points = {{-296, -252}, {16, -252}, {16, -94}, {38, -94}}, color = {0, 0, 127}));
      connect(eth_division3.y, eth_b_th.u) annotation(
        Line(points = {{62, -100}, {86, -100}}, color = {0, 0, 127}));
      connect(eth_division3.y, eth_product2.u2) annotation(
        Line(points = {{62, -100}, {72, -100}, {72, -184}, {290, -184}}, color = {0, 0, 127}));
      connect(eth_add4.y, eth_division1.u1) annotation(
        Line(points = {{302, -38}, {336, -38}}, color = {0, 0, 127}));
      connect(eth_division1.y, eta_th) annotation(
        Line(points = {{360, -44}, {390, -44}}, color = {0, 0, 127}));
      connect(eth_n2.y, eth_division1.u2) annotation(
        Line(points = {{304, -76}, {326, -76}, {326, -50}, {336, -50}}, color = {0, 0, 127}));
      connect(nominal_thermal_power, eth_division.u1) annotation(
        Line(points = {{-298, -28}, {-228, -28}, {-228, -54}, {-212, -54}}, color = {0, 0, 127}));
      connect(nominal_thermal_power, eth_ln_P_th_nominal.u) annotation(
        Line(points = {{-298, -28}, {-164, -28}, {-164, -36}, {-140, -36}}, color = {0, 0, 127}));
      connect(nominal_thermal_power, eth_division3.u2) annotation(
        Line(points = {{-298, -28}, {-252, -28}, {-252, -16}, {2, -16}, {2, -106}, {38, -106}}, color = {0, 0, 127}));
      connect(eta_th, eth_division2.u2) annotation(
        Line(points = {{390, -44}, {370, -44}, {370, -142}, {190, -142}, {190, -178}, {204, -178}}, color = {0, 0, 127}));
      connect(eta_th_nominal, block_a_th.ath_in_eta_th_nominal) annotation(
        Line(points = {{-296, -282}, {-246, -282}, {-246, 63}, {-175, 63}}, color = {0, 0, 127}));
      connect(nominal_thermal_power, block_a_th.ath_in_nominal_thermal_power) annotation(
        Line(points = {{-298, -28}, {-240, -28}, {-240, 49}, {-175, 49}}, color = {0, 0, 127}));
      connect(nominal_electrical_power, block_a_th.ath_in_nominal_electrical_power) annotation(
        Line(points = {{-296, -76}, {-234, -76}, {-234, 35}, {-175, 35}}, color = {0, 0, 127}));
      connect(block_a_th.ath_out_a_th, eth_g11.u) annotation(
        Line(points = {{-127, 49}, {-110, 49}, {-110, 48}, {-98, 48}}, color = {0, 0, 127}));
      annotation(
        defaultComponentName = "calc_eta_th",
        uses(Modelica(version = "4.0.0")),
        Diagram(coordinateSystem(extent = {{-320, 120}, {420, -340}}), graphics = {Rectangle(origin = {-43, -82}, lineColor = {170, 0, 255}, extent = {{-25, 118}, {25, -118}}), Text(origin = {-43, -198}, textColor = {170, 0, 255}, extent = {{39, -22}, {-39, 0}}, textString = "partial derivatives"), Rectangle(origin = {-148, 48}, lineColor = {170, 0, 255}, extent = {{-34, 32}, {34, -32}}), Text(origin = {-261, -311}, extent = {{-43, 9}, {43, -9}}, textString = "Equation 33 according to"), Text(origin = {-37, -311}, extent = {{-183, 5}, {183, -5}}, textString = "SOLAR-KWK Entwicklung multifunktionaler Systeme zur solar unterstützten Kraft-Wärme-Kopplung", textStyle = {TextStyle.Italic}), Text(origin = {275, -311}, extent = {{-157, 5}, {157, -5}}, textString = "– solare Fernwärme und saisonale Wärmespeicher für die Energiewende", textStyle = {TextStyle.Italic}), Rectangle(origin = {51, -311}, extent = {{-361, 13}, {361, -13}}), Rectangle(origin = {-289, -147}, lineColor = {255, 0, 0}, lineThickness = 0.5, extent = {{-29, 145}, {29, -145}})}),
        version = "",
        Icon(graphics = {Rectangle(fillColor = {150, 150, 150}, fillPattern = FillPattern.Sphere, extent = {{-100, 100}, {100, -100}}, radius = 5), Text(origin = {0, -128}, textColor = {255, 0, 0}, extent = {{-150, 150}, {150, 110}}, textString = "%name")}));
    end computation_eta_th;

    model UpperBou_P_th "Upper Bound represents the nominal thermal power"
      extends Modelica.Blocks.Icons.Block;
      Modelica.Blocks.Logical.Greater CHP_comparison_thermal_power annotation(
        Placement(transformation(origin = {-10, -24}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Logical.Switch CHP_P_th annotation(
        Placement(transformation(origin = {34, 22}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealInput Q_load "Heat load" annotation(
        Placement(transformation(origin = {-84, -2}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -54}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealInput P_th "nominal thermal power" annotation(
        Placement(transformation(origin = {-84, 28}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 60}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealOutput P_th_pro "thermal power that will be generated" annotation(
        Placement(transformation(origin = {106, 10}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 0}, extent = {{-10, -10}, {10, 10}})));
    equation
      connect(CHP_comparison_thermal_power.y, CHP_P_th.u2) annotation(
        Line(points = {{1, -24}, {8.5, -24}, {8.5, 22}, {22, 22}}, color = {255, 0, 255}));
      connect(Q_load, CHP_comparison_thermal_power.u1) annotation(
        Line(points = {{-84, -2}, {-54, -2}, {-54, -24}, {-22, -24}}, color = {0, 0, 127}));
      connect(P_th, CHP_comparison_thermal_power.u2) annotation(
        Line(points = {{-84, 28}, {-32, 28}, {-32, -32}, {-22, -32}}, color = {0, 0, 127}));
      connect(Q_load, CHP_P_th.u3) annotation(
        Line(points = {{-84, -2}, {16, -2}, {16, 14}, {22, 14}}, color = {0, 0, 127}));
      connect(P_th, CHP_P_th.u1) annotation(
        Line(points = {{-84, 28}, {-32, 28}, {-32, 30}, {22, 30}}, color = {0, 0, 127}));
      connect(CHP_P_th.y, P_th_pro) annotation(
        Line(points = {{46, 22}, {106, 22}, {106, 10}}, color = {0, 0, 127}));
      annotation(
        defaultComponentName = "Con_P_th",
        Documentation(info = "<html><head></head><body>P thermal production limit</body></html>"),
        Icon(coordinateSystem(extent = {{-160, 160}, {160, -100}})));
    end UpperBou_P_th;

    model electrical_Production "Calculating the electricl power that is generated during heating"
      extends Modelica.Blocks.Icons.Block;
      Modelica.Blocks.Interfaces.RealOutput P_el_pro(unit = "W") "Generated electrical power" annotation(
        Placement(transformation(origin = {108, 2}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 70}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealInput P_el_nom "Nominal electrical Power" annotation(
        Placement(transformation(origin = {-110, 80}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 28}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealInput calc_eta_el "Calculated electrical efficiency" annotation(
        Placement(transformation(origin = {-114, 30}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 80}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealInput eta_el_nom "Nominal electrical efficiency" annotation(
        Placement(transformation(origin = {-112, -64}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -78}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Sources.RealExpression PelProExpression(y = (X*P_el_nom*calc_eta_el*1000)/(eta_el_nom)) "Calculation of produced electrical Power in W" annotation(
        Placement(transformation(origin = {-9, 1}, extent = {{-35, -35}, {35, 35}})));
      Modelica.Blocks.Interfaces.RealInput X annotation(
        Placement(transformation(origin = {-114, -22}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -26}, extent = {{-20, -20}, {20, 20}})));
    equation
      connect(PelProExpression.y, P_el_pro) annotation(
        Line(points = {{29.5, 1}, {70, 1}, {70, 2}, {108, 2}}, color = {0, 0, 127}));
      annotation(
        defaultComponentName = "calc_P_el_pro",
        Documentation(info = "<html>
    <p>
    Calculation of electrical production.
    </p>
    </html>"),
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics = {Line(points = {{32, 80}, {-36, 12}, {24, 12}, {-58, -74}, {-58, -74}}), Polygon(fillPattern = FillPattern.Solid, points = {{-58, -74}, {-42, -24}, {-8, -56}, {-58, -74}}), Text(textColor = {0, 0, 255}, extent = {{-150, 150}, {150, 110}}, textString = "%name")}),
        Diagram(graphics = {Bitmap(origin = {-13, 68}, extent = {{-53, -24}, {53, 24}}, imageSource = "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")}));
    end electrical_Production;

    model chpKPIs "Calculating KPIs and make sure that no division by 0"
      extends Modelica.Blocks.Icons.Block;
      Modelica.Blocks.Interfaces.RealInput P_th_pro(unit = "W") "Generated thermal Power" annotation(
        Placement(transformation(origin = {-104, 80}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 80}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealInput P_el_pro(unit = "W") "Generated electrical Power" annotation(
        Placement(transformation(origin = {-104, 0}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 0}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealInput fuel_con(unit = "W") "Fuel consumption" annotation(
        Placement(transformation(origin = {-104, -60}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -80}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealOutput PowerToHeat annotation(
        Placement(transformation(origin = {106, 38}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 40}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput FuelUtilisation annotation(
        Placement(transformation(origin = {106, -42}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -40}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.Constant lowBou(k = 0.01) annotation(
        Placement(transformation(origin = {-62, -28}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Math.Add add annotation(
        Placement(transformation(origin = {-52, 18}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Math.Division division annotation(
        Placement(transformation(origin = {4, 0}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Logical.LessThreshold less(threshold = 0.01) annotation(
        Placement(transformation(origin = {-60, -58}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Logical.Switch sw1 annotation(
        Placement(transformation(origin = {-14, -54}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Logical.LessThreshold less2(threshold = 0.01) annotation(
        Placement(transformation(origin = {-54, 80}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Logical.Switch sw2 annotation(
        Placement(transformation(origin = {-10, 78}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.Constant constant1(k = 0.01) annotation(
        Placement(transformation(origin = {-52, 112}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Math.Division division1 annotation(
        Placement(transformation(origin = {44, 52}, extent = {{-10, -10}, {10, 10}})));
    equation
      connect(P_th_pro, add.u1) annotation(
        Line(points = {{-104, 80}, {-82, 80}, {-82, 24}, {-64, 24}}, color = {0, 0, 127}));
      connect(P_el_pro, add.u2) annotation(
        Line(points = {{-104, 0}, {-76, 0}, {-76, 12}, {-64, 12}}, color = {0, 0, 127}));
      connect(add.y, division.u1) annotation(
        Line(points = {{-40, 18}, {-22, 18}, {-22, 6}, {-8, 6}}, color = {0, 0, 127}));
      connect(fuel_con, less.u) annotation(
        Line(points = {{-104, -60}, {-72, -60}, {-72, -58}}, color = {0, 0, 127}));
      connect(lowBou.y, sw1.u1) annotation(
        Line(points = {{-50, -28}, {-38, -28}, {-38, -46}, {-26, -46}}, color = {0, 0, 127}));
      connect(sw1.u2, less.y) annotation(
        Line(points = {{-26, -54}, {-40, -54}, {-40, -58}, {-48, -58}}, color = {255, 0, 255}));
      connect(fuel_con, sw1.u3) annotation(
        Line(points = {{-104, -60}, {-82, -60}, {-82, -86}, {-26, -86}, {-26, -62}}, color = {0, 0, 127}));
      connect(sw1.y, division.u2) annotation(
        Line(points = {{-2, -54}, {14, -54}, {14, -26}, {-30, -26}, {-30, -6}, {-8, -6}}, color = {0, 0, 127}));
      connect(division.y, FuelUtilisation) annotation(
        Line(points = {{16, 0}, {38, 0}, {38, -42}, {106, -42}}, color = {0, 0, 127}));
      connect(P_th_pro, less2.u) annotation(
        Line(points = {{-104, 80}, {-66, 80}}, color = {0, 0, 127}));
      connect(less2.y, sw2.u2) annotation(
        Line(points = {{-42, 80}, {-32, 80}, {-32, 78}, {-22, 78}}, color = {255, 0, 255}));
      connect(constant1.y, sw2.u1) annotation(
        Line(points = {{-40, 112}, {-30, 112}, {-30, 86}, {-22, 86}}, color = {0, 0, 127}));
      connect(P_th_pro, sw2.u3) annotation(
        Line(points = {{-104, 80}, {-82, 80}, {-82, 52}, {-22, 52}, {-22, 70}}, color = {0, 0, 127}));
      connect(division1.y, PowerToHeat) annotation(
        Line(points = {{56, 52}, {106, 52}, {106, 38}}, color = {0, 0, 127}));
      connect(sw2.y, division1.u2) annotation(
        Line(points = {{2, 78}, {12, 78}, {12, 46}, {32, 46}}, color = {0, 0, 127}));
      connect(P_el_pro, division1.u1) annotation(
        Line(points = {{-104, 0}, {-76, 0}, {-76, 36}, {20, 36}, {20, 58}, {32, 58}}, color = {0, 0, 127}));
      annotation(
        Diagram(coordinateSystem(extent = {{-120, 140}, {120, -100}})),
        Icon(graphics = {Text(textColor = {0, 0, 255}, extent = {{-150, 150}, {150, 110}}, textString = "%name")}, coordinateSystem(extent = {{-100, -100}, {100, 100}})),
        Documentation(info = "<html><head></head><body>Calclation of the the Power to Heat ratio and the Fuel Utilisation</body><body>
        <p>σ = <sup>P<sub>el</sub></sup>&frasl;<sub>P<sub>th</sub></sub></p>
        <p>ω = <sup>P<sub>el</sub> + P<sub>th</sub></sup>&frasl;<sub>P<sub>f</sub></sub></p>
    </body></html>"));
    end chpKPIs;

    model Modulation "calculation of the modulation Z"
      extends Modelica.Blocks.Icons.Block;
      Modelica.Blocks.Interfaces.RealInput X_th "Thermal modulation" annotation(
        Placement(transformation(origin = {-106, 80}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 0}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealInput eta_th "calculated thermal efficiency" annotation(
        Placement(transformation(origin = {-102, 0}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 80}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealInput eta_th_norm "thermal efficiency" annotation(
        Placement(transformation(origin = {-102, -82}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -80}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealOutput Z "modulation" annotation(
        Placement(transformation(origin = {108, -4}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 0}, extent = {{-10, -10}, {10, 10}})));
    equation
      Z = X_th*eta_th_norm/eta_th annotation(
        Diagram(graphics = {Bitmap(origin = {4, 55}, extent = {{-82, -43}, {82, 43}}, imageSource = "")}));
      annotation(
        Documentation(info = "<html><head></head><body>Calcuation of the Modulation Z:</body><body>
        <p>Z = <sup>P<sub>f,tar</sub></sup>&frasl;<sub>P<sub>f,nom</sub></sub> = <sup>P<sub>th,tar</sub></sup>&frasl;<sub>P<sub>th,nom</sub></sub> &middot; <sup>η<sub>th,nom</sub></sup>&frasl;<sub>η<sub>th</sub></sub> = X<sub>th</sub> &middot; <sup>η<sub>th,nom</sub></sup>&frasl;<sub>η<sub>th</sub></sub>,</p>
    </body></html>"));
    end Modulation;

    model FuelConsumption
      extends Modelica.Blocks.Icons.Block;
      parameter Real eta "efficency for calculation";
      Real LHV_CH4(final unit = "kWh/kg") = 13.9 "Lower Heating Value of Natural Gas";
      Real LHV_H2(final unit = "kWh/kg") = 33.3 "Lower Heating Value of Hydrogen";
      parameter Real ratio_CH4 = 1 "Ratio of Natural Gas";
      parameter Real ratio_H2 = 0 "Ratio of Hydrogen";
      Modelica.Blocks.Interfaces.RealInput P(final unit = "W") annotation(
        Placement(transformation(origin = {-108, 60}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 40}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealOutput m_dot_CH4(final unit = "kg/s") annotation(
        Placement(transformation(origin = {106, 0}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -40}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput Pfuel(final unit = "W") annotation(
        Placement(transformation(origin = {106, 54}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 40}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput m_dot_H2(final unit = "kg/s") annotation(
        Placement(transformation(origin = {108, -60}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 0}, extent = {{-10, -10}, {10, 10}})));
    equation
      if ratio_CH4 == 0 then
        m_dot_CH4 = 0;
      else
        m_dot_CH4 = P/(eta*LHV_CH4*ratio_CH4*1e3*3600);
      end if;
      if ratio_H2 == 0 then
        m_dot_H2 = 0;
      else
        m_dot_H2 = P/(eta*LHV_H2*ratio_H2*1e3*3600);
      end if;
      Pfuel = P/eta;
      annotation(
        Documentation(info = "<html><head></head><body>Calculation of the fuel consumption for the constant CHP model:</body><body>
        <p>P<sub>f</sub> = &sum; ṁ<sub>i</sub> &middot; LHV<sub>i</sub>,</p>
        <p>m<sub>i</sub> = &int; ṁ<sub>i</sub> dt.</p>
    </body></html>"));
    end FuelConsumption;

    model FuelConsumption_CHP
      extends Modelica.Blocks.Icons.Block;
      Real LHV_CH4(final unit = "kWh/kg") = 13.9 "Lower Heating Value of Natural Gas";
      Real LHV_H2(final unit = "kWh/kg") = 33.3 "Lower Heating Value of Hydrogen";
      parameter Real ratio_CH4 = 1 "Ratio of Natural Gas";
      parameter Real ratio_H2 = 0 "Ratio of Hydrogen";
      Modelica.Blocks.Interfaces.RealInput P(final unit = "kW") annotation(
        Placement(transformation(origin = {-108, 60}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 40}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealOutput m_dot_CH4(final unit = "kg/s") annotation(
        Placement(transformation(origin = {106, 0}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -40}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput Pfuel(final unit = "W") annotation(
        Placement(transformation(origin = {106, 54}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 40}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealInput eta annotation(
        Placement(transformation(origin = {-104, -44}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -40}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealOutput m_dot_H2(final unit = "kg/s") annotation(
        Placement(transformation(origin = {108, -60}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 0}, extent = {{-10, -10}, {10, 10}})));
    equation
      if ratio_CH4 == 0 then
        m_dot_CH4 = 0;
      else
        m_dot_CH4 = P*1e3/(eta*LHV_CH4*ratio_CH4*1e3*3600);
      end if;
      if ratio_H2 == 0 then
        m_dot_H2 = 0;
      else
        m_dot_H2 = P*1e3/(eta*LHV_H2*ratio_H2*1e3*3600);
      end if;
      Pfuel = P*1e3/eta;
      annotation(
        Documentation(info = "<html><head></head><body>Calculation of the fuel consumption for the modulation CHP model:<p>P<sub>f</sub>&nbsp;= ∑ ṁ<sub>i</sub>&nbsp;· LHV<sub>i</sub>,</p><p>m<sub>i</sub>&nbsp;= ∫ ṁ<sub>i</sub>&nbsp;dt.</p></body></html>"));
    end FuelConsumption_CHP;

    package Validation
      extends Modelica.Icons.Example;

      model ICE_CHP_modulation_val
        extends Modelica.Icons.Example;
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y = true) annotation(
          Placement(transformation(origin = {-52, -2}, extent = {{-10, -10}, {10, 10}})));
        CHP_model.ICE_CHP_modulation agenitor_406(P_th = 264000, P_el = 250000, eta_th = 0.449, eta_el = 0.425, T_supply = 363.15, T_return = 318.15) annotation(
          Placement(transformation(origin = {4, 2}, extent = {{-10, -10}, {10, 10}})));
        Modelica.Blocks.Sources.Ramp ramp(height = 265000, duration = 100, offset = 84000) annotation(
          Placement(transformation(origin = {-82, 26}, extent = {{-10, -10}, {10, 10}})));
        Energysystem.CHP_model.ICE_CHP_modulation avus_500c(P_el = 600000, P_th = 658000, T_return = 318.15, T_supply = 363.15, eta_el = 0.419, eta_th = 0.433) annotation(
          Placement(transformation(origin = {4, -32}, extent = {{-10, -10}, {10, 10}})));
        Modelica.Blocks.Sources.Ramp ramp1(duration = 100, height = 658000, offset = 200000) annotation(
          Placement(transformation(origin = {-82, -22}, extent = {{-10, -10}, {10, 10}})));
        Energysystem.CHP_model.ICE_CHP_modulation avus_1000c(P_el = 1200000, P_th = 1191000, T_return = 318.15, T_supply = 363.15, eta_el = 0.436, eta_th = 0.433) annotation(
          Placement(transformation(origin = {4, -66}, extent = {{-10, -10}, {10, 10}})));
        Modelica.Blocks.Sources.Ramp ramp11(duration = 100, height = 1191000, offset = 400000) annotation(
          Placement(transformation(origin = {-82, -58}, extent = {{-10, -10}, {10, 10}})));
        Energysystem.CHP_model.ICE_CHP_modulation mCHP(P_el = 6000, P_th = 11700, T_return = 318.15, T_supply = 363.15, eta_el = 0.2773, eta_th = 0.6824) "CHP from Rosato AISIN SEIKI" annotation(
          Placement(transformation(origin = {4, 56}, extent = {{-10, -10}, {10, 10}})));
        Modelica.Blocks.Sources.Ramp ramp2(duration = 100, height = 12000) annotation(
          Placement(transformation(origin = {-82, 86}, extent = {{-10, -10}, {10, 10}})));
        Energysystem.CHP_model.ICE_CHP_modulation agenitor_404_H2(P_el = 115000, P_th = 129000, T_return = 318.15, T_supply = 363.15, eta_el = 0.377, eta_th = 0.423, ratio_CH4 = 0, ratio_H2 = 1) annotation(
          Placement(transformation(origin = {4, 30}, extent = {{-10, -10}, {10, 10}})));
        Modelica.Blocks.Sources.Ramp ramp3(duration = 100, height = 135000, offset = 0) annotation(
          Placement(transformation(origin = {-82, 52}, extent = {{-10, -10}, {10, 10}})));
      equation
        connect(booleanExpression.y, agenitor_406.y) annotation(
          Line(points = {{-40, -2}, {-8, -2}, {-8, 0}}, color = {255, 0, 255}));
        connect(ramp.y, agenitor_406.Q_load) annotation(
          Line(points = {{-70, 26}, {-34, 26}, {-34, 4}, {-8, 4}}, color = {0, 0, 127}));
        connect(booleanExpression.y, avus_500c.y) annotation(
          Line(points = {{-40, -2}, {-32, -2}, {-32, -34}, {-8, -34}}, color = {255, 0, 255}));
        connect(ramp1.y, avus_500c.Q_load) annotation(
          Line(points = {{-70, -22}, {-20, -22}, {-20, -30}, {-8, -30}}, color = {0, 0, 127}));
        connect(booleanExpression.y, avus_1000c.y) annotation(
          Line(points = {{-40, -2}, {-32, -2}, {-32, -68}, {-8, -68}}, color = {255, 0, 255}));
        connect(ramp11.y, avus_1000c.Q_load) annotation(
          Line(points = {{-70, -58}, {-24, -58}, {-24, -64}, {-8, -64}}, color = {0, 0, 127}));
        connect(ramp2.y, mCHP.Q_load) annotation(
          Line(points = {{-71, 86}, {-35, 86}, {-35, 58}, {-9, 58}}, color = {0, 0, 127}));
        connect(booleanExpression.y, mCHP.y) annotation(
          Line(points = {{-40, -2}, {-32, -2}, {-32, 54}, {-8, 54}}, color = {255, 0, 255}));
        connect(booleanExpression.y, agenitor_404_H2.y) annotation(
          Line(points = {{-40, -2}, {-32, -2}, {-32, 28}, {-8, 28}}, color = {255, 0, 255}));
        connect(ramp3.y, agenitor_404_H2.Q_load) annotation(
          Line(points = {{-70, 52}, {-52, 52}, {-52, 32}, {-8, 32}}, color = {0, 0, 127}));
        annotation(
          experiment(StartTime = 0, StopTime = 100, Tolerance = 1e-06, Interval = 0.2),
          Documentation(info = "<html><head></head><body>Validation of the modulaiton CHP model with data provided by 2g and with data from publications:<div><br></div><div><h4 style=\"font-family: 'MS Shell Dlg 2'; font-size: 11.999999046325684px;\">References</h4><p style=\"font-family: 'MS Shell Dlg 2'; font-size: 11.999999046325684px;\"><!--StartFragment-->2G Energy AG. agenitor | 75-450 kW | Der globale Effizienzmaßstab : 2G Energy. 2024. url:
https://2- g.com/de/produkte/agenitor (online - last accessed on 02/15/2024).<!--EndFragment-->&nbsp;</p><p style=\"font-family: 'MS Shell Dlg 2'; font-size: 11.999999046325684px;\"><!--StartFragment-->Höfner, P. Vergleich strom- und wärmegeführter Betriebsweise eines BHKW im Nahwärmenetz
mit Langzeitwärmespeicher. Vienna, 2019.<!--EndFragment-->&nbsp;&nbsp;</p><p style=\"font-family: 'MS Shell Dlg 2'; font-size: 11.999999046325684px;\">&nbsp;Rosato, A. and Sibilio, S. “Calibration and validation of a model for simulating thermal and
electric performance of an internal combustion engine-based micro-cogeneration device - ScienceDirect”. In: Applied Thermal Engineering 45-46 (Dec. 2012), pp. 79–98. doi: 10.1016/j.
applthermaleng.2012.04.020. (Online - last accessed on 05/03/2024).</p><!--StartFragment--><!--EndFragment--></div></body></html>"));
      end ICE_CHP_modulation_val;

      model ICE_CHP_const_val
        extends Modelica.Icons.Example;
        ICE_CHP_constant mCHP annotation(
          Placement(transformation(origin = {2, -4}, extent = {{-10, -10}, {10, 10}})));
        Modelica.Blocks.Sources.BooleanPulse booleanPulse(width = 40, period = 10) annotation(
          Placement(transformation(origin = {-70, -2}, extent = {{-10, -10}, {10, 10}})));
      equation
        connect(booleanPulse.y, mCHP.y) annotation(
          Line(points = {{-58, -2}, {-10, -2}, {-10, -4}}, color = {255, 0, 255}));
        annotation(
          experiment(StartTime = 0, StopTime = 200, Tolerance = 1e-6, Interval = 0.4),
          Documentation(info = "<html><head></head><body>Validation of the power out put of the constant CHP.</body></html>"));
      end ICE_CHP_const_val;
    end Validation;
    annotation(
      Documentation(info = "<html><head></head><body><!--StartFragment--><p>The Combined Heat and Power (CHP) subpackage provides a comprehensive set of models for simulating and analyzing CHP systems, which simultaneously generate electricity and thermal energy from a single fuel source.</p><h4>Key Features:</h4><ul><li><strong>Multi-fuel Compatibility</strong>: Supports various fuels, including natural gas and hydrogen.</li><li><strong>Dynamic Simulation</strong>: Captures transient behaviors and interactions of CHP systems.</li><li><strong>Component Variety</strong>: Includes models for engines, heat exchangers, generators, and control systems.</li><li><strong>Efficiency Analysis</strong>: Tools for calculating electrical and thermal efficiencies.</li><li><strong>Environmental Impact</strong>: Estimates reductions in greenhouse gas emissions.</li><li><strong>Operational Strategies</strong>: Supports heat-led, electricity-led, and mixed operation modes.</li></ul><p>This subpackage leverages Modelica's capabilities to provide accurate and scalable simulations of CHP systems, aiding in their design, analysis, and optimization.</p><!--EndFragment--></body></html>"));
  end CHP_model;

  package Heating "Package with models for fluid flow systems"
    extends Modelica.Icons.Package;

    model HeatingSystemDefault
      //parameter Modelica.Units.SI.Temperature T_amb_tes = 298.15 "Temperature surrounding TES";
      //TES
      package Water = Buildings.Media.Water "Medium Water";
      parameter Modelica.Units.SI.Volume VTan = 0.1 "Tank volume" annotation(
        Dialog(tab = "Thermal storage", group = "General"));
      parameter Modelica.Units.SI.Length hTan = 3 "Height of tank (without insulation)" annotation(
        Dialog(tab = "Thermal storage", group = "General"));
      parameter Modelica.Units.SI.Length dIns = 0.3 "Thickness of insulation" annotation(
        Dialog(tab = "Thermal storage", group = "General"));
      parameter Modelica.Units.SI.ThermalConductivity kIns = 0.04 "Specific heat conductivity of insulation" annotation(
        Dialog(tab = "Thermal storage", group = "General"));
      parameter Modelica.Units.SI.Temperature T_amb = 293.15 "Sourringding Temperature of the TES" annotation(
        Dialog(tab = "Thermal storage", group = "General"));
      parameter Real SOCmin = 0.1 "Min. value of SOC" annotation(
        Dialog(tab = "Thermal storage", group = "Control"));
      parameter Real SOCmax = 1 - SOCmin "Max. value of SOC" annotation(
        Dialog(tab = "Thermal storage", group = "Control"));
      //CHP
      parameter Modelica.Units.SI.Power P_th(displayUnit = "kW") = 7000 "Nominal thermal Power" annotation(
        Dialog(tab = "CHP", group = "General"));
      parameter Modelica.Units.SI.Power P_el(displayUnit = "kW") = 2850 "Nominal electrical Power" annotation(
        Dialog(tab = "CHP", group = "General"));
      parameter Real eta_th = 0.657 "Nominal thermal efficiency" annotation(
        Dialog(tab = "CHP", group = "General"));
      parameter Real eta_el = 0.269 "Nominal electrical efficiency" annotation(
        Dialog(tab = "CHP", group = "General"));
      parameter Real ratio_CH4 = 1 "Fuel composition, CH4 ratio" annotation(
        Dialog(tab = "CHP", group = "Fuel (Sum of the ratios = 1)"));
      parameter Real ratio_H2 = 0 "Fuel composition, H2 ratio" annotation(
        Dialog(tab = "CHP", group = "Fuel (Sum of the ratios = 1)"));
      parameter Boolean mod = true "If true CHP has Modulation" annotation(
        Dialog(tab = "CHP", group = "Control"));
      parameter Real Zmod = 0.33 "minimal Modulation factor >= 0.33" annotation(
        Dialog(tab = "CHP", group = "Control", enable = mod));
      parameter Real Zoff = 0.5 "turns CHP off if P_th*Zoff > Q_dem is true" annotation(
        Dialog(tab = "CHP", group = "Control", enable = not mod));
      parameter Modelica.Units.SI.Power P_el_thr(displayUnit = "kW") = 25000 "Minimum electrical demand threshold for CHP" annotation(
        Dialog(tab = "CHP", group = "Control"));
      // Control
      parameter Modelica.Units.SI.Power P_th_prime(displayUnit = "kW") = P_th "Nominal thermal Power of main Heater";
      parameter Modelica.Units.SI.Power P_th_support(displayUnit = "kW") = Pth_hp "Nominal thermal Power of support Heater";
      // General
      parameter Modelica.Units.SI.Temperature T_supply = 333.15 "Nominal heating water supply temperature" annotation(
        Dialog(group = "Heating System"));
      parameter Modelica.Units.SI.Temperature T_return = 318.15 "Nominal heating water return temperature" annotation(
        Dialog(group = "Heating System"));
      //Heat Pump
      parameter Modelica.Units.SI.Power Pth_hp "Heat generation of heat pump" annotation(
        Dialog(tab = "Heat Pump", group = "Heating"));
      parameter Boolean floor_hea = false "If true floor heating" annotation(
        Dialog(tab = "Heat Pump", group = "Radiator type"));
      parameter Boolean ASHP = true "True = Air source heat pump" annotation(
        Dialog(tab = "Heat Pump", group = "Nominal condition; Only HP type must be true; IMPORTANT: Costs only apply for AS or GS"));
      parameter Boolean GSHP = false "True = Ground source heat pump" annotation(
        Dialog(tab = "Heat Pump", group = "Nominal condition; Only HP type must be true; IMPORTANT: Costs only apply for AS or GS"));
      parameter Modelica.Units.SI.Temperature T_ground = 283.15 "Ground temperature for ground source heat pump" annotation(
        Dialog(tab = "Heat Pump", group = "Nominal condition; Only HP type must be true; IMPORTANT: Costs only apply for AS or GS"));
      parameter Boolean WSHP = false "True = Ground source heat pump" annotation(
        Dialog(tab = "Heat Pump", group = "Nominal condition; Only HP type must be true; IMPORTANT: Costs only apply for AS or GS"));
      parameter Modelica.Units.SI.Temperature T_water = 283.15 "Water temperature for water source heat pump" annotation(
        Dialog(tab = "Heat Pump", group = "Nominal condition; Only HP type must be true; IMPORTANT: Costs only apply for AS or GS"));
      //Solar Themal
      parameter Boolean onST = true "true = on, false = remove ST panel" annotation(
        Dialog(tab = "Solar Thermal", group = "General"));
      replaceable package Medium = FreeFluids.Pipes.Examples.Glycol47 "Antifreeze Medium inside the Solar Collector (default = Glycol47)" annotation(
        Dialog(tab = "Solar Thermal", group = "General", enable = onST));
      parameter Modelica.Units.SI.Area area = 10 "Total area of panels in the simulation" annotation(
        Dialog(tab = "Solar Thermal", group = "General", enable = onST));
      parameter Modelica.Units.SI.Temperature T_cold_in = 313.15 "Return Temperature of the fluid" annotation(
        Dialog(tab = "Solar Thermal", group = "General", enable = onST));
      parameter Integer nSeg = 9 "Number of segments used to discrete the collector model" annotation(
        Dialog(tab = "Solar Thermal", group = "General", enable = onST));
      parameter Real eta_hex = 0.8 "Efficency of heat exchanger" annotation(
        Dialog(tab = "Solar Thermal", group = "General", enable = onST));
      parameter Modelica.Units.SI.Angle azi = 0 "Surface azimuth (0 for south-facing; -90 degree for east-facing; +90 degree for west facing" annotation(
        Dialog(tab = "Solar Thermal", group = "Orientation", enable = onST));
      parameter Modelica.Units.SI.Angle til = 0.7853981633974483 "Surface tilt (0 for horizontally mounted collector)" annotation(
        Dialog(tab = "Solar Thermal", group = "Orientation", enable = onST));
      parameter Real rho = 0.2 "Ground reflectance" annotation(
        Dialog(tab = "Solar Thermal", group = "Orientation", enable = onST));
      //final parameter
      final parameter Modelica.Units.SI.SpecificHeatCapacity cp = Water.specificHeatCapacityCp(Water.setState_pTX(Water.p_default, Water.T_default, Water.X_default)) "Specific heat capacity of Water at default medium state";
      Modelica.Blocks.Sources.BooleanExpression mchpCon(y = MainController.P_phg_on == true and sw3.y == 0) "CHP on or off" annotation(
        Placement(transformation(origin = {-84, 142}, extent = {{-18, -12}, {18, 12}})));
      Modelica.Blocks.Interfaces.RealInput Q_dem(unit = "W") annotation(
        Placement(transformation(origin = {114, 82}, extent = {{-20, -20}, {20, 20}}, rotation = -90), iconTransformation(origin = {-120, 0}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Logical.Switch sw3 annotation(
        Placement(transformation(origin = {-124, 160}, extent = {{-10, -10}, {10, 10}})));
      CHP_model.ICE_CHP_modulation CHP(P_th = P_th, P_el = P_el, eta_th = eta_th, eta_el = eta_el, T_supply = T_supply, T_return = T_return, Zmin = Zmod, ratio_CH4 = ratio_CH4, ratio_H2 = ratio_H2) "CHP with P_el > 50 kW and part load behaviour" annotation(
        Placement(transformation(origin = {-20, 186}, extent = {{-16, -16}, {16, 16}})));
      Modelica.Blocks.Sources.BooleanExpression modulation(y = mod) "choose if modulation or not" annotation(
        Placement(transformation(origin = {-164, 160}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.Constant CHPwith(k = 1) "with modulation" annotation(
        Placement(transformation(origin = {-166, 192}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.Constant mCHPwithout(k = 0) "without modulation" annotation(
        Placement(transformation(origin = {-164, 128}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.BooleanExpression chpCon(y = MainController.P_phg_on == true and sw3.y == 1) annotation(
        Placement(transformation(origin = {-86, 182}, extent = {{-18, -12}, {18, 12}})));
      CHP_model.ICE_CHP_constant mCHP(P_th = P_th, P_el = P_el, ratio_CH4 = ratio_CH4, ratio_H2 = ratio_H2, eta_th_nom = eta_th, eta_el_nom = eta_el) annotation(
        Placement(transformation(origin = {-23, 143}, extent = {{-17, -17}, {17, 17}})));
      TES Tes(T_supply = T_supply, T_return = T_return, V_Tank = VTan, hTan = hTan, dIns = dIns, kIns = kIns) annotation(
        Placement(transformation(origin = {-126, -84}, extent = {{-18, -18}, {18, 18}})));
      Modelica.Blocks.Sources.RealExpression T_ambExp(y = T_amb) annotation(
        Placement(transformation(origin = {-194, -84}, extent = {{-10, -10}, {10, 10}})));
      Buildings.BoundaryConditions.WeatherData.Bus weaBus annotation(
        Placement(transformation(origin = {-208, 194}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {-110, 90}, extent = {{-10, -10}, {10, 10}})));
      SolarThermal ST(redeclare package Medium = Medium, T_cold_in = T_cold_in, area = area, nSeg = nSeg, eta_hex = eta_hex, azi = azi, til = til, rho = rho) "Performence Data: FP - Guandong Fivestar Solar Energy Co, FS-PTY95-2.0" annotation(
        Placement(transformation(origin = {-123, -167}, extent = {{-25, -25}, {25, 25}})));
      mainCon MainController(SOCmin = SOCmin, SOCmax = SOCmax, P_nom_phg = P_th_prime, P_nom_shg = P_th_support, mod = mod, P_el_thr = P_el_thr) annotation(
        Placement(transformation(origin = {192, -32}, extent = {{-34, -34}, {34, 34}})));
      Modelica.Blocks.Math.MultiSum CHP_P_th_pro(nu = 2) annotation(
        Placement(transformation(origin = {58, 172}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.RealExpression min_Modulation(y = Z_internal) annotation(
        Placement(transformation(origin = {108, -4}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput P_th_CHP(unit = "W") "CHP thermal power supply" annotation(
        Placement(transformation(origin = {308, 200}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 60}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput P_fuel_CHP(unit = "W") "CHP fuel power demand" annotation(
        Placement(transformation(origin = {308, 184}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 40}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput m_dot_fuel_H2_CHP(unit = "kg/s") "Hydrogen consumed by CHP" annotation(
        Placement(transformation(origin = {308, 166}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 0}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput P_el_CHP(unit = "W") "CHP electrical power supply" annotation(
        Placement(transformation(origin = {308, 144}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 80}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput P_th_HP(unit = "W") "Heat pump thermal power supply" annotation(
        Placement(transformation(origin = {308, 106}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -20}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput P_com_HP(unit = "W") "Heat pump electrical power demand" annotation(
        Placement(transformation(origin = {308, 88}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 100}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput T_Tes(unit = "K") "Current tank temperature" annotation(
        Placement(transformation(origin = {306, 46}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -40}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput SOC_Tes(unit = "1") "Tank state of charge" annotation(
        Placement(transformation(origin = {306, 26}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -60}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput E_Tes(unit = "J") "TES thermal energy stored" annotation(
        Placement(transformation(origin = {306, 10}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -80}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput P_th_ST(unit = "W") "Solar thermal thermal power supply" annotation(
        Placement(transformation(origin = {306, -30}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -100}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Math.Gain gain_P_com_HP(k = -1) annotation(
        Placement(transformation(origin = {-13, -15}, extent = {{-5, -5}, {5, 5}})));
      Modelica.Blocks.Interfaces.RealOutput Q_sup(unit = "W") "Total supplied thermal Power" annotation(
        Placement(transformation(origin = {306, -62}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -120}, extent = {{-10, -10}, {10, 10}})));
      Heatpump_Ruhnau HeatPump(floor_hea = floor_hea, ASHP = ASHP, GSHP = GSHP, WSHP = WSHP, T_ground = T_ground, T_water = T_water) annotation(
        Placement(transformation(origin = {-80, -9}, extent = {{-26, -27}, {26, 27}})));
      Pump pump annotation(
        Placement(transformation(origin = {166, 122}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput P_el_pump(unit = "W") "electrical power consumed by pumps" annotation(
        Placement(transformation(origin = {196, 122}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 120}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput m_dot_fuel_CH4_CHP(unit = "kg/s") "Natural Gas consumed by CHP" annotation(
        Placement(transformation(origin = {240, 168}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 20}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput Q_tes(unit = "W") annotation(
        Placement(transformation(origin = {306, -14}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -142}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Logical.Switch swST annotation(
        Placement(transformation(origin = {-56, -190}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.BooleanExpression STonoff(y = onST) annotation(
        Placement(transformation(origin = {-118, -208}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.Constant const(k = 0) annotation(
        Placement(transformation(origin = {-118, -234}, extent = {{-10, -10}, {10, 10}})));
      TesCon tesCon(SOCmin = SOCmin, SOCmax = SOCmax) annotation(
        Placement(transformation(origin = {-78, -70}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealInput P_el_dem annotation(
        Placement(transformation(origin = {120, -106}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 44}, extent = {{-20, -20}, {20, 20}})));
    protected
      Real Z_internal;
    equation
      if mod then
        Z_internal = Zmod;
      else
        Z_internal = Zoff;
      end if;
      P_fuel_CHP = CHP.P_fuel + mCHP.P_fuel;
      m_dot_fuel_H2_CHP = CHP.m_dot_fuel_H2 + mCHP.m_dot_fuel_H2;
      m_dot_fuel_CH4_CHP = CHP.m_dot_fuel_CH4 + mCHP.m_dot_fuel_CH4;
      P_el_CHP = CHP.P_el_pro + mCHP.P_el_pro;
      connect(Q_dem, CHP.Q_load) annotation(
        Line(points = {{114, 82}, {114, 214}, {-50, 214}, {-50, 190}, {-40, 190}}, color = {0, 0, 127}));
      connect(chpCon.y, CHP.y) annotation(
        Line(points = {{-66.2, 182}, {-40.2, 182}}, color = {255, 0, 255}));
      connect(mchpCon.y, mCHP.y) annotation(
        Line(points = {{-64, 142}, {-44.1, 142}, {-44.1, 144}, {-44.2, 144}}, color = {255, 0, 255}));
      connect(Tes.T_amb, T_ambExp.y) annotation(
        Line(points = {{-147.6, -84}, {-182.6, -84}}, color = {0, 0, 127}));
      connect(weaBus.TWetBul, HeatPump.T_amb) annotation(
        __Dymola_Commands(file = "modelica://Buildings/Resources/Scripts/Dymola/Fluid/Storage/Validation/StratifiedLoadingUnloading.mos" "Simulate and plot"),
        Documentation(info = "<html>
            This model has the CHP as primary heat generators and Heat pumps as secondary heat generators
            </html>"),
        experiment(Tolerance = 1e-06, StopTime = 604800, StartTime = 0, Interval = 3600),
        Diagram(coordinateSystem(extent = {{-140, 220}, {460, -140}})));
      connect(weaBus, ST.weaBus);
      connect(mCHP.P_th_pro, CHP_P_th_pro.u[1]) annotation(
        Line(points = {{-4.3, 128.04}, {19.7, 128.04}, {19.7, 172.04}, {47.7, 172.04}}, color = {0, 0, 127}));
      connect(CHP.P_th_pro, CHP_P_th_pro.u[2]) annotation(
        Line(points = {{-2.4, 171.6}, {47.6, 171.6}}, color = {0, 0, 127}));
      connect(Q_dem, MainController.Q_dem) annotation(
        Line(points = {{114, 82}, {114, 8}, {152, 8}}, color = {0, 0, 127}));
      connect(min_Modulation.y, MainController.Z) annotation(
        Line(points = {{119, -4}, {151, -4}}, color = {0, 0, 127}));
      connect(MainController.P_phg, CHP_P_th_pro.y) annotation(
        Line(points = {{151.2, -18.4}, {81.2, -18.4}, {81.2, 171.6}, {69.2, 171.6}}, color = {0, 0, 127}));
      connect(swST.y, P_th_ST);
      connect(Tes.SOC, SOC_Tes);
      connect(Tes.T_tank, T_Tes);
      connect(Tes.E_tank, E_Tes);
      connect(HeatPump.QCon_flow, P_th_HP);
      connect(gain_P_com_HP.y, P_com_HP);
      connect(CHP_P_th_pro.y, P_th_CHP);
      connect(MainController.Q_sup, Q_sup) annotation(
        Line(points = {{230, -38}, {242, -38}, {242, -62}, {306, -62}}, color = {0, 0, 127}));
      connect(HeatPump.P, gain_P_com_HP.u) annotation(
        Line(points = {{-52, -8}, {-30, -8}, {-30, -14}, {-18, -14}}, color = {0, 0, 127}));
      connect(MainController.P_SHG_need, HeatPump.Q_dem) annotation(
        Line(points = {{230, -26}, {254, -26}, {254, 98}, {-190, 98}, {-190, -10}, {-108, -10}}, color = {0, 0, 127}));
      connect(MainController.P_shg, HeatPump.QCon_flow) annotation(
        Line(points = {{152, -32}, {18, -32}, {18, 16}, {-52, 16}}, color = {0, 0, 127}));
      connect(Q_dem, pump.Q_dem) annotation(
        Line(points = {{114, 82}, {114, 122}, {156, 122}}, color = {0, 0, 127}));
      connect(pump.P_el_pump, P_el_pump) annotation(
        Line(points = {{176, 122}, {196, 122}}, color = {0, 0, 127}));
      connect(Tes.E_tank, MainController.P_tes) annotation(
        Line(points = {{-106, -98}, {-44, -98}, {-44, -60}, {152, -60}}, color = {0, 0, 127}));
      connect(MainController.Q_tes, Tes.Q_flow) annotation(
        Line(points = {{230, -32}, {254, -32}, {254, -118}, {-170, -118}, {-170, -98}, {-148, -98}}, color = {0, 0, 127}));
      connect(mCHPwithout.y, sw3.u3) annotation(
        Line(points = {{-152, 128}, {-136, 128}, {-136, 152}}, color = {0, 0, 127}));
      connect(sw3.u2, modulation.y) annotation(
        Line(points = {{-136, 160}, {-152, 160}}, color = {255, 0, 255}));
      connect(CHPwith.y, sw3.u1) annotation(
        Line(points = {{-154, 192}, {-136, 192}, {-136, 168}}, color = {0, 0, 127}));
      connect(MainController.Q_tes, Q_tes) annotation(
        Line(points = {{230, -32}, {264, -32}, {264, -14}, {306, -14}}, color = {0, 0, 127}));
      connect(ST.Q, swST.u1) annotation(
        Line(points = {{-98, -184}, {-68, -184}, {-68, -182}}, color = {0, 0, 127}));
      connect(swST.y, MainController.P_ST) annotation(
        Line(points = {{-44, -190}, {40, -190}, {40, -72}, {152, -72}}, color = {0, 0, 127}));
      connect(STonoff.y, swST.u2) annotation(
        Line(points = {{-106, -208}, {-90, -208}, {-90, -190}, {-68, -190}}, color = {255, 0, 255}));
      connect(const.y, swST.u3) annotation(
        Line(points = {{-106, -234}, {-68, -234}, {-68, -198}}, color = {0, 0, 127}));
      connect(Tes.SOC, tesCon.SOC) annotation(
        Line(points = {{-106, -70}, {-88, -70}}, color = {0, 0, 127}));
      connect(tesCon.dis, MainController.dis) annotation(
        Line(points = {{-68, -66}, {-58, -66}, {-58, -46}, {152, -46}}, color = {255, 0, 255}));
      connect(P_el_dem, MainController.P_el_dem) annotation(
        Line(points = {{120, -106}, {152, -106}, {152, -86}}, color = {0, 0, 127}));
      annotation(
        Diagram(coordinateSystem(extent = {{-220, 220}, {320, -260}})),
        Icon(graphics = {Text(origin = {-2, 22}, textColor = {0, 0, 255}, extent = {{-149, -114}, {151, -154}}, textString = "%name"), Bitmap(extent = {{-92, -88}, {92, 88}}, imageSource = "")}),
        Documentation(info = "<html><head></head><body>This is the default heating modell containing the following devices:&nbsp;<div><ul><li>Internal Combustion Engine<!--EndFragment-->&nbsp; Combined Heat and Power (ICE CHP)</li><li>Heat Pump (HP)</li><li>Solar Thermal Collector (ST)</li><li>Thermal Energy Storage (TES)</li></ul>Note that only the ST is possible to be removed. The control logic must have all other devices.</div><div><br></div><div><b>Default control:</b></div><div>The standard control system is designed so that the CHP takes over most of the heat load. Peak loads are balanced with the heat pump and surpluses are stored in the tank.&nbsp;</div></body></html>"));
    end HeatingSystemDefault;

    model HeatingSystemH2
      //parameter Modelica.Units.SI.Temperature T_amb_tes = 298.15 "Temperature surrounding TES";
      //TES
      package Water = Buildings.Media.Water "Medium Water";
      parameter Modelica.Units.SI.Volume VTan = 0.1 "Tank volume" annotation(
        Dialog(tab = "Thermal storage", group = "General"));
      parameter Modelica.Units.SI.Length hTan = 3 "Height of tank (without insulation)" annotation(
        Dialog(tab = "Thermal storage", group = "General"));
      parameter Modelica.Units.SI.Length dIns = 0.3 "Thickness of insulation" annotation(
        Dialog(tab = "Thermal storage", group = "General"));
      parameter Modelica.Units.SI.ThermalConductivity kIns = 0.04 "Specific heat conductivity of insulation" annotation(
        Dialog(tab = "Thermal storage", group = "General"));
      parameter Modelica.Units.SI.Temperature T_amb = 293.15 "Sourringding Temperature of the TES" annotation(
        Dialog(tab = "Thermal storage", group = "General"));
      parameter Real SOCmin = 0.1 "Min. value of SOC" annotation(
        Dialog(tab = "Thermal storage", group = "Control"));
      parameter Real SOCmax = 1 - SOCmin "Max. value of SOC" annotation(
        Dialog(tab = "Thermal storage", group = "Control"));
      //CHP
      parameter Modelica.Units.SI.Power P_th(displayUnit = "kW") = 7000 "Nominal thermal Power" annotation(
        Dialog(tab = "CHP", group = "General"));
      parameter Modelica.Units.SI.Power P_el(displayUnit = "kW") = 2850 "Nominal electrical Power" annotation(
        Dialog(tab = "CHP", group = "General"));
      parameter Real eta_th = 0.657 "Nominal thermal efficiency" annotation(
        Dialog(tab = "CHP", group = "General"));
      parameter Real eta_el = 0.269 "Nominal electrical efficiency" annotation(
        Dialog(tab = "CHP", group = "General"));
      parameter Real ratio_CH4 = 1 "Fuel composition, CH4 ratio" annotation(
        Dialog(tab = "CHP", group = "Fuel (Sum of the ratios = 1)"));
      parameter Real ratio_H2 = 0 "Fuel composition, H2 ratio" annotation(
        Dialog(tab = "CHP", group = "Fuel (Sum of the ratios = 1)"));
      parameter Boolean mod = true "If true CHP has Modulation" annotation(
        Dialog(tab = "CHP", group = "Control"));
      parameter Real Zmod = 0.33 "minimal Modulation factor >= 0.33" annotation(
        Dialog(tab = "CHP", group = "Control", enable = mod));
      parameter Real Zoff = 0.5 "turns CHP off if P_th*Zoff > Q_dem is true" annotation(
        Dialog(tab = "CHP", group = "Control", enable = not mod));
      parameter Modelica.Units.SI.Power P_el_thr(displayUnit = "kW") = 25000 "Minimum electrical demand threshold for CHP" annotation(
        Dialog(tab = "CHP", group = "Control"));
      // Control
      parameter Modelica.Units.SI.Power P_th_prime(displayUnit = "kW") = P_th "Nominal thermal Power of main Heater";
      parameter Modelica.Units.SI.Power P_th_support(displayUnit = "kW") = Pth_hp "Nominal thermal Power of support Heater";
      // General
      parameter Modelica.Units.SI.Temperature T_supply = 333.15 "Nominal heating water supply temperature" annotation(
        Dialog(group = "Heating System"));
      parameter Modelica.Units.SI.Temperature T_return = 318.15 "Nominal heating water return temperature" annotation(
        Dialog(group = "Heating System"));
      //Heat Pump
      parameter Modelica.Units.SI.Power Pth_hp "Heat generation of heat pump" annotation(
        Dialog(tab = "Heat Pump", group = "Heating"));
      parameter Boolean floor_hea = false "If true floor heating" annotation(
        Dialog(tab = "Heat Pump", group = "Radiator type"));
      parameter Boolean ASHP = true "True = Air source heat pump" annotation(
        Dialog(tab = "Heat Pump", group = "Nominal condition; Only HP type must be true; IMPORTANT: Costs only apply for AS or GS"));
      parameter Boolean GSHP = false "True = Ground source heat pump" annotation(
        Dialog(tab = "Heat Pump", group = "Nominal condition; Only HP type must be true; IMPORTANT: Costs only apply for AS or GS"));
      parameter Modelica.Units.SI.Temperature T_ground = 283.15 "Ground temperature for ground source heat pump" annotation(
        Dialog(tab = "Heat Pump", group = "Nominal condition; Only HP type must be true; IMPORTANT: Costs only apply for AS or GS"));
      parameter Boolean WSHP = false "True = Ground source heat pump" annotation(
        Dialog(tab = "Heat Pump", group = "Nominal condition; Only HP type must be true; IMPORTANT: Costs only apply for AS or GS"));
      parameter Modelica.Units.SI.Temperature T_water = 283.15 "Water temperature for water source heat pump" annotation(
        Dialog(tab = "Heat Pump", group = "Nominal condition; Only HP type must be true; IMPORTANT: Costs only apply for AS or GS"));
      //Solar Themal
      parameter Boolean onST = true "true = on, false = remove ST panel" annotation(
        Dialog(tab = "Solar Thermal", group = "General"));
      replaceable package Medium = FreeFluids.Pipes.Examples.Glycol47 "Antifreeze Medium inside the Solar Collector (default = Glycol47)" annotation(
        Dialog(tab = "Solar Thermal", group = "General", enable = onST));
      parameter Modelica.Units.SI.Area area = 10 "Total area of panels in the simulation" annotation(
        Dialog(tab = "Solar Thermal", group = "General", enable = onST));
      parameter Modelica.Units.SI.Temperature T_cold_in = 313.15 "Return Temperature of the fluid" annotation(
        Dialog(tab = "Solar Thermal", group = "General", enable = onST));
      parameter Integer nSeg = 9 "Number of segments used to discrete the collector model" annotation(
        Dialog(tab = "Solar Thermal", group = "General", enable = onST));
      parameter Real eta_hex = 0.8 "Efficency of heat exchanger" annotation(
        Dialog(tab = "Solar Thermal", group = "General", enable = onST));
      parameter Modelica.Units.SI.Angle azi = 0 "Surface azimuth (0 for south-facing; -90 degree for east-facing; +90 degree for west facing" annotation(
        Dialog(tab = "Solar Thermal", group = "Orientation", enable = onST));
      parameter Modelica.Units.SI.Angle til = 0.7853981633974483 "Surface tilt (0 for horizontally mounted collector)" annotation(
        Dialog(tab = "Solar Thermal", group = "Orientation", enable = onST));
      parameter Real rho = 0.2 "Ground reflectance" annotation(
        Dialog(tab = "Solar Thermal", group = "Orientation", enable = onST));
      //final parameter
      final parameter Modelica.Units.SI.SpecificHeatCapacity cp = Water.specificHeatCapacityCp(Water.setState_pTX(Water.p_default, Water.T_default, Water.X_default)) "Specific heat capacity of Water at default medium state";
      Modelica.Blocks.Sources.BooleanExpression mchpCon(y = MainController.P_phg_on == true and sw3.y == 0) "CHP on or off" annotation(
        Placement(transformation(origin = {-84, 142}, extent = {{-18, -12}, {18, 12}})));
      Modelica.Blocks.Interfaces.RealInput Q_dem(unit = "W") annotation(
        Placement(transformation(origin = {114, 82}, extent = {{-20, -20}, {20, 20}}, rotation = -90), iconTransformation(origin = {-120, -46}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Logical.Switch sw3 annotation(
        Placement(transformation(origin = {-124, 160}, extent = {{-10, -10}, {10, 10}})));
      CHP_model.ICE_CHP_modulation Mod_CHP(P_th = P_th, P_el = P_el, eta_th = eta_th, eta_el = eta_el, T_supply = T_supply, T_return = T_return, Zmin = Zmod, ratio_CH4 = ratio_CH4, ratio_H2 = ratio_H2) "CHP with P_el > 50 kW and part load behaviour" annotation(
        Placement(transformation(origin = {-20, 186}, extent = {{-16, -16}, {16, 16}})));
      Modelica.Blocks.Sources.BooleanExpression modulation(y = mod) "choose if modulation or not" annotation(
        Placement(transformation(origin = {-164, 160}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.Constant CHPwith(k = 1) "with modulation" annotation(
        Placement(transformation(origin = {-166, 192}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.Constant mCHPwithout(k = 0) "without modulation" annotation(
        Placement(transformation(origin = {-164, 128}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.BooleanExpression chpCon(y = MainController.P_phg_on == true and sw3.y == 1) annotation(
        Placement(transformation(origin = {-86, 182}, extent = {{-18, -12}, {18, 12}})));
      CHP_model.ICE_CHP_constant Sta_CHP(P_th = P_th, P_el = P_el, ratio_CH4 = ratio_CH4, ratio_H2 = ratio_H2, eta_th_nom = eta_th, eta_el_nom = eta_el) annotation(
        Placement(transformation(origin = {-23, 143}, extent = {{-17, -17}, {17, 17}})));
      TES Tes(T_supply = T_supply, T_return = T_return, V_Tank = VTan, hTan = hTan, dIns = dIns, kIns = kIns) annotation(
        Placement(transformation(origin = {-126, -84}, extent = {{-18, -18}, {18, 18}})));
      Modelica.Blocks.Sources.RealExpression T_ambExp(y = T_amb) annotation(
        Placement(transformation(origin = {-194, -84}, extent = {{-10, -10}, {10, 10}})));
      Buildings.BoundaryConditions.WeatherData.Bus weaBus annotation(
        Placement(transformation(origin = {-208, 194}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {-110, 90}, extent = {{-10, -10}, {10, 10}})));
      SolarThermal ST(redeclare package Medium = Medium, T_cold_in = T_cold_in, area = area, nSeg = nSeg, eta_hex = eta_hex, azi = azi, til = til, rho = rho) "Performence Data: FP - Guandong Fivestar Solar Energy Co, FS-PTY95-2.0" annotation(
        Placement(transformation(origin = {-123, -167}, extent = {{-25, -25}, {25, 25}})));
      mainConH2 MainController(SOCmin = SOCmin, SOCmax = SOCmax, P_nom_phg = P_th_prime, P_nom_shg = P_th_support, mod = mod, P_el_thr = P_el_thr) annotation(
        Placement(transformation(origin = {192, -38}, extent = {{-34, -34}, {34, 34}})));
      Modelica.Blocks.Math.MultiSum CHP_P_th_pro(nu = 2) annotation(
        Placement(transformation(origin = {58, 172}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.RealExpression min_Modulation(y = Z_internal) annotation(
        Placement(transformation(origin = {108, -4}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput P_th_CHP(unit = "W") "CHP thermal power supply" annotation(
        Placement(transformation(origin = {308, 200}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 60}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput P_fuel_CHP(unit = "W") "CHP fuel power demand" annotation(
        Placement(transformation(origin = {308, 184}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 40}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput m_dot_fuel_H2_CHP(unit = "kg/s") "Hydrogen consumed by CHP" annotation(
        Placement(transformation(origin = {308, 166}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 0}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput P_el_CHP(unit = "W") "CHP electrical power supply" annotation(
        Placement(transformation(origin = {308, 144}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 80}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput P_th_HP(unit = "W") "Heat pump thermal power supply" annotation(
        Placement(transformation(origin = {308, 106}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -20}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput P_com_HP(unit = "W") "Heat pump electrical power demand" annotation(
        Placement(transformation(origin = {308, 88}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 100}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput T_Tes(unit = "K") "Current tank temperature" annotation(
        Placement(transformation(origin = {306, 46}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -40}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput SOC_Tes(unit = "1") "Tank state of charge" annotation(
        Placement(transformation(origin = {306, 26}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -60}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput E_Tes(unit = "J") "TES thermal energy stored" annotation(
        Placement(transformation(origin = {306, 10}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -80}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput P_th_ST(unit = "W") "Solar thermal thermal power supply" annotation(
        Placement(transformation(origin = {306, -30}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -100}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Math.Gain gain_P_com_HP(k = -1) annotation(
        Placement(transformation(origin = {-13, -15}, extent = {{-5, -5}, {5, 5}})));
      Modelica.Blocks.Interfaces.RealOutput Q_sup(unit = "W") "Total supplied thermal Power" annotation(
        Placement(transformation(origin = {306, -62}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -120}, extent = {{-10, -10}, {10, 10}})));
      Heatpump_Ruhnau HeatPump(floor_hea = floor_hea, ASHP = ASHP, GSHP = GSHP, WSHP = WSHP, T_ground = T_ground, T_water = T_water) annotation(
        Placement(transformation(origin = {-80, -9}, extent = {{-26, -27}, {26, 27}})));
      Pump pump annotation(
        Placement(transformation(origin = {166, 122}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput P_el_pump(unit = "W") "electrical power consumed by pumps" annotation(
        Placement(transformation(origin = {196, 122}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 120}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput m_dot_fuel_CH4_CHP(unit = "kg/s") "Natural Gas consumed by CHP" annotation(
        Placement(transformation(origin = {240, 168}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 20}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput Q_tes(unit = "W") annotation(
        Placement(transformation(origin = {306, -14}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -142}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Logical.Switch swST annotation(
        Placement(transformation(origin = {-56, -190}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.BooleanExpression STonoff(y = onST) annotation(
        Placement(transformation(origin = {-118, -208}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.Constant const(k = 0) annotation(
        Placement(transformation(origin = {-118, -234}, extent = {{-10, -10}, {10, 10}})));
      TesCon tesCon(SOCmin = SOCmin, SOCmax = SOCmax) annotation(
        Placement(transformation(origin = {-78, -70}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.BooleanInput CHPoff annotation(
        Placement(transformation(origin = {106, -94}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 48}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealInput P_el_dem annotation(
        Placement(transformation(origin = {108, -142}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 0}, extent = {{-20, -20}, {20, 20}})));
    protected
      Real Z_internal;
    equation
      if mod then
        Z_internal = Zmod;
      else
        Z_internal = Zoff;
      end if;
      P_fuel_CHP = Mod_CHP.P_fuel + Sta_CHP.P_fuel;
      m_dot_fuel_H2_CHP = Mod_CHP.m_dot_fuel_H2 + Sta_CHP.m_dot_fuel_H2;
      m_dot_fuel_CH4_CHP = Mod_CHP.m_dot_fuel_CH4 + Sta_CHP.m_dot_fuel_CH4;
      P_el_CHP = Mod_CHP.P_el_pro + Sta_CHP.P_el_pro;
      connect(Q_dem, Mod_CHP.Q_load) annotation(
        Line(points = {{114, 82}, {114, 214}, {-50, 214}, {-50, 190}, {-40, 190}}, color = {0, 0, 127}));
      connect(chpCon.y, Mod_CHP.y) annotation(
        Line(points = {{-66.2, 182}, {-40.2, 182}}, color = {255, 0, 255}));
      connect(mchpCon.y, Sta_CHP.y) annotation(
        Line(points = {{-64, 142}, {-44.1, 142}, {-44.1, 144}, {-44.2, 144}}, color = {255, 0, 255}));
      connect(Tes.T_amb, T_ambExp.y) annotation(
        Line(points = {{-147.6, -84}, {-182.6, -84}}, color = {0, 0, 127}));
      connect(weaBus.TWetBul, HeatPump.T_amb) annotation(
        __Dymola_Commands(file = "modelica://Buildings/Resources/Scripts/Dymola/Fluid/Storage/Validation/StratifiedLoadingUnloading.mos" "Simulate and plot"),
        Documentation(info = "<html>
            This model has the CHP as primary heat generators and Heat pumps as secondary heat generators
            </html>"),
        experiment(Tolerance = 1e-06, StopTime = 604800, StartTime = 0, Interval = 3600),
        Diagram(coordinateSystem(extent = {{-140, 220}, {460, -140}})));
      connect(weaBus, ST.weaBus);
      connect(Sta_CHP.P_th_pro, CHP_P_th_pro.u[1]) annotation(
        Line(points = {{-4.3, 128.04}, {19.7, 128.04}, {19.7, 172.04}, {47.7, 172.04}}, color = {0, 0, 127}));
      connect(Mod_CHP.P_th_pro, CHP_P_th_pro.u[2]) annotation(
        Line(points = {{-2.4, 171.6}, {47.6, 171.6}}, color = {0, 0, 127}));
      connect(Q_dem, MainController.Q_dem) annotation(
        Line(points = {{114, 82}, {114, 14}, {151, 14}}, color = {0, 0, 127}));
      connect(min_Modulation.y, MainController.Z) annotation(
        Line(points = {{119, -4}, {135, -4}, {135, 1}, {151, 1}}, color = {0, 0, 127}));
      connect(MainController.P_phg, CHP_P_th_pro.y) annotation(
        Line(points = {{151, -13}, {81.2, -13}, {81.2, 171.6}, {69.2, 171.6}}, color = {0, 0, 127}));
      connect(swST.y, P_th_ST);
      connect(Tes.SOC, SOC_Tes);
      connect(Tes.T_tank, T_Tes);
      connect(Tes.E_tank, E_Tes);
      connect(HeatPump.QCon_flow, P_th_HP);
      connect(gain_P_com_HP.y, P_com_HP);
      connect(CHP_P_th_pro.y, P_th_CHP);
      connect(MainController.Q_sup, Q_sup) annotation(
        Line(points = {{229, -45}, {242, -45}, {242, -62}, {306, -62}}, color = {0, 0, 127}));
      connect(HeatPump.P, gain_P_com_HP.u) annotation(
        Line(points = {{-52, -8}, {-30, -8}, {-30, -14}, {-18, -14}}, color = {0, 0, 127}));
      connect(MainController.P_SHG_need, HeatPump.Q_dem) annotation(
        Line(points = {{229, -31}, {254, -31}, {254, 98}, {-190, 98}, {-190, -10}, {-108, -10}}, color = {0, 0, 127}));
      connect(MainController.P_shg, HeatPump.QCon_flow) annotation(
        Line(points = {{151, -26}, {18, -26}, {18, 16}, {-52, 16}}, color = {0, 0, 127}));
      connect(Q_dem, pump.Q_dem) annotation(
        Line(points = {{114, 82}, {114, 122}, {156, 122}}, color = {0, 0, 127}));
      connect(pump.P_el_pump, P_el_pump) annotation(
        Line(points = {{176, 122}, {196, 122}}, color = {0, 0, 127}));
      connect(Tes.E_tank, MainController.P_tes) annotation(
        Line(points = {{-106, -98}, {-44, -98}, {-44, -54}, {151, -54}}, color = {0, 0, 127}));
      connect(MainController.Q_tes, Tes.Q_flow) annotation(
        Line(points = {{229, -38}, {254, -38}, {254, -118}, {-170, -118}, {-170, -98}, {-148, -98}}, color = {0, 0, 127}));
      connect(mCHPwithout.y, sw3.u3) annotation(
        Line(points = {{-152, 128}, {-136, 128}, {-136, 152}}, color = {0, 0, 127}));
      connect(sw3.u2, modulation.y) annotation(
        Line(points = {{-136, 160}, {-152, 160}}, color = {255, 0, 255}));
      connect(CHPwith.y, sw3.u1) annotation(
        Line(points = {{-154, 192}, {-136, 192}, {-136, 168}}, color = {0, 0, 127}));
      connect(MainController.Q_tes, Q_tes) annotation(
        Line(points = {{229, -38}, {264, -38}, {264, -14}, {306, -14}}, color = {0, 0, 127}));
      connect(ST.Q, swST.u1) annotation(
        Line(points = {{-98, -184}, {-68, -184}, {-68, -182}}, color = {0, 0, 127}));
      connect(swST.y, MainController.P_ST) annotation(
        Line(points = {{-44, -190}, {40, -190}, {40, -67}, {151, -67}}, color = {0, 0, 127}));
      connect(STonoff.y, swST.u2) annotation(
        Line(points = {{-106, -208}, {-90, -208}, {-90, -190}, {-68, -190}}, color = {255, 0, 255}));
      connect(const.y, swST.u3) annotation(
        Line(points = {{-106, -234}, {-68, -234}, {-68, -198}}, color = {0, 0, 127}));
      connect(Tes.SOC, tesCon.SOC) annotation(
        Line(points = {{-106, -70}, {-88, -70}}, color = {0, 0, 127}));
      connect(tesCon.dis, MainController.dis) annotation(
        Line(points = {{-68, -66}, {-58, -66}, {-58, -40}, {151, -40}}, color = {255, 0, 255}));
      connect(CHPoff, MainController.CHPoff) annotation(
        Line(points = {{106, -94}, {106, -81}, {151, -81}}, color = {255, 0, 255}));
      connect(P_el_dem, MainController.P_el_dem) annotation(
        Line(points = {{108, -142}, {150, -142}, {150, -94}}, color = {0, 0, 127}));
      annotation(
        Diagram(coordinateSystem(extent = {{-220, 220}, {320, -260}})),
        Icon(graphics = {Text(origin = {-2, 22}, textColor = {0, 0, 255}, extent = {{-149, -114}, {151, -154}}, textString = "%name"), Bitmap(extent = {{-92, -88}, {92, 88}}, imageSource = "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAOxAAADsQBlSsOGwAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAACAASURBVHic7d13uF1Vmcfx700PKUASegsBQgfpXbr0Kl0pjogjIsiIo47DiB0FSwYsiCODSO/Sey9C6IQWakJoSYD0cpN75o+VO4bLLeec/a5377327/M8+1GUu8+71tnlPXuv9a4WRKQKlgF2BnYBNgaWA5Zd9P99ALwPPAPcDdwDTM4hRhERETGyKfBXoBWo1bktBG4AtskhXhEREclgVeA26r/pd7XdCqziHLuIiIg04VBgKtlv/u3bNOAE1xaIiIhI3foA52B34++4nQ/0c2uNiIiI9GgYcBfxbv7t24P8c/CgiIiI5Gg08BLxb/7t22vA+i4tExERkU7tCXyM382/fZsBHODQPhEREengFGAB/jf/9q0NOCN2I0VERCToB/yF/G78HbdLgIFRWywiIlJxw4F7yf+m33F7mFBdUERERIxtCLxB/jf7rraJwGbRWi8iIlJBexMK8uR9k+9pmwEcFKkPREREKuUUQn3+vG/u9W7tgwNbIvSFiIhI8voDF5L/Db3Z7TI0OFBERKQhKwCPkv9NPOv2JFpMSEREpC4bA2+S/83bapsEbGHZQSIiIqk5FJiFz435LODrQKvDZ81a1DYRERFZTAvwHXwG+80DvrTYZ+8AfODwuW3AmUCvzL0lIiKSgAHARfj86p8M7NhJDGsALzjFcCWwRNO9JSIikoAVgcfwufE+C4zsJpYhwA1OsTwNrNpoZ4mIiKRgE2ACPjfcm4ChdcTUm/CY3iOmd4Ct6u4tERGRBByG32C/MTT+3v14wliB2LHNBY5pMDYREZHSaSFUyWuj+DfX7YD3HeJsNkkREREphUHANZTr8foo4HmnmOt9TSEiIlIaKwFj8bmRPoXtALvBwPVOsfc0UFFERKQ0tgHexecGGmuKnefgwK6mKoqIiJTGkcBs4t80vYrsHAXMcWjPXD5ZrEhERKQU2gf7efxingN8waVVwbbAexHa0dk2hvD0QUREpPAGA9fhc4N8G9jcp1mfsDLwRBPxNrPdAizp0ywREZHmjAKew+fG+AiwvE+zOjUYuLaTuGJsLwOjfZolIiLSGM9585cBA32a1S3PugZTgJ1dWiUiIlInr8p5bYQbbotLq+p3BD6DHVuBk5zaJCIi0iXP6XEzgAN9mtWUrfGb7nge0NenWSIiIp/kuXreRGBTn2ZlshLwOD59chuwlE+zREREgjWAcfjc6B4ClvNplolBwNX49M14YB2fZomISNXtAHyAzw3uYmCAT7NMtQDfwWdw4IfAbj7NEhGRqjoBmE/8m9oCwg207LyWPU6lv0REpGD6EKrSefzqnw7s59MsF58BJuDTdxocKCIiZoYBd+JzA3sVWN+nWa5WBB7Dpw/vB5bxaZaIiKRqLeBFfG5cD5D2jWsAcBF+idR6Ps0SEZHUfA74CD26ttQ+OHAh8fs0tVcpIiLi4ARC1bnYN6mqDl47BA0OFBGRAukDnIvPr/6qT1/bGHgTn77+M9DPpVUiIlI6w4G78bkhqYBNsALwKD59/iDlKqgkIiIONgBex+dGpBK2n9QfuBCfvp8IbOLTLBERKbo9gY/xuQFVZbBfM07BZ3Bg0RdVEhERB6cQBorFvuloGdv67A1MI/730b6ssoiIVEx/4AJ8fvVPAXb2aVYSNgTewOe7uRQY6NMsERHJ2wjgPnxuMC8Do32alZQRwL34fEePAMu7tEpERHKzEX6/Lm8BlvRpVpI8n9K8DWzm0yyRYmjJOwARRwcDfyWsVx/bWcB3Ce+aJZtvA2cCvSJ/zizgGOCayJ9TVi2E8so7EWbNjCQkuGWqrzCbUCHyFeAZwrTfiblGJCJRtQDfx2dt+rnAsT7NqpR9CRfu2N9fG/Cf6MfR4oYRzp/x+DyN8d4eAY4nPHESkYQMBC7B50LyHrCtT7MqybNWgwYHhhvi6YRpk3nfpD22icAXUPInkgTPJWifAlb1aValeQ7gfIxwDFXR+sA48r8p57HdRDjORKSkNicM7PK4YFyDz7gCCfoRavt7fLdvE46lKtkLmEn+N+I8tzdRqW6RUjqcMNgn9kWiDfgJemSYl1PxKeI0m3BMVcG+wHzyvwEXYfsAJQEipdEC/BCfwX6zgSN9miXd8Crj3Ab8iLSTvc3xSZzLtL2JXgeIFN4g4Ep8LgqTgC18miV1WBe/EepXkebrnqHAa+R/wy3idjNpJ34ipbYS8Dg+FwMN9iumYcCd+BwDzwCr+TTLzRjyv9EWeftC810rIrFsDbyLz0XgMjQ1rMj6An/A51h4l3DspWBNwmJVed9ki7xNRHUCRArli8Ac4p/8bYT50Kk8BlyKsOre1xZtey/631JxEj43tDmEY7Ds/kj+N9gybMc328EiYqcX8HN8TvqZwOd9mhXdesAVdD5yfgFwOeF9egp2Bz7E5xjxKFMcyxL4LL+cwvZIk30sIkYGA9fjc8JPADbxaVZ0J1Hf05I5i/7dFIwmrMbocaxcDwzxaZapg8j/xlqmbeXmullEshpJGIDlcaI/TBpLxPYDzqfx9p9PuRZ56crSwO34HDPPEo7RMvlv8r+plmk7urluFpEstiXU2vc4yVOpAz+csNpZs/3wILCse9T2ehMe03scO1MIq+WVxf3kf1Mt03Z2c90sIs36EjCP+Cf3QuA7Tm2KzWrhnNcX7SsFX8Wnyt084F+c2pTVJPK/qZZpu765bhaRRnn+cpsBHOjTrOj2wrY63gzgANcWxLM9ocSrxzF1HtDHp1lNU+W/xrb7muvmYkplWpOkZyjhUfzeDp/1BuEG95zDZ8X274QZEtaj0tuA7wG/NN5vHtYAbsBnxsMthJLR0xw+qxk1g30cRJgtU3SbAr/IuI8nqN7iUCKuRgHP45PRPwgs59OsqPoDFxC/v1IZHzEE+Ds+x9grwNo+zWqYRfuWdo+6ObuRva1j3aMWqZDtgffxuTD/mTRGuo8gPJr06LMa6cyQ8HzFNBXYxadZDVECoARApBC+gs8grQWkM9hvI8KKZV43//btbWCz+M1z8WV8Bpm2At9walO9lAAoARDJlecvsenAfj7Nim4f8q3iNhM4OHorfXhOMz2PsG5BESgBUAIgkpuhwI34XHhfJZTDLbsWwhOMheR382/f2gjJWwoDilcGnsSn326nGDdOJQBKAERysSbwAj4X3PuBZXyaFdUA4CLyv/F33C4n1JUvu8HAdfj02XjyX3tBCYASABF3nou1FOmRaxYrAo+R/82+q+1JYJVorffTApyBT59NB/Z1aVXnlAAoARBxdQI+g/1aSWew32eAt8j/Jt/TNgnYIlIfeDsCn0I5eQ5KVQKgBEDERR/8Fh+ZCuzq06zoDgNmkf/Nvd5tDvDFKD3hbxvgXXz6LY8FmJQAKAEQiW4YcBc+F9JXgHV8mhVV+2C/NvK/qTe6tQ8OtK5ImIeVCBd+j357AN8FmJQAKAEQiWo08BI+F9DbgKV8mhXVIOBq8r+RZ92uWtSWshsEXINPn70GrO/TLJN4lQCISKf2AD7C58JZhsVX6uH5i9NjexpYzbSH8tE+ONDjicwMYH+HNlnEqgRARD7lW4QBTrEvlvOA453aFJtnQZo/LNo8PutdYGvDfsrTUYRxDrH7bAHhHIrJIk4lACLy//oB/4PPjWUKsLNPs6I7knxGnXvNypgLHGvQT0WwCTABn2P8EkL9hxgs4lMCICIADAfuwefC+Bywuk+zovKcd/4h4ULY0WeBD5xiGEMagwM96zI8RJxVKy1iUwIgImwIvI7PBfFmYEmfZkXlXXmuu9kRnpUZbyaUgS67AcDf8OmzidgvwGQRlxIAkYrbC7+FaVL5BTkKeB6fPrud+mZHDAFucIrpWdJ5guO1NsMM4CDD2C1iUgIgUmGn4HPxmwsc59Ok6LYD3sfnRttoKWTP1RmnADs1EFuRHYJPwaY2wisjiwWYLOJRAiBSQf2B/8XnRjGZ8J46Bcfjt/78SSWIcx7wLxniLBLPks2XAQMzxmsRhxIAkYoZQVhhz+NC9wxpzCP3/GU9FdjFIGbvJxUp1HFYAfgHPn2WdQEmixiUAIhUyMbAm/hc4G4kjcFinu/WXwbWNozdc6zCraRRybE/8Fd8+izLAkwWn68EQKQiPg/MJP5FLaVa8p6j628hzuwIz9kK1glMXjwHB84BvtBEjBafrQRAJHHeF7OjfZoVnff8+t4R2+JZr8DqFUYR7IPPDJlmkmaLz1UCIJKwAcBF+Fz4JwFb+jQrOq8Ke/OALzm1CULFQo9SuK3AN5zaFNtG+L02uxJYos64LD5PCYBIojyrnT0FrOrTrKj6AP+NT59NBnb0adYnbIPfmgWNTmMsqhHAfRTrXLL4LCUAIgnyrHd+BfX/aimyYcBd+PTZs8BIl1Z1bmX8Vi28nfLcaLrTH7gAnz57B9iqh3gsPqcs34sSAJE6HYZfUZMzsSlqkre1gJfwubjfRDFmRwwCrsGnzeOBdX2aFZ1n8axjuonD4jOUAIgkon2wn8ea5zOBg32aFd0ewEf43AiLVgq5fXCgxzEzDdjXpVXx7QV8TL7HjMW+lQCIJGAQcDU+F6S3sV/YJC8nEAasxe6znn7N5e1w8lnOuMw8F9Dq7KmRxX6VAIiU3Er4vc99BFjep1lR9QP+B58+q+d9bhF4jhv5E+E7KDvPJbSf4ZPjRiz2qQRApMS2Ad7F5wJ0KdnrlxeB50X7aco1O8Jz5sgDwLI+zYrKM5lcfOaIxf6UAIiU1BH4PLZtX8EsBRsCb+BzsW5kTneRDAD+hk8fvQas79Os6DxfJx1ntC8lACIl0wv4BT4X6OmkM3DrAMKa7LH7rA34AeWeHdFCaIPX4MC9fZoV3d74VA602pQAiJSIZ133CYT3winwmrrVbF33ojoEnymlKQ0OHI3flNKsmxIAkZJYhbCEqMeF4UHSeD/bH7gQnz7LsrJbkW0MvIVPH15MeAVRdp5FpbJsSgBESsBzbffzSWOE9grAo/j0Wda13YvOsy8fApbzaVZUfYBzyP8m392mBECk4L5MWDQm9sUgpcewnr9aLyON2RE98XyaMhHY1KdZ0XktLKUEQAmAJKQ3odSux4VgOrCfT7Oi83pv3T47osyD/ZrhNZ5iBnCQU5ti2x34kPxv+EoAREpgCPB3fC4CrwLr+TQrqvZSyLo5xec12j2lJGtN4EXyv+krARApsDWAcfhcAO4HlvFpVlSec9cnkk4p5Cw8ayqk8pplaeAO8r/xKwEQKaAdgA/wOflTWavds3rdw6QxQM3KCOBefPo+lTLUnq/2lAAoAZCS8Bos1Aqc7NSm2Dzr119CGr9CrfUD/oLPd/A2sLlPs6IrwuBAJQAiOeuD3y+CqcCuPs2KzmsFu5RKIcd0CmEmSezvI6ViS55P/JQAiBTM0sCd+JzsrwDr+DQrKs817GcQSghLffYEPib+99JGSJp7+TQrKs8xP0oARApiLfxGBd8GLOXTrKgGA9fg02cpLVTjybMU7hWUc8Gljjxn/SgBEMnZ54CP8DnJzyO8Zii7lYEn8OmzVEoh58WzFO5TlGvJ5a7kMThQCYCIM693pfMIVQRTsD1+pZBTmR2Rt76EvvT4ziYBW/o0K7rj8an8WQNOc2pTVkoApPT6AOfic2JPAXZyaVV8RxEGfsXus5RKIReJ12j3ucAxTm2KzXPtjz9T/LU/lABIqQ0H7sbnhH4OWN2nWVF5l0Le16dZleRVCjelwYGjgOfxOf4fpNj1LZQASGmNBl7G50S+GVjSp1lRDQGux6fPxgPr+jSr0jxL4d4IDPVpVlSDgevw6bOJhLoaRaQEQErJa1pUDRhDGr98PKdF3UcapZDLwrMU7jPASJdWxdU+7dWjz2YAB7q0qjFKAKR0vAb7zQWOdWpTbNujUsip83y1MxnY0adZ0R2Jz1iYIha+UgIgpdEfuAC/C9xnfZoV3VdQKeQq8RwceJxPk6LbBngPn2vLpRSn9LUSACkFz8VRngFWc2lVXJ6/CFMqhZwCzyc+YwjHWtmtTLiZefRZURZgUgIghbcRfsujXgUM8mlWVJ7vhF8B1vZpljTAc8zHLaQxSNazIubb5L/8tRIAKbS9gWnEPxlTmubkOSr8VtIohZwqz1K4LxNm5pSd55oYM4GDXVrVOSUAUlinAAuJfxLOAb7o1KbYVApZOvJ8FTQF2NmnWdF5rop5JiHx8KYEQAqnP3AhPhesScAWPs2KzmvwVyvwdac2iZ0v41MKN6XjY2vgXXyuRZfjvwCTEgAplBWAf+Bzwj0JrOLTrKj6AOfg02cplUKuom3xG+2eyhOilYDH8emzp/C9JikBkML4DPAWPidaHtl2DCqFLI3yXP0xleWyBwAX49Nnnk8llQBIIRwCzCL+yZXn+zZrKoUszRoMXIvPsfMKsI5Ps6JqISxqldK4JCUAkivPkyrvEbeWVApZsvIshfsh6dSJOBTfHysxzz0lAJKbAcDf8LkAFWHOrRXPUsjH+TRJcnQEPqPdW0lnWWjP15Uxa5MoAZBcrIjfwJqHKUbVraxUClli8RztnspaESviN2A5VnVSJQDibmvgHXxOnEsoTt3tLFQKWWLzHO1+P2msFjkAuAifPouRlCsBEFeexTXO8GlSdJ6lkFNZ712aM4jwyNnjWHsVWM+nWVF5jmOyXqFUCYC48CyvOQM4wKVV8e2DSiGLr/Ybmse5Oh3Yz6dZ0X2eMNA4dp/VsBuYqwRAovNcYOM1YH2fZkXlPeXoaJ9mSYl4jXZfQDqDAzcC3sTnWmcxNVcJgETlWXTkQWBZn2ZF1R/4Kz59NgnY0qdZUkKeo93/DPTzaVZUI4D78OmzZ8lWnEsJgETjWXb0fNK4eHiOLH4KWNWnWVJinsdkSkn8/+LTZ1nKcysBkCiOJDxajn3wp/T40PPX1hWkUQpZfAzA76nUBGATn2ZF57Wi6TzgX5qITwmAmPJcenQ6sK9Ps6Lzri6WQilk8eU5LiWlgbx74zOQt0bjCzApARAzg4Hr8TnQxwPr+jQrKs8R1zMJI5VFsvCcmXKGT5Oi2xC/qby3Uv8CTEoAxMQo4Hl8DvD7SKOIyCDganz67G1gc59mSQV4jna/lDSKeQ3Hr5jXy8DadcSkBEAy2x54H58DO5Uyop5V1x4hjVLIUiyeo91TOYb7AX/Bp8+mArv0EI8SAMnkeMIAlNgHcyvwDac2xeZZdz2VX09STJ7rU2hBL/vrphIAaYrnYL96Mtmy8Fp5Le/3p0sBJxKKlbxImA76LOHXz74UaxDi+sBPgYeAiYu2h4CfUKxStb0IVfMuIPTle4S+vZnQ1/W+943Ba7S7lvRubuvqyakSAGnYEOAGfA7cV6jvXVbRea69PgM40KVVnftXQtLW00Uj76leQwlztbu7cS0kJC1D8gnx/20KPEn3fToF+GpeAQJ74XNDS2kmy2jC+3qP68LtwNIdPl8JgDRkTeAFfA7YRkazFtlg4Dp8+mwi4WaRhxbg93XE2L7NJIwoz8MKNDZo9Tnyewe9L41NEf0d+d0cNwBeryNGi+1y0qhlMRy4G58+6zh7SgmA1G134EN8DtRG57MW1Sr0/MvNansIWM6nWZ36XhdxdbfNIEyR8tQfeLSJWB/Gv9rkZ2hugZl/d45zccOBe7qIy3p7inCOlV0f4Fx8+mwa/6yfogRA6nICMJ/4B2ezFa2KaDv8ZkfkXUd9dZofDPoovr9YT2syzhrwTcc4ISR1zZ5HazjHujjPG9okYAufZkV3AmHgXuw+a6+gqgRAutUX+CM+J/IHhCmFKfCaHbEAONWpTd35A9nasZNTnL3JlpS9t2gfHnbJEGeN8Cogb6fiM9p9NnC4U5ti2wP4CJ9rbjNPwjpuSgASNQy4C58DMeuqVkXhXQq5CGupt5B9WuMYp1h3zBhnDdjBKdZzMsY5iWIMlPO6obUPDuzl06yo1iLM8PC4jmTdlAAkaC3gJXwOoJsII7LLznN2xKsUZ4ra8mRvz71OsZ5sEOvXnWK93yDWolTM9LyhXUWosll2w4A78emzLJsSgMR4PoIaQxoZ+xrAOHz67AGKc2EH2JjsbXrJKdafGsT6Y6dYLaaHeQ+w7I7nDe0ZYDWfZkXVh3CN9OizZjclAAnxGoQyFzjWqU2x7UAYv+BxshWxFPIOZG/Xc06xZn2sXgN+4BTrewaxFm3BLM8b2mTgsz7Nis5rEHYzmxKABPQD/gefA+YD/N6jxuZ1YraP2i2iPcnevn84xWpRh/00p1hnGMS6mlOsjfI6b/RDI/6mBKDkPOftPk1xL0qN8Pwl8yFhuk5RHU/2Nt7tFOvtBrGe6BDnkgZx1ggL9hTVZ/G7oaXyqtGzEFu9mxKAEtsQv8pdV6LBOY1u44F1fJrVNItZD9c4xWpxrB/pEOfmBnEuJN/aEPXwvKHdTEisys5zsHE9mxKAkvKu3Z1CBu45mvl2ylEK+Tayt/VshziHYbNgzVYOsX7FIM63HOK04HlD03Rj+00JQAl5rd41B/iiU5ti85wdUcTBfp3pS3OlajtuX3OI9SCDOGv4PFa/2CBOr9cqFjxvaFPwKzwVm1fBse42JQAl0p+wAprHgaESnY1vrcBJTm2ysCs27f6cQ6znGcQ5zSHOPtiUkD7fIVZrXjc0lRy325QAlMQI4D58DoonSWORDs/ZEVMJ5V/LxGJUfRuwbOQ4+xF++WWN9Z7IcUJ4NWdxPHkMVozB84aWyqJjo2hsdUvLTQlACWwEvInPAXEZ6SzTeQ8+ffYysLZPs8wsSfhFnLXtHkWADjeIs4ZPEaArjWLdyCHWWDxvaKksOz4EuB6fPlt8UwJQcJ/H5j1tT1sbcAbFqD+elefsiFso5+jk72PTfo9H1U8YxbpH5DjXxmZszkeUf9DtYOA6fM7BVyhfAt6ZPAYHKgEoqBbgdMKNOfZBMAM40KdZ0e2PTRGWeraz8FtdztLShEprFn0Qe5Do543inEf8NSsuM4r1+shxeulNOEc8zsUpwM4+zYruS/gNDnyeNH70JWUAcBE+B8BEYDOfZkXnNTtiHuEkLausy/8u3g9LR4xzCeANo1hviBgnhMI4Vsn6MZFj9XYkYUZR7POyFfiGU5ti2xabctL1bFeQxmvfJKwIPIbPF/8wsJxPs6LynB0xmbAsbVntjF2SFPum+jujOGvEvakOJRR9sohzLmm80+5oG/xuaGWZhtuTlbF7/dXT9hSwqk+zpCufIRQA8fjCLwEG+jQrqhHYLL1az/YsMNKlVXEsD7yLXX/EvKkeZhhn7JvqFYax/j1inHlbmfDO2eNcvZ24T6e8DAauxafP3gG29GmWdHQoMIv4X3L7YL8UbIzf7IibiP8OOaYhwOPY9cdU4pWG3grbcRwXRooT4CeGcdaAfSPGWgSDCKWjPc7Z8RRvRcVmtBCu2R59Nhc42qVVAoQv9zv4DfY7wKdZ0R2Cz+yIGuVfjKQfcBe2ffLTSLGuT1hAyTLWTSLFerJxnC9R7uOsXu03NI9r3jTSSaqOAGYTv89SKv9eaIOAq4n/hdaA1wgX17JrT5g8BvvNJY0BWRZV9Bbf5gErRIhzOHbv0tu3OyPECWEZ5QXGsX41UqxFdTg+N7QiL8fdqK2xfY3X3XYj5X7qWWgr4fc+7AHiV2vz4Dk74h18Fo6J7TTs++aPEeLsTzhOrWPdNUKsGwLTjeOcSBpjchq1CTABn3P6TxR/hcV6eN47nqHc454KyTOLO580DnrP2RFPk8aI2L2wf1IynTgzR/5sHGeN8AvG2jDspiYuvqXwpKlZnud2Kj+GPJ8eTyZMcxUDXu9xUnrs5fkr4UrSmBM7gjhJ5ncjxHpAhDhbifPK69IIsT6J3rcOAP6Gzzme2utQj7EUc4HjXFqVKM+RnCkNfDkcv9kRKQ18sZya1r69QrhQW1oW+CBCrL82jhPCTB3rOBcSFtAR3/E90wlVQ1NwGD7XyBrlHxCdC8+5nKlNffHIbucAX3BplQ+rxXMW31oJr66sxXiM+QL279OXxWZFwo7bL4zjTMEh+NzQ9JS0ue1myrn+SS48qzmlVPzCa67wJGALn2a5GEicYlJnRIh1pwhxthLn+7Qqn7z49hRpjM+JYWN8i6JZP9nKg+dYiueA1X2aVV7bofKXjfKsFvYksIpPs9x8D/t+ehD7Y6sXcRLj04zjhPBErdU4zumk8R46phWAR/G5FjxEGmXRPWdKTSEk8dKJL+OzolNKC2B41gu/jPSmXS1LGP9h2U+vE2fU9NHGcdaACyLECaE8r2WcC0hnjE5s/QmVHD2uCROBTX2aFZXnWIpW4Os+zSoHzzWdpwK7+DQrOq8Vw9pLIae4BOaPsO2r6YQ579ZaCO/pLWN9gHCzsLYB9uNQTo0QZ+q8VvqcARzk1KbYvMZS1AhPoPv4NKu4hmD/a6Gr7WVgbZ9mReWZMM0knZO7o/7A+9j11Txg90ix7mEYZ42QTAyPFKt1fYJzI8VZBXtj/4Srsy2lHwmeYyluJc2VLOuyBjAOdXQjhgDX49NnE4HNfJqVi+Ow66uFhJkEsdxsGOsE4o3jGIFtzY5L0RSqrDYkTiGmzrZUXhN6jqV4hTR+mDZkB+LMZe5sS+VRyyjgeXz67GHSGODTnYex66+fRIxzVeweqc8j7gyOU43irBGqS6Yw0rwIRgD34nPteIQ461548xxLkdKr6R6dAMwnfqfOA77k1KbYtsf2cXV32yWkkcV3ZxXsbqoPEDfB/DejOGvEf5f+iFGcM6ngr6LI+gF/wecaMgnY3KdZ0XmNpUhpcHqnPN9dTwF29GlWdF/BZ3ZE+3u8KrC6qc4jfhEpq5vqWMI5GItlUhWjfLIEp2C/KmNnW0rFwrzGUtRIZ3r6JywN3IFPBz5LGqsxeSZMMwj15aviQWz67azIca6EzU21DdgycqynGMRZI7wTVbGfuPYEPib+dSWlcuGeYylSKVAHwJrAi/h03E2kxdVg4wAAIABJREFUsR7zUMLKbB59lspCH/UaiM0TlTnA8pFjPcogzhphEGFs1xnFmspru6IbDbyEzzUmpQXD7sWnz5IoUf854CN8OiyVRRfWxH7Od1fbg6Sx1GcjdsSm737nEOu5RrHuFDnOFmzGqExCv/49DQPuwuda8xRpLBnen1BAy6PPSr1Inddgv7mkszb47sCH+Bxc51PNi+33sek/jymSTxvE+Qbx52ePNoizRnhcLL76AOfgc815h/ivorx4jaUo3QJM3gfUVj7Nis4rYSrdAWXsKrL34UsOcfbFpp7+jxxitVpNMUYVRamPfrA1zmssRQ34EyUYHDgMuBufDnmaNB4peSZM0ynxIyUjFr+qf+sQ51oGcdYIC2zFZvFU5R2HOKV7nk8gU3lluwFh/Q+PPnuAAr+y1aCSxnm+g0tiUImB6WTvy4Md4tzTIM5Z+LzmsZhffolDnNIzDdpu3HD8fvgWctC2ppU0zjNhug9YxqdZhbYMNv25hkOsJxrEOdYhTrAZGa25/8XhOW37GdKYtt0Hu0G7PW3Tgf19mtUzFZZonOe7oyQLSzTJYrDaPOIW1Gln8Vj9Yoc4IVzEs8aa6qJTZeVZh2Qy6RRuOwGbsTs9bbmP5eqPb2nJmDXMPXklTK3AyU5tKotNyN6vE5xi/ZlBrGc7xfqqQaypDOZNjefgwON8mhTdHvhNf7+YHNbM8CyI8CTxVi/z5JkwTQV29WlWqexA9r4d5xTrGINYz3CK9V2DWAv3XlP+3/b4Ld42Bp8nbLGthd8r3odwXLxNy0s2zjNhquTyknXamez9+7RTrL83iPU/nGKdYhDraKdYpTmey7ffAizp06yoPAd5TwQ2jd0gr0UR2hemiV3AxMNG+CVMtwJL+TSrlLYiex+Pd4r1bINYf+oU6wSDWDdxilWaNwT4Oz7XspdJIynsA/w3Pn02AzgwVkO8lkWcQToDgrxXkYq5LG0KNiB7P092ivUMg1h/7xSrRenqnZ1ilWy8V3VN5bjwGkthvqprf+BCh8BrOD3GcNBCGKHptY70132aVXojselzj8eT3zaI81aHOAEeN4j1eKdYxcaX8VmmPKXrm2ehpUsxeH2+AvCoU8CuAxki8kyYphB/oZeUDMAmKfOoZ26xEuCbDnGCzUqAsZdWFnvbAu/hc61LZTqz52Jvj5BhxdKNgbecAs1lKkMEKwD/wKfPngNW92lWUizeV3/TIc6tDeKsASs5xPorgzgfdIhT7K0MPIHPNe820hjj5Lnc+9vA5o0GuDehjGjs4BYA/9ZocAW1OaGzPb7UvxMG5EjjLEp2XucQ5wiDOGv4FM+yqFo4HxjkEKvY8xwc+CJhil3Zea4BMwP4XL2B7Y/PYIVphEQjBYcDs/H5MlMphZyXP5D9O5iFTwI22SDWqx3i3MUgzhpwhEOsEkcv/AYHplTn5F/xud/OA/bqKZjN8fnl/yqwXmP9VEgthOVW24jfZ3OAo32albRjsPk+jnOI9QaDOOcSarvHNASb6pY3Ro5T4juacK2KfT1sJTx5SsHO2NTS6GmbCXymqyCGYlPSs6ftbsLqSWU3CJu15evZ3gW28WlW8tbA5jt5ivh1Kr5rFKtHzfAnDeJcQBpzv6tuG2yqQ9az/Z40pj97DQ58iS5etf3G4cP/RBojOVfCZupTPdszwGo+zaoMq4vTHpHjtChdXCO0N3ZFTav3medHjlN8eF4j7yeN1U69xlKc2fGD1yDue4hW4KTM3VMMntntVWhgVAxWazI8S9xfH30J7zstYj09YpwQ3i9aXSs2jhyr+PB8SjoeWMenWVH1Bn5N3L6aC6y6+Ida1B3vavsQ2M2mb3Ln9X6rjTC2IIVSyEVkdbOqEX/FRatkZTZxp432xa7IyX3o2E+F5zipjwlLracgdqGlX7d/0ADilasdD6xr2Ss5aSGUV9RgvzRY/rKeQ1jvIRbLZOUfQL+IsVqudvntiHGKv0Pxm1ruMebFw3bA+8Tppw9ZdC04INIHpFK0wXOO6yRgC59mVd552H1vzxNvWmA/bC8Cv4oUJ4QnfVZxzicsQyvp2IJwjfO4lv6ZuMmul9UJRd9i9NGeAL+NsONUyjZ6Vrl6ig7vZSSq9bF9onM38apZnmEYZ424xbeeMYzzYzQeIDUr4lct9UFgWZ9mRTUYm3LbHbczIYygtNrhfMKqRynYAfgAnwPVZOEGadgd2H+PMd5dL08YuGMV50LgsAhxQjj/Lft0IuGmIekYSDhXPK6trxNWAS27XsAvse2bOyGcYBY7m0qoCJYCr5Wu2ghZmAY85WNv7L/TH0eK9X+N45wNbBUhziWwqWC4+PYEmg2TGs8VU2cAB/o0K7ojsas6+zrYjGp/GVg7YqO9eK51PRP4vE+zpBuWT8BqhKQuxiDOkdg+BagRbtSjIsR6inGcNUKVwN4RYpV87UO8Qegdz8szfJoUndVU9GlgU8IzhTn+SwK3EP9ArBFWpOuyJKO42hL72R1ziPPY8SzjOGvAY9iP1+kLvBIh1u8ZxynF8BlsVumsZ7uQsGR72R1M9r6YDWGgTdYdzSd+VbSY1gDG4XMAZlqjWaKI8T7yaewvNEsRp2b4j4zjBJsLVMdtHrBphFglfyMI9R90De7ZKOA9svfDexAe31t06nTK+at2V+zmhPe0/ZU0ss/UrECcG+svIsT6xQhxthJnrYkYVeBeQANmU9WfcI30uBa/RTnvV8tg93TtWYBrjXZWA96hXHXrT8BnKcaU3j+l6nDsv/eFxLnIXB0h1uexL2u8HHFm0sR4YiHFcQo+gwNnEp5UlcVA4CHs2n8x2K041r6NI/7yo1n1AX5H/AOsRngysp9PsySjGK8C7okQ5wjirEfxtQixxig0NhvVzEjdfoRrZ+zrcxvwnxR/JlZv7AvSnQKh0EaMi15RH3UPI8x/jH1g1QjTLDb0aZYYGEKcqlv7R4h1B+ynqn5AGAxrLUaxsYsixCnFsiHhGupxrS56LZY/Yt/m/5+593SEnV9GKF5QJGsBL+JzQD1EeAQq5bIG9uMBxhHnF8ZXjOOsAT+MEGdv7GfYtKHkugqGE35QelyznwJW8WlWQ07Hvq2PLf4BX4vwATU6WXc4R3tiM+Ohni2VOtRVtSP2v673jhTrb4zjnEycX0JLYj/T5i8R4pTi6Ue4pnpcu98GNvdpVl2OJc4idMcu/iH9gDcjfEgNONGuL5r2TWzqHfS0LQBOdWqTxHUwtsfMHZHi7IX92IWvRop1ZWyvM3MJMzikGk7F5zo+mzAoOG97EGeQ+it0MuB3nwgfVCOM5jzIpj8a1gc4t44YLTYN9kvPSdgeI7FqkvfDdlzLuEhxAqxDWIrUKtYzIsYqxbMH8BHxr+ftZdrzeo29IfGeWHdZs+d/I33gLOLUHe/OMtiXee1qGw+s69MscXYhdsfJzyLGuQzh8aVVrDEL7uyL3WPN1yLGKcW0LuGa63Ftvwr/dShWJ84snxphMGGXBgKPR/rgDwgDrDx4jh69izCzQNI0GLtj6dXIse6M3Y3155FjtZyGq+qA1TOMcO31uMY/id/gwOHEG6j+CHXMzluGeNnVa8Rfn3kv/Ab7nYd9HXUpnj2xO2Y2ixzrRUZxvk7cudFDCYXDLGKNnaxIMfUBxuBzrZ8MfDZyewYCD0aK/zUamJW2JvB+pEAeI94jFa8KUgsIS1lKddyBzbFzeuQ4V8Rmhc8a4X19TCcYxflM5Dil2Lwqus6lw+h5Q72IU+GzRkheRjca0JaEUokxAroB26U9+xNv/ELH7UNgN8PYpRx2xub4udUh1t8bxXp85Dj7EmqyZ41zIXoNV3WfJU7Z6c62MdgPDoz1JGM2Gdb52I940y66HYzQAM9VpMYT/1eRFNeTZD+GphF/Xfu1DOKsEZLq2P7DKNZYdRakPNYkLBblcS+4Gbuqmdbl+Nu3BcCBWYP7aqTgasBpGWPbiHj1CzputxOWY5Xq+jdsjiWPVcgeNYjzFYc4V8Nm4OJPHGKV4htCeMLscU94ljBiP4sjiFPop0aYxmzizEgBthGWN23G54n3iqLjpsF+AmEBGovjyaPIyLcM4lyAT0VLi2TlKoc4pRx6E++e1XGbAuzUZJw7EcYVxIjrx03G1KkWbOdDL77NA3ZtMJbv4DPYrxXDLEqSYDFD5nsOcW5qEGeN8Fg1tp8ZxPmkQ5xSLsdjX9K7q3vYvzQY2wbEK2h0MRFm8PQlPAaPEfDH1LewxwDspjn1tE0Fdmmoh6QKLiD7sfU/DnH2wmY51T0dYt3bIM5pDnFK+WxHvBltHbfz6KTEbidWAiZEiuFuIj61G0pYMSlG4BMJtcK7siJhCqHHF/kyiy2VKLKY75D9+PKYCQDwhEGssWcCAIwyiLNGuD6JdDQKeB6fe8etdD9WbEnCtNUYn/0scZbz/oSY2csThMprHW0JTIr0mR23m9CFRLp2CNmPsQedYr3cINZTHOLsQ3jdljVWLQwkXRlKuLZ73EPG0XnV2wHEm7H2Jo7H/3rYLuix+HYLn3yMchhhLQGPL66G5vhL93Yl+zHm9b76PINYPcYrgM31xKvUuJTTbvjdRzq+Qu4FXBHps+p9hf4pzRYzeIEwv3Buk3/fnT0JNQJ6ER63XgYsEeFzRJoxy2AfXsfzTIN9eC2EUqZYRXoyDLgN+Maif/4VcGiEz5lLWFzruWb+OEs1o/uB4whT+ax9mfDO5kzi1iMXadQUg31YJBH1mGqwD4sbcz3KFKtIPfoA/w08AHwzwv7bgKPJ8EoxaznDy4FvZ9xHV7S8rhTRO4QpqFlMtAjE6XPKEutCwhKqIkWzfaT9fouM9S8s6hn/GviNwX5EymA2YVnNLO6wCKQO7culNquNMK3Iw50Z//5BwiJIIlXwK+C3eQfRrgW/+fmxNw0ClJ58meaPr5k0sCyngdsyxHqLY5wrkG2w75ccY5Vy8hwEGHO7HPvFiDLrR8ji8+6crJsSAOlJH5qfV/wD51g3pbkpdvOBjZ1j/XETcdYI86pjL7Ak5ZdCAnAfYfXbQopZ5MBrUwIg9Vibxkt53k59lcKsndRgnDXgxBzi7EPjPyI+JKx+KNKTsicA44ClzXvFWMxCQUoApEg2BF6nvuPqSvKdpnYC9dVFb+WfU5fyMIgwsKmePp1AeMIhUo8yJwCTCCtnlkLMhQ6UAEiRDCE8up5C58fTM4SVK4swnXU94BrC4/2Occ4HrqYYs29aCHOmn6XzPp0C/IjQ9yL1KmsCMI1IS4jHvCjtRKiLXNj3FV3YnewjkqV6egPbEuqOLw28RyhtPT7PoLqwNGGRlFUX/fMEwij6j3OLqGtrAZsByxN+VLxGmIWRdSqmVM9u+M3AsdIK7EP54gbgCMJUorwzKD0BEBGptrI9AWgDjonSE4vEnkpwGfAfkT9DREQkNd8D/pp3EBbOJf9sSk8ARESqq0xPAM6N1Aef4FVM4GTgwsifcQVhmoSIiEgM44BLIn/GXwj3zKT0An5JnPckPyYMaBxrsD89ARARSY/FE4CxhHvNd4EFBvvruP2MYswYiuZgYDI2nfU2sNdi+1YCICIinbFKANrtRP11QHra3gX2j9DmQhpOWEBoDs111nTg53x6HrASABER6Yx1AgCwBPBfhIqUzexvJvALQhXdyhlBWE74MXqeLriAMP/3ZLouh6gEQEREOhMjAWg3BPgKYfXMnipuLgAeINzLlrJtYmPyqEu+uCnAWYu2pYEtgDWAFYG+hKVXpwAvEYqqTMsnTBERkS7NAM5ftC1BWEhrbcLKn4MIK11OJhSyeoLwyz93eScAi/uIsFiKiIhIWc0mPK1+JO9AelK4NYVFREQkPiUAIiIiFaQEQEREpIKUAIiIiFSQEgAREZEKUgIgIiJSQUWaBijVMBQYTagGOXTRNggYmGdQIs7mEOaGTyfUN/kQeJkwn1zEhRIAiWkEsDPwWWB9QmGMFXONSKTYJhESgReA+4B7CcXQRMwpARBrmwFHArsDG5L4ylYixlZatO0CnEQokf4ccAdhGdqn8gtNUqMEQCysCHwROIbwS19EbPQilJXdGDgNeB74K/A3wgpyIk3TIEDJYnVgDKG+9S/QzV8ktg2AXwJvERKB0fmGI2WmBECasTZwMTCesKLVgHzDEamcvsDRwDjgImCtfMORMlICII0YCJwBPAMcBfTONRoR6UN4/TaO8DRuUL7hSJkoAZB67UO4yPwA6J9zLCLySX0JT+OeBfbKORYpCSUA0pP+hF8WNxLe+YtIcY0CbgbOQ4m69EAJgHRnJGEu8sk5xyEijTkBeBhYM+9ApLiUAEhX9iC8698q70BEpCmbAmMJNTlEPkUJgHTmKOAGQpleESmvJQmv747MOxApHiUA0tFJhGlFffMORERM9CNM2/1W3oFIsSgBkMV9EzgHHRciqWkBzgZOyTsQKQ5d6KXdUcCv8g5CRKL6DXBs3kFIMSgBEIDdgAvQ8SCSuhbgfFQrQNAFX0JZ32sJ7wlFJH19gctR+eDK02qA1TYQuAIY7Py5NWAi8AZhrfNZwFznGETyNIBQtncEocDWKvgunT2EcO5vg869ylICUG2/BTZy+Jwa8BBhTfO7gSeB2Q6fK1IWgwjz9nchzNvflvgJwWeAXwMnRv4cERdjCTebLNtu7lHn4yCy91VP2zvA6YSKgiJSv5GEc+cd4p+nB/g0KXe7kb2vxrpHLXVTAlCfwcAE4l1Q3gb+FdUiF8lqAOEX+iTina9vUY1VBJUAJE4JQH3OIs6FpJWwcJAqCIrYGkRYinsecc7dn7u1JD9KABKnBKBnGwDzifMrYhvHdohU0XbEeXo3D1jPsR15UALQgaYBVs+PsC/zeyewCfCI8X5F5JMeIpxrdxvvtx/wQ+N9irjSE4DurQssxPaXwzWE95Qi4qcfcBm25/JCYH3PRjjTE4AO9ASgWr6P7Xd+GXAImkcs4m0+oXz35Yb77AV8x3B/Iq70BKBrqxMG6Vn9WrgNVQ8UyVs/Qn0Nq/O6FVjNtQV+9ASgAz0BqI7jsCv8NIGwvvh8o/2JSHPmA4cSqmpa6IMWC6oMJQDV0AJ80Whf7RecD432JyLZfEx4HdBqtL+j8S1LLDlRAlANOwCjjPZ1NvCY0b5ExMajhNLeFtZEU3orQQlANRxltJ+3gJ8a7UtEbP2IsMiWBatrhhSYEoBq+JzRfn6AFvERKaqZhCTAwu5G+5ECUwKQvlUJMwCymgBcarAfEYnnQsKTuqxGE64dkjAlAOnb1Wg/Y9Cof5GiawXONdrXzkb7kYJSApC+nQz2sQC4xGA/IhLfJYSqflntaLAPKTAlAOnbwGAfdwHvGexHROJ7B5u1AiyuHVJgSgDS1kJ4l5fVbQb7EBE/dxjsY21UDyBpSgDStjIw2GA/1iuPiUhcFufsUGB5g/1IQSkBSJvFr/+5wPMG+xERP08D8wz2s7bBPqSglACkbTmDfbyKzYAiEfGzEHjdYD/LGuxDCkoJQNosHv+/arAPEfH3isE+hhrsQwpKCUDahhjsQ4v+iJTTRwb7sLiGSEEpAUibxck702AfIuJvhsE+9AQgYVbrw0sxDTDYx1yDfTRrA+AgYDPCu8iPCe81bwTuJBQoKoI+hNrp+xLKLi8FfACMBa4FxuUX2qcMJ/TpTsAqi/63CcC9hFiL9MRH3382cwz2MdBgHyIuxgK1jNtu7lHHcybZ++NM96hDDfKrgbZu4noB2COH2DraE3iRruNsA64iTMnMUx/gvwi/CruKdTrwn+T/w0Dfv42ynv+x7Eb2/hjrHrXUTQnAJ5XxArAFoepgPbEtBE5zjm9x314UQz2xvgtsnk+YDCEUhqn3O78dmwGkzdD3b6eM539MSgASpwTgk8p2ARgJvN9EjF90jLHdsU3E+R7+K6z1Av7eRKzX4j9GaCT6/i2V7fyPTQlABxoEKEXye5qbd/wHbGoe1GtZ4Jwm/m457FZqq9dxwH5N/N2BwBdsQ+mRvn8RR0oApCi2APZq8m8HA6caxtKT02h+hsV+hEFtHlqA0zP8/Rn41YLX9y/iTAmAFMWhGf/+EJMofD7LK9bNCY/VmzUK2MQmlB7p+xdxpgRAimKLjH+/BjDMIpAejCBM9coia1s9P2dLg33UQ9+/iDMlAFIUFu9wVzTYR08sVkfziBNsYl3BYB/10Pcv4kwJgBRF/4Lsw+MzPOIE6GewD69Yy9KvZYlTpEdKAERERCpICYCIiEgFKQEQERGpICUAIiIiFaQEQEREpIKUAIiIiFSQEgAREZEKUgIgIiJSQUoAREREKkgJgIiISAUpARAREakgJQAiIiIVpARARESkgpQAiIiIVJASABERkQpSAiAiIlJBSgBEREQqSAmAiIhIBSkBEBERqSAlACIiIhWkBEBERKSClACIiIhUkBIAERGRClICICIiUkFKAERERCpICYCIiEgFKQEQERGpICUAIiIiFaQEQEREpIKUAIiIiFSQEgAREZEKUgIgIiJSQUoAREREKkgJgIiISAUpARAREakgJQAiIiIVpARARESkgpQAiIiIVJASABERkQpSAiAiIlJBSgBEREQqSAmAiIhIBSkBEBERqSAlACIiIhWkBEBERKSClACIiIhUkBIAERGRClICICIiUkFKAERERCpICYCIiEgFKQEQERGpICUAIiIiFaQEQEREpIKUAIiIiFSQEgAREZEKUgIgIiJSQUoAREREKkgJgIiISAUpARAREakgJQAiIiIVpARARESkgpQAiIiIVJASABERkQpSAiAiIlJBSgBEREQqSAmAiIhIBSkBEBERqSAlACIiIhWkBEBERKSClACIiIhUkBIAERGRClICICIiUkFKAERERCpICYCIiEgFKQEQERGpICUAUhQLC7IPj8/wiBOgrSD7qEdZ+rUscYr0SAmAFMUHBvt4z2AfPbGI832DfdSjLH0K5Ym1TN+/SLeUAEhRvJTx76dic3HuyfvARxn38aJFIE6f4xWrvn8RZ0oApCj+nvHvb8LncfXCRZ+VRda21uteYHqGv58G3GcTSo/0/Ys4UwIgRXETMK7Jv20DfmMYS0/OovmbzXPALYaxdGcecE6Gv/8tMN8olp7o+xdxpgRAimIh8A1gQRN/OwZ42jacbj0L/K6Jv2sFTsJ3ENgvgfFN/N3LwNnGsXRH37+IMyUAUiT3AF+nsQvkDcC/xwmnW98Cbmzg318InAjcHyecLk0H9gfebeBv3ln0NzOjRNQ1ff8i0rSxQC3jtpt71PGcSfb+ONM9atgbeLuHuOYBPwV65xBfu97AzxbF0l2sE4E9c4qx3UrA3fT8fd8JrJhTjO30/dso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")}),
        Documentation(info = "<html><head></head><body>This is the hydrogen heating modell containing the following devices:&nbsp;<div><ul><li>Internal Combustion Engine<!--EndFragment-->&nbsp; Combined Heat and Power (ICE CHP)</li><li>Heat Pump (HP)</li><li>Solar Thermal Collector (ST)</li><li>Thermal Energy Storage (TES)</li></ul>Note that only the ST is possible to be removed. The control logic must have all other devices.</div><div><br></div><div>The hydrogen heating model has a sligtly diffrent Main Controller!</div><div><br></div><div><b>Default control:</b></div><div>The standard control system is designed so that the CHP takes over most of the heat load. Peak loads are balanced with the heat pump and surpluses are stored in the tank.&nbsp;</div></body></html>"));
    end HeatingSystemH2;

    model TES "Thermal Energy Storage"
      replaceable package Medium = Buildings.Media.Water "Fluid stored in the tank";
      parameter Modelica.Units.SI.Temperature T_supply = 363.15 "Nominal heating water supply temperature";
      parameter Modelica.Units.SI.Temperature T_return = 293.15 "Nominal heating water return temperature";
      parameter Modelica.Units.SI.Volume V_Tank = 3 "Volume of the tank";
      parameter Modelica.Units.SI.Length hTan = 3 "Height of tank (without insulation)";
      parameter Modelica.Units.SI.Length dIns = 0.3 "Thickness of insulation";
      parameter Modelica.Units.SI.ThermalConductivity kIns = 0.04 "Specific heat conductivity of insulation";
      Modelica.Units.SI.HeatFlowRate Q_loss "Heat losses due to Conduction";
      final parameter Modelica.Units.SI.SpecificHeatCapacity cp_default = Medium.specificHeatCapacityCp(Medium.setState_pTX(Medium.p_default, Medium.T_default, Medium.X_default)) "Specific heat capacity of medium at default medium state";
      final parameter Modelica.Units.SI.Density d_default = Medium.d_const "Constant density of medium";
      final parameter Modelica.Units.SI.Mass m = V_Tank*d_default "Mass of the medium";
      final parameter Modelica.Units.SI.Energy E_max = cp_default*m*(T_supply - T_return) "Max. thermal energy to be stored";
      Modelica.Blocks.Interfaces.RealOutput T_tank(final quantity = "Temperature", final unit = "K") "Current Tank Temperature" annotation(
        Placement(transformation(origin = {92, 36}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 0}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealInput Q_flow(final quantity = "Heat Flow", final unit = "W") "Heat Flow in by heat generation" annotation(
        Placement(transformation(origin = {-110, -70}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -80}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealOutput E_tank(final quantity = "Energy", final unit = "J") "Stored heat in the tank" annotation(
        Placement(transformation(origin = {90, -22}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -80}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput SOC "State of charge" annotation(
        Placement(transformation(origin = {88, 74}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 78}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Continuous.Integrator E_tank_int "calculation of energy stored with integration" annotation(
        Placement(transformation(origin = {-18, -2}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.RealExpression Q_lossExpression(y = -Q_loss) annotation(
        Placement(transformation(origin = {-106, 40}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Math.MultiSum multiSum(nu = 2) annotation(
        Placement(transformation(origin = {-54, -2}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealInput T_amb(final quantity = "Temperature", final unit = "K") annotation(
        Placement(transformation(origin = {-108, 0}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 0}, extent = {{-20, -20}, {20, 20}})));
    equation
      Q_loss = (kIns*V_Tank)/(dIns*hTan)*(T_tank - T_amb);
      SOC = (T_tank - T_return)/(T_supply - T_return);
      T_tank = E_tank/(cp_default*m) + T_return annotation(
        Documentation(info = "<html><head></head><body>Important note: Step length must be 3600s (1h)</body></html>"));
      connect(E_tank_int.y, E_tank) annotation(
        Line(points = {{-6, -2}, {18, -2}, {18, -22}, {90, -22}}, color = {0, 0, 127}));
      connect(Q_flow, multiSum.u[1]) annotation(
        Line(points = {{-110, -70}, {-84, -70}, {-84, -2}, {-64, -2}}, color = {0, 0, 127}));
      connect(multiSum.y, E_tank_int.u) annotation(
        Line(points = {{-42, -2}, {-30, -2}}, color = {0, 0, 127}));
      connect(Q_lossExpression.y, multiSum.u[2]) annotation(
        Line(points = {{-94, 40}, {-84, 40}, {-84, -2}, {-64, -2}}, color = {0, 0, 127}));
      annotation(
        Placement(transformation(origin = {-104, -92}, extent = {{-10, -10}, {10, 10}})),
        defaultComponentName = "TES",
        Icon(graphics = {Bitmap(origin = {8, 0}, extent = {{-132, -110}, {132, 110}}, imageSource = ""), Text(origin = {-6, 16}, textColor = {0, 0, 255}, extent = {{-149, -114}, {151, -154}}, textString = "%name")}),
        Documentation(info = "<html><head></head><body>The thermal energy storage (TES) is heat flow based.<div>Energybalance is calculated to calculated current storage temperature and SOC.</div></body><body>
    <p>E(t) = &int;<sub>0</sub><sup>E<sub>tes,max</sub></sup> (Q̇<sub>th,in</sub>(t) - Q̇<sub>th,out</sub>(t) - Q̇<sub>loss,in</sub>(t)) dt,</p>
    <p>E<sub>tes,max</sub> = m &middot; c<sub>p</sub> &middot; ΔT,</p>
    <p>Q̇<sub>loss</sub> = <sup>k</sup>&frasl;<sub>d</sub> &middot; A &middot; ΔT,</p>
    <p>SOC = <sup>E(t)</sup>&frasl;<sub>E<sub>tes,max</sub></sub>.</p>
</body></html>"),
        experiment(StartTime = 0, StopTime = 31536000, Tolerance = 1e-6, Interval = 3600));
    end TES;

    model SolarThermal "Solar Thermal power plant"
      replaceable package Medium = FreeFluids.Pipes.Examples.Glycol47 "Antifreeze Medium inside the Solar Collector (default = Glycol47)";
      parameter Modelica.Units.SI.Temperature T_cold_in = 313.15 "Return Temperature of the fluid";
      parameter Modelica.Units.SI.Area area = 10 "Total area of panels in the simulation";
      parameter Integer nSeg = 9 "Number of segments used to discrete the collector model";
      final parameter Buildings.Fluid.SolarCollectors.Data.GlazedFlatPlate.FP_GuangdongFSPTY95 datSolCol "Solar Collector Data" annotation(
        Placement(transformation(extent = {{60, 60}, {80, 80}})));
      parameter Real eta_hex = 0.8 "Efficency of heat exchanger";
      parameter Modelica.Units.SI.Angle azi = 0 "Surface azimuth (0 for south-facing; -90 degree for east-facing; +90 degree for west facing" annotation(
        Evaluate = true,
        Dialog(group = "Orientation"));
      parameter Modelica.Units.SI.Angle til = 0.7853981633974483 "Surface tilt (0 for horizontally mounted collector)" annotation(
        Evaluate = true,
        Dialog(group = "Orientation"));
      parameter Real rho = 0.2 "Ground reflectance" annotation(
        Evaluate = true,
        Dialog(group = "Orientation"));
      Buildings.Fluid.SolarCollectors.ASHRAE93 solCol(redeclare package Medium = Medium, energyDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial, nColType = Buildings.Fluid.SolarCollectors.Types.NumberSelection.Area, nPanels = 5, nSeg = nSeg, per = datSolCol, shaCoe = 0, sysConfig = Buildings.Fluid.SolarCollectors.Types.SystemConfiguration.Series, use_shaCoe_in = false, totalArea = area, til = til, azi = azi, rho = rho) "Concentrating solar collector model" annotation(
        Placement(transformation(origin = {-28, 10}, extent = {{4, -20}, {24, 0}})));
      Buildings.Fluid.Sources.Boundary_pT sin(redeclare package Medium = Medium, use_p_in = false, p(displayUnit = "Pa") = 101325, nPorts = 1) "Inlet for fluid flow" annotation(
        Placement(transformation(origin = {16, 10}, extent = {{92, -20}, {72, 0}})));
      Buildings.Fluid.Sensors.TemperatureTwoPort TOut(redeclare package Medium = Medium, T_start(displayUnit = "K"), m_flow_nominal = solCol.m_flow_nominal) "Temperature sensor" annotation(
        Placement(transformation(origin = {-36, 10}, extent = {{38, -20}, {58, 0}})));
      Buildings.Fluid.Sensors.TemperatureTwoPort TIn(redeclare package Medium = Medium, m_flow_nominal = solCol.m_flow_nominal) "Temperature sensor" annotation(
        Placement(transformation(origin = {-16, 10}, extent = {{-32, -20}, {-12, 0}})));
      Buildings.Fluid.Sensors.MassFlowRate senMasFlo(redeclare package Medium = Medium) annotation(
        Placement(transformation(origin = {70, 0}, extent = {{-10, 10}, {10, -10}}, rotation = -0)));
      Buildings.Fluid.Sensors.SpecificEnthalpyTwoPort hIn(redeclare package Medium = Medium, m_flow_nominal = solCol.m_flow_nominal) annotation(
        Placement(transformation(origin = {-66, 0}, extent = {{-10, 10}, {10, -10}}, rotation = -0)));
      Buildings.Fluid.Sensors.SpecificEnthalpyTwoPort hOut(redeclare package Medium = Medium, m_flow_nominal = solCol.m_flow_nominal) annotation(
        Placement(transformation(origin = {40, 0}, extent = {{-10, 10}, {10, -10}}, rotation = -0)));
      Modelica.Blocks.Interfaces.RealOutput Q(final quantity = "Heat Flow", final unit = "W") "Heat added to Medium" annotation(
        Placement(transformation(origin = {96, -74}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {100, -70}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Math.Product product1 annotation(
        Placement(transformation(origin = {64, -74}, extent = {{-6, -6}, {6, 6}})));
      Modelica.Blocks.Sources.Constant Hex(k = eta_hex) "Heat exchanger" annotation(
        Placement(transformation(origin = {12, -84}, extent = {{-10, -10}, {10, 10}})));
      Buildings.Fluid.Sources.MassFlowSource_T boundary(m_flow = datSolCol.A*datSolCol.mperA_flow_nominal, redeclare package Medium = Medium, nPorts = 1, T = T_cold_in) annotation(
        Placement(transformation(origin = {-104, 0}, extent = {{-10, -10}, {10, 10}})));

      model Qq_Ent_Controller "Modified Heat Transfer Block"
        extends Modelica.Icons.RoundSensor;
        Modelica.Blocks.Interfaces.RealInput m_flow annotation(
          Placement(visible = true, transformation(origin = {-108, 80}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-88, 80}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
        Modelica.Blocks.Interfaces.RealInput h2 annotation(
          Placement(visible = true, transformation(origin = {-110, 0}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-90, 0}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
        Modelica.Blocks.Interfaces.RealInput h1 annotation(
          Placement(visible = true, transformation(origin = {-106, -76}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-88, -80}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
        Modelica.Blocks.Interfaces.RealOutput Q_flow(final quantity = "Heat Flow", final unit = "W") "Heat Flow" annotation(
          Placement(visible = true, transformation(origin = {98, -38}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {110, -40}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
        Boolean x;
      initial equation
        x = true;
      algorithm
        when m_flow*(h2 - h1) <= 0 then
          x := true;
        end when;
        when m_flow*(h2 - h1) > 0 then
          x := false;
        end when;
      equation
        if x then
          Q_flow = 0;
        else
          Q_flow = m_flow*(h2 - h1);
        end if;
        annotation(
          defaultComponentName = "HeatTransfer",
          Icon(graphics = {Line(origin = {100.681, -70.2935}, points = {{-2, 32}, {-30, 72}}, color = {0, 0, 127}), Text(origin = {-52, -138}, extent = {{102, 120}, {0, 90}}, textString = "Q & q"), Text(origin = {-6, 16}, textColor = {0, 0, 255}, extent = {{-149, -114}, {151, -154}}, textString = "%name"), Line(origin = {83.5452, -72.1544}, points = {{16, 114}, {-12, 74}}, color = {0, 0, 127})}, coordinateSystem(extent = {{-100, -100}, {100, 100}})));
      end Qq_Ent_Controller;

      SolarThermal.Qq_Ent_Controller HeatTransfer annotation(
        Placement(transformation(origin = {12, -44}, extent = {{-10, -10}, {10, 10}})));
      Buildings.BoundaryConditions.WeatherData.Bus weaBus annotation(
        Placement(transformation(origin = {-58, 68}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {-58, 68}, extent = {{-10, -10}, {10, 10}})));
    equation
      connect(solCol.port_b, TOut.port_a) annotation(
        Line(points = {{-4, 0}, {2, 0}}, color = {0, 127, 255}));
      connect(TIn.port_b, solCol.port_a) annotation(
        Line(points = {{-28, 0}, {-24, 0}}, color = {0, 127, 255}));
      connect(weaBus, solCol.weaBus) annotation(
        Line(points = {{-48, 40}, {-34, 40}, {-34, 9.6}, {-24, 9.6}}, color = {255, 204, 51}));
      connect(hIn.port_b, TIn.port_a) annotation(
        Line(points = {{-56, 0}, {-48, 0}}, color = {0, 127, 255}));
      connect(TOut.port_b, hOut.port_a) annotation(
        Line(points = {{22, 0}, {30, 0}}, color = {0, 127, 255}));
      connect(hOut.port_b, senMasFlo.port_a) annotation(
        Line(points = {{50, 0}, {60, 0}}, color = {0, 127, 255}));
      connect(senMasFlo.port_b, sin.ports[1]) annotation(
        Line(points = {{80, 0}, {88, 0}}, color = {0, 127, 255}));
      connect(Hex.y, product1.u2) annotation(
        Line(points = {{24, -84}, {52, -84}, {52, -78}, {56, -78}}, color = {0, 0, 127}));
      connect(product1.y, Q) annotation(
        Line(points = {{70, -74}, {96, -74}}, color = {0, 0, 127}));
      connect(boundary.ports[1], hIn.port_a) annotation(
        Line(points = {{-94, 0}, {-76, 0}}, color = {0, 127, 255}));
      connect(senMasFlo.m_flow, HeatTransfer.m_flow) annotation(
        Line(points = {{70, -10}, {70, -26}, {-2, -26}, {-2, -36}, {4, -36}}, color = {0, 0, 127}));
      connect(hOut.h_out, HeatTransfer.h2) annotation(
        Line(points = {{40, -10}, {40, -22}, {-12, -22}, {-12, -44}, {4, -44}}, color = {0, 0, 127}));
      connect(hIn.h_out, HeatTransfer.h1) annotation(
        Line(points = {{-66, -10}, {-66, -52}, {4, -52}}, color = {0, 0, 127}));
      connect(HeatTransfer.Q_flow, product1.u1) annotation(
        Line(points = {{24, -48}, {42, -48}, {42, -70}, {56, -70}}, color = {0, 0, 127}));
      annotation(
        defaultComponentName = "ST",
        __Dymola_Commands(file = "modelica://Buildings/Resources/Scripts/Dymola/Fluid/SolarCollectors/Examples/Concentrating.mos" "Simulate and plot"),
        experiment(Tolerance = 1e-06, StopTime = 31536000, StartTime = 0, Interval = 3600),
        Icon(graphics = {Bitmap(origin = {1, -4}, extent = {{-93, -98}, {93, 98}}, imageSource = ""), Text(textColor = {0, 0, 255}, extent = {{-151, 147}, {149, 107}}, textString = "%name")}),
        Documentation(info = "<html><head></head><body><div>This model contains a glazed flat plate solar collector from the Modelica Buildings library (Buildings.Fluid.SolarCollectors.ASHRAE93).</div><div>The default dataset is also from this library (Buildings.Fluid.SolarCollectors.GlazedFlatPlate.FP_GuangdongFSPTY95).</div><div><br></div><div>The enthalpy difference is used to calculate the heat transfer.&nbsp;</div><div>A simple efficiency based heat exchanger is also considered as the fluid inside the plate is an antifreeze fluid.</div></body></html>"));
    end SolarThermal;

    model Pump
      parameter Modelica.Units.SI.Temperature T_supply = 333.15 "Nominal heating water supply temperature";
      parameter Modelica.Units.SI.Temperature T_return = 318.15 "Nominal heating water return temperature";
      parameter Real eta_hy = 0.85 "hydraulic losses in the pump; typically from 60% to 90%";
      parameter Real eta_motor = 0.85 "pump's motor, typically in the range of 70% to 95%";
      parameter Modelica.Units.SI.PressureDifference deltap = 5 "Pressure diffrence, typically in the range of 2 to 7 bar ";
      replaceable package MediumPump = Buildings.Media.Water "Fluid stored in the tank";
      final parameter Modelica.Units.SI.Density d = MediumPump.d_const "Water density";
      final parameter Modelica.Units.SI.SpecificHeatCapacity cp_default = MediumPump.specificHeatCapacityCp(MediumPump.setState_pTX(MediumPump.p_default, MediumPump.T_default, MediumPump.X_default)) "Specific heat capacity of medium at default medium state";
      Modelica.Blocks.Interfaces.RealInput Q_dem(unit = "W") "Heat demand" annotation(
        Placement(transformation(origin = {-110, 0}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-110, 0}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealOutput P_el_pump(unit = "W") "electrical power consumed by pumps" annotation(
        Placement(transformation(origin = {108, 0}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {108, 0}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Units.SI.MassFlowRate m = Q_dem/(cp_default*(T_supply - T_return));
    equation
      P_el_pump = -1*(m*deltap)/(d*eta_hy*eta_motor);
      annotation(
        Icon(graphics = {Text(textColor = {0, 0, 255}, extent = {{-151, 147}, {149, 107}}, textString = "%name"), Bitmap(origin = {8, 0}, rotation = -90, extent = {{81, 87}, {-81, -87}}, imageSource = "")}),
        Documentation(info = "<html><head></head><body><!--StartFragment-->In order to transport the hot water in a closed circuit, the electrical power for the pumps must
also be taken into account:<!--EndFragment--></body><body>
    <p>P<sub>pump</sub> = <sup>V̇ &middot; Δp</sup>&frasl;<sub>η<sub>hyd</sub> &middot; η<sub>mot</sub></sub>,</p>
</body></html>"));
    end Pump;

    model Heatpump_Ruhnau "Air source heat pump"
      parameter Boolean floor_hea = false "If true floor heating";
      parameter Boolean ASHP = true "True = Air source heat pump";
      parameter Boolean GSHP = false "True = Ground source heat pump";
      parameter Modelica.Units.SI.Temperature T_ground = 283.15 "Ground temperature for ground source heat pump";
      parameter Boolean WSHP = false "True = Ground source heat pump";
      parameter Modelica.Units.SI.Temperature T_water = 283.15 "Water temperature for water source heat pump";
      Real DeltaT;
      Real COP;
      Modelica.Units.SI.Temperature T_sink "Sink temperature";
      Modelica.Units.SI.Temperature T_source "Source temperature";
      Modelica.Blocks.Interfaces.RealOutput QCon_flow(final quantity = "HeatFlowRate", final unit = "W") annotation(
        Placement(transformation(extent = {{100, 80}, {120, 100}}), iconTransformation(extent = {{100, 80}, {120, 100}})));
      Modelica.Blocks.Interfaces.RealOutput P(final quantity = "Power", final unit = "W") annotation(
        Placement(transformation(extent = {{100, -10}, {120, 10}}), iconTransformation(extent = {{100, -10}, {120, 10}})));
      Modelica.Blocks.Interfaces.RealOutput QEva_flow(final quantity = "HeatFlowRate", final unit = "W") annotation(
        Placement(transformation(extent = {{100, -100}, {120, -80}}), iconTransformation(extent = {{100, -100}, {120, -80}})));
      Modelica.Blocks.Interfaces.RealInput Q_dem(unit = "W") annotation(
        Placement(transformation(origin = {-108, -2}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-108, -2}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealInput T_amb(unit = "K") annotation(
        Placement(transformation(origin = {-108, 72}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-108, 80}, extent = {{-20, -20}, {20, 20}})));
    algorithm
      DeltaT := T_sink - T_source;
      if DeltaT <= 15 then
        DeltaT := 15;
      end if;
    equation
      if floor_hea then
        T_sink = -0.5*(T_amb - 273.15) + 303.15;
// Formula is in Celcius!
      else
        T_sink = -1*(T_amb - 273.15) + 333.15;
// Formula is in Celcius!
      end if;
      if ASHP then
        T_source = T_amb;
        COP = 6.08 - 0.09*DeltaT + 0.0005*DeltaT*DeltaT;
      elseif GSHP then
        T_source = T_ground;
        COP = 10.29 - 0.21*DeltaT + 0.0012*DeltaT*DeltaT;
      else
        T_source = T_water;
        COP = 9.97 - 0.20*DeltaT + 0.0012*DeltaT*DeltaT;
      end if;
      P = Q_dem/COP;
      QCon_flow = Q_dem;
      QEva_flow = -Q_dem;
      annotation(
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics = {Rectangle(lineColor = {0, 0, 255}, fillColor = {95, 95, 95}, pattern = LinePattern.None, fillPattern = FillPattern.Solid, extent = {{-70, 80}, {70, -80}}), Rectangle(fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, extent = {{-56, 68}, {58, 50}}), Rectangle(fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, extent = {{-56, -52}, {58, -70}}), Rectangle(lineColor = {0, 0, 255}, fillColor = {0, 0, 255}, pattern = LinePattern.None, fillPattern = FillPattern.Solid, extent = {{-103, 64}, {98, 54}}), Rectangle(lineColor = {0, 0, 255}, fillColor = {255, 0, 0}, pattern = LinePattern.None, fillPattern = FillPattern.Solid, extent = {{-2, 54}, {98, 64}}), Rectangle(lineColor = {0, 0, 255}, fillColor = {0, 0, 255}, pattern = LinePattern.None, fillPattern = FillPattern.Solid, extent = {{-101, -56}, {100, -66}}), Rectangle(lineColor = {0, 0, 127}, fillColor = {0, 0, 127}, pattern = LinePattern.None, fillPattern = FillPattern.Solid, extent = {{-100, -66}, {0, -56}}), Polygon(fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, points = {{-42, 0}, {-52, -12}, {-32, -12}, {-42, 0}}), Polygon(fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, points = {{-42, 0}, {-52, 10}, {-32, 10}, {-42, 0}}), Rectangle(fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, extent = {{-44, 50}, {-40, 10}}), Rectangle(fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, extent = {{-44, -12}, {-40, -52}}), Rectangle(fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, extent = {{38, 50}, {42, -52}}), Ellipse(fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, extent = {{18, 22}, {62, -20}}), Polygon(fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, points = {{40, 22}, {22, -10}, {58, -10}, {40, 22}}), Line(points = {{0, 68}, {0, 90}, {90, 90}, {100, 90}}, color = {0, 0, 255}), Line(points = {{0, -70}, {0, -90}, {100, -90}}, color = {0, 0, 255}), Line(points = {{62, 0}, {100, 0}}, color = {0, 0, 255}), Text(textColor = {0, 0, 255}, extent = {{-151, 147}, {149, 107}}, textString = "%name")}),
        Documentation(info = "<html><head></head><body><p>Air source heat pump (ASHP) &lt; 25 kW</p><p>Ground source heat pump (GSHP) typically between 6-130 kW</p><p>Water source heat pump (WSHP) typically between 10-120 kW</p><p>
    </p><p>COP = 
    <br>ASHP: { 6.08 - 0.09 · ΔT + 0.0005 · ΔT<sup>2</sup>,<br>
    <br>GSHP: 10.29 - 0.21 · ΔT + 0.0012 · ΔT<sup>2</sup>,<br>
    <br>WSHP: 9.97 - 0.20 · ΔT + 0.0012 · ΔT<sup>2</sup> }</p>
    
    <p>ΔT = T<sub>sink</sub> - T<sub>source</sub></p>
    
    <p>T<sub>sink</sub> = 
    <br>40°C - 1.0 · T<sub>amb</sub>, radiator heating,<br>
    <br>30°C - 0.5 · T<sub>amb</sub>, floor heating</p><h4 style=\"font-family: 'MS Shell Dlg 2'; font-size: 11.999999046325684px;\">References</h4><div><!--StartFragment-->Ruhnau, O., Hirth, L., and Praktiknjo, A. “Time series of heat demand and heat pump efficiency
for energy system modeling”. In: Scientific Data 6.1 (Oct. 1, 2019). Publisher: Nature Publishing
Group, p. 189. issn: 2052-4463. doi: 10.1038/s41597-019-0199-y<!--EndFragment-->&nbsp;&nbsp;</div><div><br></div>
    
    
    </body></html>"),
        experiment(StartTime = 0, StopTime = 1, Tolerance = 1e-6, Interval = 0.002));
    end Heatpump_Ruhnau;

    model mainCon "Main Controller where PHG = ICE CHP and SHG = HP"
      extends Modelica.Blocks.Icons.Block;
      parameter Boolean mod = true "Modualtion of CHP";
      parameter Real SOCmin = 0.1 "min. value of SOC";
      parameter Real SOCmax = 1 - SOCmin "Max. value of SOC";
      parameter Modelica.Units.SI.Power P_nom_phg(displayUnit = "kW") = 7000 "Nominal thermal Power primary heat generator";
      parameter Modelica.Units.SI.Power P_nom_shg(displayUnit = "kW") = 3000 "Nominal thermal Power secondary heat generator";
      parameter Modelica.Units.SI.Power P_el_thr(displayUnit = "kW") = 25000 "Minimum electrical demand threshold for CHP";
      Modelica.Blocks.Interfaces.RealInput Q_dem(unit = "W") "Heat demand" annotation(
        Placement(transformation(origin = {-98, 86}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 120}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.BooleanInput dis "discharging singal" annotation(
        Placement(transformation(origin = {-96, 20}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -40}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealInput P_phg(unit = "W") "Generated power of primary heat genearator" annotation(
        Placement(transformation(origin = {-98, 52}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 40}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealInput P_shg(min = 0, unit = "W") "Generated power of secondary heat genearator" annotation(
        Placement(transformation(origin = {-96, -18}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 0}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealInput P_tes(unit = "J") "Stored power in the TES" annotation(
        Placement(transformation(origin = {-96, -52}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -80}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealInput P_ST(unit = "W") "Power from Solar Thermal " annotation(
        Placement(transformation(origin = {-96, -80}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -120}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealInput Z(unit = "1") "Minimal Modulation of PHG" annotation(
        Placement(transformation(origin = {-100, 120}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 80}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.BooleanOutput P_phg_on "On Off PHG" annotation(
        Placement(transformation(origin = {280, 44}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 70}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput Q_tes(unit = "W") "Heat flow in (> 0) and out (< 0) of TES" annotation(
        Placement(transformation(origin = {282, 0}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 0}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput P_SHG_need(unit = "W") "Heat demand needed from SHG" annotation(
        Placement(transformation(origin = {300, 80}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 20}, extent = {{-10, -10}, {10, 10}})));
      Boolean sz1 "Szenario 1 TES --> U";
      Boolean sz2 "Szenario 2 PHG, SHG --> U";
      Boolean sz3 "Szenario 3 PHG --> U, TES";
      Boolean sz4 "Szenario 4 SHG --> U";
      Boolean standby "standby";
      Modelica.Blocks.Interfaces.RealOutput Q_sup(unit = "W") annotation(
        Placement(transformation(origin = {282, -34}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -20}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealInput P_el_dem(unit = "W") "Electrical Demand" annotation(
        Placement(transformation(origin = {-88, -104}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -158}, extent = {{-20, -20}, {20, 20}})));
    protected
      Modelica.Units.SI.Power Q_tes_internal1 "internal parameter for Q_tes";
      Modelica.Units.SI.Power Q_tes_internal2 "internal parameter for Q_tes";
      Modelica.Units.SI.Power Q_tes_internal3 "internal parameter for Q_tes";
      Modelica.Units.SI.Power P_SHG_need_internal "internal parameter for P_SHG_need";
    initial equation
      sz1 = false;
      sz2 = false;
      sz2 = false;
      sz3 = false;
      sz4 = true;
      standby = false;
    algorithm
// Szenario 1 TES --> U
      when dis then
        sz1 := true;
        sz2 := false;
        sz2 := false;
        sz3 := false;
        sz4 := false;
        standby := false;
      end when;
// Szenario 2 PHG, SHG --> U
      when P_el_dem > P_el_thr and Q_dem > 0.01 and Q_dem > P_nom_phg and not dis then
        sz1 := false;
        sz2 := false;
        sz2 := true;
        sz3 := false;
        sz4 := false;
        standby := false;
      end when;
// Szenario 3 PHG --> U, TES
      when P_el_dem > P_el_thr and Q_dem > 0.01 and Q_dem > Z*P_nom_phg and Q_dem < P_nom_phg and not dis then
        sz1 := false;
        sz2 := false;
        sz2 := false;
        sz3 := true;
        sz4 := false;
        standby := false;
      end when;
//Szenario 4 SHG --> U
      when Q_dem > 0.01 and Q_dem < Z*P_nom_phg and not dis then
        sz1 := false;
        sz2 := false;
        sz2 := false;
        sz3 := false;
        sz4 := true;
        standby := false;
      end when;
      when Q_dem < 0 then
        sz1 := false;
        sz2 := false;
        sz2 := false;
        sz3 := false;
        sz4 := false;
        standby := true;
      end when;
// In case of an error calculation that might accour this statment makes sure that P_SHG_need is > 0
      if P_SHG_need_internal < 0 then
        P_SHG_need := 0;
        Q_tes_internal3 := -P_SHG_need_internal;
      else
        P_SHG_need := P_SHG_need_internal;
        Q_tes_internal3 := 0;
      end if;
// If the solar thermal provides heat it is always stored in the TES
      if P_ST > 0 then
        Q_tes_internal1 := P_ST;
      end if;
    equation
      if sz1 then
// Szenario 1 TES --> U
        P_phg_on = false;
        Q_tes_internal2 = 0 - Q_dem;
        P_SHG_need_internal = 0;
      elseif sz2 then
// Szenario 2 PHG, SHG --> U
        P_phg_on = true;
        Q_tes_internal2 = 0;
        P_SHG_need_internal = Q_dem - P_nom_phg;
      elseif sz3 then
// Szenario 3 PHG --> U, TES
        P_phg_on = true;
        Q_tes_internal2 = P_phg + 0 - Q_dem;
        P_SHG_need_internal = 0;
      elseif sz4 then
//Szenario 4 SHG --> U
        P_phg_on = false;
        Q_tes_internal2 = 0;
        P_SHG_need_internal = -1*(-Q_dem);
      else
//standby
        P_phg_on = false;
        Q_tes_internal2 = 0;
        P_SHG_need_internal = 0;
      end if;
//calculation of Heat flow in TES and Q_supply
      Q_tes = Q_tes_internal2 + Q_tes_internal1;
      Q_sup = P_shg + P_phg + (-Q_tes);
      annotation(
        Diagram(coordinateSystem(extent = {{-120, 140}, {320, -100}})),
        experiment(StartTime = 0, StopTime = 1, Tolerance = 1e-06, Interval = 0.002),
        Documentation(info = "<html><head></head><body>This is the main controller designed for the scenario where the primary heat generator (PHG) is an ICE CHP and the secondary heat generator (SHG) is a heat pump (HP) or boiler.&nbsp;<p></p>
    <p align=\"center\">
    <img alt=\"Schematics of the controll logic\" src=\"modelica://Energysystem/Documentation/HeatingSystemControlLogic.png\">
    </p>
    <p></p></body></html>"));
    end mainCon;

    model mainConH2 "Main Controller where PHG = ICE CHP and SHG = HP"
      extends Modelica.Blocks.Icons.Block;
      parameter Boolean mod = true "Modualtion of CHP";
      parameter Real SOCmin = 0.1 "min. value of SOC";
      parameter Real SOCmax = 1 - SOCmin "Max. value of SOC";
      parameter Modelica.Units.SI.Power P_nom_phg(displayUnit = "kW") = 7000 "Nominal thermal Power primary heat generator";
      parameter Modelica.Units.SI.Power P_nom_shg(displayUnit = "kW") = 3000 "Nominal thermal Power secondary heat generator";
      parameter Modelica.Units.SI.Power P_el_thr(displayUnit = "kW") = 25000 "Minimum electrical demand threshold for CHP";
      Modelica.Blocks.Interfaces.RealInput Q_dem(unit = "W") "Heat demand" annotation(
        Placement(transformation(origin = {-98, 86}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-122, 154}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.BooleanInput dis "discharging singal" annotation(
        Placement(transformation(origin = {-96, 20}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-122, -6}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealInput P_phg(unit = "W") "Generated power of primary heat genearator" annotation(
        Placement(transformation(origin = {-98, 52}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-122, 74}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealInput P_shg(min = 0, unit = "W") "Generated power of secondary heat genearator" annotation(
        Placement(transformation(origin = {-96, -18}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-122, 34}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealInput P_tes(unit = "J") "Stored power in the TES" annotation(
        Placement(transformation(origin = {-96, -52}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-122, -46}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealInput P_ST(unit = "W") "Power from Solar Thermal " annotation(
        Placement(transformation(origin = {-96, -80}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-122, -86}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealInput Z(unit = "1") "Minimal Modulation of PHG" annotation(
        Placement(transformation(origin = {-100, 120}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-122, 114}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.BooleanOutput P_phg_on "On Off PHG" annotation(
        Placement(transformation(origin = {280, 44}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 70}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput Q_tes(unit = "W") "Heat flow in (> 0) and out (< 0) of TES" annotation(
        Placement(transformation(origin = {282, 0}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 0}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput P_SHG_need(unit = "W") "Heat demand needed from SHG" annotation(
        Placement(transformation(origin = {300, 80}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 20}, extent = {{-10, -10}, {10, 10}})));
      Boolean sz1 "Szenario 1 TES --> U";
      Boolean sz2 "Szenario 2 PHG, SHG --> U";
      Boolean sz3 "Szenario 3 PHG --> U, TES";
      Boolean sz4 "Szenario 4 SHG --> U";
      Boolean standby "standby";
      Modelica.Blocks.Interfaces.RealOutput Q_sup(unit = "W") annotation(
        Placement(transformation(origin = {282, -34}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -20}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.BooleanInput CHPoff "CHP off if run out of Hydrogen" annotation(
        Placement(transformation(origin = {-86, -112}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-122, -126}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealInput P_el_dem(unit = "W") "Electrical Demand" annotation(
        Placement(transformation(origin = {-82, -140}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-122, -166}, extent = {{-20, -20}, {20, 20}})));
    protected
      Modelica.Units.SI.Power Q_tes_internal1 "internal parameter for Q_tes";
      Modelica.Units.SI.Power Q_tes_internal2 "internal parameter for Q_tes";
      Modelica.Units.SI.Power Q_tes_internal3 "internal parameter for Q_tes";
      Modelica.Units.SI.Power P_SHG_need_internal "internal parameter for P_SHG_need";
    initial equation
      sz1 = false;
      sz2 = false;
      sz2 = false;
      sz3 = false;
      sz4 = true;
      standby = false;
    algorithm
// Szenario 1 TES --> U
      when dis then
        sz1 := true;
        sz2 := false;
        sz2 := false;
        sz3 := false;
        sz4 := false;
        standby := false;
      end when;
// Szenario 2 PHG, SHG --> U
      when P_el_dem > P_el_thr and Q_dem > 0.01 and Q_dem > P_nom_phg and not dis then
        sz1 := false;
        sz2 := false;
        sz2 := true;
        sz3 := false;
        sz4 := false;
        standby := false;
      end when;
// Szenario 3 PHG --> U, TES
      when P_el_dem > P_el_thr and Q_dem > 0.01 and Q_dem > Z*P_nom_phg and Q_dem < P_nom_phg and not dis then
        sz1 := false;
        sz2 := false;
        sz2 := false;
        sz3 := true;
        sz4 := false;
        standby := false;
      end when;
//Szenario 4 SHG --> U
      when Q_dem > 0.01 and Q_dem < Z*P_nom_phg and not dis then
        sz1 := false;
        sz2 := false;
        sz2 := false;
        sz3 := false;
        sz4 := true;
        standby := false;
      end when;
//standby
      when Q_dem < 0 then
        sz1 := false;
        sz2 := false;
        sz2 := false;
        sz3 := false;
        sz4 := false;
        standby := true;
      end when;
// In case of an error calculation that might accour this statment makes sure that P_SHG_need is > 0
      if P_SHG_need_internal < 0 then
        P_SHG_need := 0;
        Q_tes_internal3 := -P_SHG_need_internal;
      else
        P_SHG_need := P_SHG_need_internal;
        Q_tes_internal3 := 0;
      end if;
// If the solar thermal provides heat it is always stored in the TES
      if P_ST > 0 then
        Q_tes_internal1 := P_ST;
      end if;
    equation
      if CHPoff then
//no Hydrogen
        P_phg_on = false;
        Q_tes_internal2 = 0;
        P_SHG_need_internal = -1*(-Q_dem);
      else
        if sz1 then
// Szenario 1 TES --> U
          P_phg_on = false;
          Q_tes_internal2 = 0 - Q_dem;
          P_SHG_need_internal = 0;
        elseif sz2 then
// Szenario 2 PHG, SHG --> U
          P_phg_on = true;
          Q_tes_internal2 = 0;
          P_SHG_need_internal = Q_dem - P_nom_phg;
        elseif sz3 then
// Szenario 3 PHG --> U, TES
          P_phg_on = true;
          Q_tes_internal2 = P_phg + 0 - Q_dem;
          P_SHG_need_internal = 0;
        elseif sz4 then
//Szenario 4 SHG --> U or if no Hydrogen
          P_phg_on = false;
          Q_tes_internal2 = 0;
          P_SHG_need_internal = -1*(-Q_dem);
        else
//standby
          P_phg_on = false;
          Q_tes_internal2 = 0;
          P_SHG_need_internal = 0;
        end if;
      end if;
//calculation of Heat flow in TES and Q_supply
      Q_tes = Q_tes_internal2 + Q_tes_internal1;
      Q_sup = P_shg + P_phg + (-Q_tes);
      annotation(
        Diagram(coordinateSystem(extent = {{-120, 140}, {320, -100}})),
        experiment(StartTime = 0, StopTime = 1, Tolerance = 1e-06, Interval = 0.002),
        Documentation(info = "<html><head></head><body>This is the main controller designed for the scenario where the primary heat generator (PHG) is an ICE CHP and the secondary heat generator (SHG) is a heat pump (HP) or boiler.&nbsp;<div><br></div><div>This controller has an additional CHP Off input to switch off the CHP in the event that hydrogen is not available.<br><p></p>
    <p align=\"center\">
    <img alt=\"Schematics of the controll logic\" src=\"modelica://Energysystem/Documentation/HeatingSystemControlLogic.png\">
    </p>
    <p></p></div></body></html>"));
    end mainConH2;

    model TesCon
      extends Modelica.Blocks.Icons.Block;
      parameter Real SOCmin = 0.1 "min. value of SOC";
      parameter Real SOCmax = 1 - SOCmin "Max. value of SOC";
      Modelica.Blocks.Interfaces.RealInput SOC annotation(
        Placement(transformation(origin = {-106, 0}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-106, 0}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.BooleanOutput cha "charging signal" annotation(
        Placement(transformation(origin = {106, 0}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {106, 0}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.BooleanOutput dis "discharging signal" annotation(
        Placement(transformation(origin = {102, 40}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {102, 40}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.BooleanOutput stby "stand by signal" annotation(
        Placement(transformation(origin = {102, -34}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {102, -34}, extent = {{-10, -10}, {10, 10}})));
    initial equation
      stby = false;
      cha = true;
      dis = false;
    algorithm
// Discharge --> 0
      if SOC > SOCmax then
        stby := false;
        cha := false;
        dis := true;
      end if;
//Stand by --> 1
//  if SOC < SOCmin - 0.01  then
//    stby := true;
//    cha := false;
//    dis := false;
//  end if;
// Charge --> 2
      if SOC < SOCmin then
        stby := false;
        cha := true;
        dis := false;
      end if;
    equation
// Allert to check that 0 < SOC < 1
      when SOC < 0 then
        assert(SOC >= 0, "Warning: TES is below minimum charge.", level = AssertionLevel.warning);
      end when;
      when SOC > 1 then
        assert(SOC <= 1, "Warning: TES is above maximum charge.", level = AssertionLevel.warning);
      end when;
      annotation(
        Documentation(info = "<html><head></head><body>Easy thermal storage controller, which gives signales to the maincontroller</body></html>"));
    end TesCon;

    package Validation
      model HeatPump
        extends Modelica.Icons.Example;
        Heating.HeatPump_Carnot HeatPump_Buildings(P_nominal(displayUnit = "kW") = 9000, COP_nominal = 4.2, TCon_nominal = 333.15) annotation(
          Placement(transformation(origin = {2, 2}, extent = {{-10, -10}, {10, 10}})));
        Buildings.Controls.Continuous.LimPID conPID(initType = Modelica.Blocks.Types.Init.InitialOutput) annotation(
          Placement(transformation(origin = {-2, -56}, extent = {{-10, -10}, {10, 10}})));
        Modelica.Blocks.Sources.CombiTimeTable testTable(columns = 2:2, fileName = Modelica.Utilities.Files.loadResource("modelica://Energysystem/resources/loads/Loads.txt"), table = [0, 0; 5000, 10; 20000, 20; 5000, 30; 20000, 40; 0, 50], tableName = "table1", tableOnFile = true) annotation(
          Placement(transformation(origin = {-96, -58}, extent = {{-10, -10}, {10, 10}})));
        Buildings.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(filNam = "C:/Users/befl0002/Documents/CO2InnO/40_GitHub/modelling-of-hydrogen-energy-system/resources/weatherdata/FRA_Strasbourg.071900_IWEC.mos") annotation(
          Placement(transformation(origin = {-86, 8}, extent = {{-40, 20}, {-20, 40}})));
        Heatpump_Ruhnau heatpump_Ruhnau annotation(
          Placement(transformation(origin = {2, 40}, extent = {{-10, -10}, {10, 10}})));
      equation
        connect(weaDat.weaBus.TDryBul, heatpump_Ruhnau.T_amb);
        connect(weaDat.weaBus.TDryBul, HeatPump_Buildings.HP_T_Amb);
        connect(HeatPump_Buildings.Q_HP, conPID.u_m) annotation(
          Line(points = {{12, 10}, {66, 10}, {66, -100}, {-2, -100}, {-2, -68}}, color = {0, 0, 127}));
        connect(testTable.y[1], conPID.u_s) annotation(
          Line(points = {{-84, -58}, {-14, -58}, {-14, -56}}, color = {0, 0, 127}));
        connect(weaDat.weaBus.TDryBul, HeatPump_Buildings.HP_T_Amb) annotation(
          experiment(StartTime = 0, StopTime = 31536000, Tolerance = 1e-06, Interval = 3600));
        connect(testTable.y[1], heatpump_Ruhnau.Q_dem) annotation(
          Line(points = {{-84, -58}, {-50, -58}, {-50, 40}, {-9, 40}}, color = {0, 0, 127}));
        connect(conPID.y, HeatPump_Buildings.y) annotation(
          Line(points = {{10, -56}, {22, -56}, {22, -32}, {-24, -32}, {-24, 12}, {-10, 12}}, color = {0, 0, 127}));
        annotation(
          experiment(StartTime = 0, StopTime = 604800, Tolerance = 1e-06, Interval = 3600),
          Documentation(info = "<html><head></head><body>Comparison of a simplifed Heat Pump model with the Carnot_y model of the Modelica Buildings Libary Buildings.Fluid.HeatPumps.Carnot_y<div><br></div><div><br></div><div><b>Currently not working!</b></div></body></html>"));
      end HeatPump;

      model Test_heatingSystemHydrogen
        extends Modelica.Icons.Example;
        Buildings.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(filNam = Modelica.Utilities.Files.loadResource("modelica://Energysystem/resources/weatherdata/FRA_Strasbourg.071900_IWEC.mos")) annotation(
          Placement(transformation(origin = {-86, 2}, extent = {{-40, 20}, {-20, 40}})));
        Heating.HeatingSystemH2 HeatingSystem(VTan = 5, P_th = 53700, P_el = 38000, eta_th = 0.502, eta_el = 0.355, area = 10, mod = true, T_supply = 363.15, T_return = 318.15, onST = false, azi = -0.785398, SOCmin = 0.02, SOCmax = 0.98, Zmod = 0.5, ratio_CH4 = 0, ratio_H2 = 1, Pth_hp(displayUnit = "kW") = 125000, ASHP = false, GSHP = true, P_el_thr = 0) annotation(
          Placement(transformation(origin = {-18, 4}, extent = {{-16, -16}, {16, 16}})));
        Data_Input data_Input annotation(
          Placement(transformation(origin = {-118, 58}, extent = {{-10, -10}, {10, 10}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression annotation(
          Placement(transformation(origin = {-62, 14}, extent = {{-10, -10}, {10, 10}})));
      protected
      equation
        connect(weaDat.weaBus, HeatingSystem.weaBus);
        connect(data_Input.heat_load, HeatingSystem.Q_dem) annotation(
          Line(points = {{-108, 55}, {-100, 55}, {-100, -4}, {-38, -4}}, color = {0, 0, 127}));
        connect(data_Input.electricity_load, HeatingSystem.P_el_dem) annotation(
          Line(points = {{-108, 61}, {-98, 61}, {-98, 4}, {-38, 4}}, color = {0, 0, 127}));
        connect(booleanExpression.y, HeatingSystem.CHPoff) annotation(
          Line(points = {{-50, 14}, {-45, 14}, {-45, 12}, {-38, 12}}, color = {255, 0, 255}));
        annotation(
          experiment(StartTime = 1.04544e+07, StopTime = 41990400, Tolerance = 1e-06, Interval = 3600),
          Diagram(coordinateSystem(extent = {{-140, 80}, {20, -20}})),
          Icon,
          Documentation(info = "<html><head></head><body><div>Test of the hydrogen heating system.</div></body></html>"));
      end Test_heatingSystemHydrogen;

      model Test_HeatingSystem_Base
        extends Modelica.Icons.Example;
        Buildings.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(filNam = Modelica.Utilities.Files.loadResource("modelica://Energysystem/resources/weatherdata/FRA_Strasbourg.071900_IWEC.mos")) annotation(
          Placement(transformation(origin = {-92, 2}, extent = {{-40, 20}, {-20, 40}})));
        Heating.HeatingSystemDefault HeatingSystem(VTan = 5, P_th = 53700, P_el = 38000, eta_th = 0.502, eta_el = 0.355, area = 10, mod = true, T_supply = 363.15, T_return = 318.15, onST = false, azi = -0.785398, SOCmin = 0.02, SOCmax = 0.98, Zmod = 0.5, ASHP = false, GSHP = true, Pth_hp(displayUnit = "kW") = 124000, P_el_thr = 0, ratio_CH4 = 1, ratio_H2 = 0) annotation(
          Placement(transformation(origin = {-18, 4}, extent = {{-16, -16}, {16, 16}})));
        Data_Input data_Input annotation(
          Placement(transformation(origin = {-124, 58}, extent = {{-10, -10}, {10, 10}})));
      equation
        connect(weaDat.weaBus, HeatingSystem.weaBus);
        connect(data_Input.heat_load, HeatingSystem.Q_dem) annotation(
          Line(points = {{-114, 55}, {-102, 55}, {-102, 4}, {-38, 4}}, color = {0, 0, 127}));
        connect(data_Input.electricity_load, HeatingSystem.P_el_dem) annotation(
          Line(points = {{-114, 61}, {-98, 61}, {-98, 12}, {-38, 12}}, color = {0, 0, 127}));
        annotation(
          experiment(StartTime = 0, StopTime = 31536000, Tolerance = 1e-06, Interval = 3600),
          Diagram(coordinateSystem(extent = {{-140, 80}, {20, -20}})),
          Icon,
          Documentation(info = "<html><head></head><body>Test of the base heating system.</body></html>"));
      end Test_HeatingSystem_Base;

      extends Modelica.Icons.Example;
      annotation(
        Documentation(info = "<html><head></head><body>This package contains models that validate the controls of the heating system</body></html>"));
    end Validation;

    model HeatPump_Carnot "Carnot Heat Pump with y control"
      replaceable package Medium1 = Buildings.Media.Water "Working fluid on the hot side (default = Water)" annotation(
        Evaluate = true,
        Dialog(group = "Media"));
      replaceable package Medium2 = Buildings.Media.Air "Working fluid at cold side (default = Air)" annotation(
        Evaluate = true,
        Dialog(group = "Media"));
      parameter Modelica.Units.SI.Power P_nominal = 10E3 "Nominal compressor power (at y=1)" annotation(
        Evaluate = true,
        Dialog(group = "Nominal condition"));
      parameter Modelica.Units.SI.Temperature T_return = 313.15 "Returning Temperature" annotation(
        Evaluate = true,
        Dialog(group = "Nominal condition"));
      parameter Modelica.Units.SI.TemperatureDifference dTEva_nominal = -10 "Temperature difference evaporator outlet-inlet" annotation(
        Evaluate = true,
        Dialog(group = "Nominal condition"));
      parameter Modelica.Units.SI.TemperatureDifference dTCon_nominal = 10 "Temperature difference condenser outlet-inlet" annotation(
        Evaluate = true,
        Dialog(group = "Nominal condition"));
      parameter Modelica.Units.SI.Pressure dp1_nominal = 60000 "Pressure difference over condenser" annotation(
        Evaluate = true,
        Dialog(group = "Nominal condition"));
      parameter Modelica.Units.SI.Pressure dp2_nominal = 60000 "Pressure difference over evaporator" annotation(
        Evaluate = true,
        Dialog(group = "Nominal condition"));
      parameter Modelica.Units.SI.MassFlowRate m1_flow_nominal = P_nominal*COP_nominal/cp1_default/dTCon_nominal "Nominal mass flow rate at condenser water wide" annotation(
        Evaluate = true,
        Dialog(group = "Nominal condition"));
      parameter Modelica.Units.SI.MassFlowRate m2_flow_nominal = -P_nominal*(COP_nominal - 1)/cp2_default/dTEva_nominal "Nominal mass flow rate at chilled water side" annotation(
        Evaluate = true,
        Dialog(group = "Nominal condition"));
      parameter Real COP_nominal = 6 "Nominal COP" annotation(
        Evaluate = true,
        Dialog(group = "Efficiency"));
      parameter Modelica.Units.SI.Temperature TCon_nominal = 303.15 "Condenser temperature used to compute COP_nominal" annotation(
        Evaluate = true,
        Dialog(group = "Efficiency"));
      parameter Modelica.Units.SI.Temperature TEva_nominal = 278.15 "Evaporator temperature used to compute COP_nominal" annotation(
        Evaluate = true,
        Dialog(group = "Efficiency"));
      final parameter Modelica.Units.SI.SpecificHeatCapacity cp1_default = Medium1.specificHeatCapacityCp(Medium1.setState_pTX(Medium1.p_default, Medium1.T_default, Medium1.X_default)) "Specific heat capacity of medium 2 at default medium state";
      final parameter Modelica.Units.SI.SpecificHeatCapacity cp2_default = Medium2.specificHeatCapacityCp(Medium2.setState_pTX(Medium2.p_default, Medium2.T_default, Medium2.X_default)) "Specific heat capacity of medium 2 at default medium state";
      Buildings.Fluid.HeatPumps.Carnot_y HP(COP_nominal = COP_nominal, redeclare package Medium1 = Medium1, redeclare package Medium2 = Medium2, P_nominal = P_nominal, TCon_nominal = TCon_nominal, TEva_nominal = TEva_nominal, dTCon_nominal = dTCon_nominal, dTEva_nominal = dTEva_nominal, dp1_nominal = dp1_nominal, dp2_nominal = dp2_nominal, energyDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial, show_T = true, use_eta_Carnot_nominal = false) "Heat Pump" annotation(
        Placement(transformation(origin = {-2, 2}, extent = {{-10, -10}, {10, 10}})));
      Buildings.Fluid.Sources.Boundary_pT HP_bou2(redeclare package Medium = Medium2, nPorts = 1) annotation(
        Placement(visible = true, transformation(origin = {-52, -38}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Buildings.Fluid.Sources.MassFlowSource_T HP_sou1(redeclare package Medium = Medium1, m_flow = m1_flow_nominal, nPorts = 1, T = T_return) annotation(
        Placement(visible = true, transformation(origin = {-98, -2}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Buildings.Fluid.Sources.MassFlowSource_T HP_sou2(redeclare package Medium = Medium2, m_flow = m2_flow_nominal, nPorts = 1, use_T_in = true) annotation(
        Placement(visible = true, transformation(origin = {28, -32}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      Buildings.Fluid.Sensors.TemperatureTwoPort HP_T_in(redeclare package Medium = Medium1, T_start(displayUnit = "K"), m_flow_nominal = m1_flow_nominal) annotation(
        Placement(visible = true, transformation(origin = {-14, 8}, extent = {{-32, -20}, {-12, 0}}, rotation = 0)));
      Buildings.Fluid.Sensors.TemperatureTwoPort HP_T_out(redeclare package Medium = Medium1, T_start(displayUnit = "K"), m_flow_nominal = m1_flow_nominal) annotation(
        Placement(visible = true, transformation(origin = {50, 42}, extent = {{-32, -20}, {-12, 0}}, rotation = 0)));
      Buildings.Fluid.Sources.Boundary_pT HP_bou1(redeclare package Medium = Medium1, nPorts = 1) annotation(
        Placement(visible = true, transformation(origin = {104, 30}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
      Buildings.Fluid.Sensors.SpecificEnthalpyTwoPort HP_h_out(redeclare package Medium = Medium1, m_flow_nominal = m1_flow_nominal) annotation(
        Placement(visible = true, transformation(origin = {54, 32}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Buildings.Fluid.Sensors.SpecificEnthalpyTwoPort HP_h_in(redeclare package Medium = Medium1, m_flow_nominal = m1_flow_nominal) annotation(
        Placement(visible = true, transformation(origin = {-68, -2}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Buildings.Fluid.Sensors.MassFlowRate HP_MFlow(redeclare package Medium = Medium1) annotation(
        Placement(visible = true, transformation(origin = {80, 32}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealOutput Q_HP(final quantity = "Heat Flow", final unit = "W") "Heat Flow added to Warm side" annotation(
        Placement(visible = true, transformation(origin = {56, 82}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, 88}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealInput HP_T_Amb(final quantity = "Temperature", final unit = "K") "Ambiente Temperature" annotation(
        Placement(visible = true, transformation(origin = {40, -66}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-122, -2}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealOutput P(final quantity = "Power", final unit = "W") "Electrical Power consumed by compressor" annotation(
        Placement(visible = true, transformation(origin = {32, 2}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealInput y(min = 0, max = 1, unit = "1") "Part load ratio of compressor" annotation(
        Placement(visible = true, transformation(origin = {-54, 32}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-118, 90}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
    equation
      connect(HP_bou2.ports[1], HP.port_b2) annotation(
        Line(points = {{-42, -38}, {-12, -38}, {-12, -4}}, color = {0, 127, 255}));
      connect(HP.port_a2, HP_sou2.ports[1]) annotation(
        Line(points = {{8, -4}, {18, -4}, {18, -32}}, color = {0, 127, 255}));
      connect(HP_T_in.port_b, HP.port_a1) annotation(
        Line(points = {{-26, -2}, {-16, -2}, {-16, 8}, {-12, 8}}, color = {0, 127, 255}));
      connect(HP.port_b1, HP_T_out.port_a) annotation(
        Line(points = {{8, 8}, {18, 8}, {18, 32}}, color = {0, 127, 255}));
      connect(HP_sou1.ports[1], HP_h_in.port_a) annotation(
        Line(points = {{-88, -2}, {-78, -2}}, color = {0, 127, 255}));
      connect(HP_h_in.port_b, HP_T_in.port_a) annotation(
        Line(points = {{-58, -2}, {-46, -2}}, color = {0, 127, 255}));
      connect(HP_T_out.port_b, HP_h_out.port_a) annotation(
        Line(points = {{38, 32}, {44, 32}}, color = {0, 127, 255}));
      connect(HP_MFlow.port_b, HP_bou1.ports[1]) annotation(
        Line(points = {{90, 32}, {93, 32}, {93, 30}, {94, 30}}, color = {0, 127, 255}));
      connect(HP_MFlow.port_a, HP_h_out.port_b) annotation(
        Line(points = {{70, 32}, {64, 32}}, color = {0, 127, 255}));
      connect(HP.P, P) annotation(
        Line(points = {{10, 2}, {32, 2}}, color = {0, 0, 127}));
      connect(HP.y, y) annotation(
        Line(points = {{-14, 12}, {-18, 12}, {-18, 32}, {-54, 32}}, color = {0, 0, 127}));
      connect(HP_T_Amb, HP_sou2.T_in) annotation(
        Line(points = {{40, -66}, {70, -66}, {70, -28}, {40, -28}}, color = {0, 0, 127}));
      connect(HP.QCon_flow, Q_HP) annotation(
        Line(points = {{10, 12}, {10, 82}, {56, 82}}, color = {0, 0, 127}));
      annotation(
        Icon(coordinateSystem(preserveAspectRatio = true, extent = {{-100, -100}, {100, 100}}), graphics = {Rectangle(fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, extent = {{-56, 68}, {58, 50}}), Rectangle(fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, extent = {{-56, -52}, {58, -70}}), Polygon(fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, points = {{-42, 0}, {-52, -12}, {-32, -12}, {-42, 0}}), Polygon(fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, points = {{-42, 0}, {-52, 10}, {-32, 10}, {-42, 0}}), Rectangle(fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, extent = {{-44, 50}, {-40, 10}}), Rectangle(fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, extent = {{-44, -12}, {-40, -52}}), Rectangle(fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, extent = {{38, 50}, {42, -52}}), Ellipse(fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, extent = {{18, 22}, {62, -20}}), Polygon(fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, points = {{40, 22}, {22, -10}, {58, -10}, {40, 22}}), Text(textColor = {0, 0, 127}, extent = {{-130, 128}, {-78, 106}}, textString = "y"), Text(textColor = {0, 0, 127}, extent = {{66, 28}, {116, 14}}, textString = "P"), Line(points = {{-100, 90}, {-80, 90}, {-80, 14}, {22, 14}}, color = {0, 0, 255}), Line(points = {{62, 0}, {100, 0}}, color = {0, 0, 255}), Text(textColor = {0, 0, 255}, extent = {{-151, 147}, {149, 107}}, textString = "%name")}),
        defaultComponentName = "HP",
        Documentation(info = "<html>
    <p>
    This is a model of a chiller whose coefficient of performance COP changes
    with temperatures in the same way as the Carnot efficiency changes.
    The input signal <i>y</i> is the control signal for the compressor.
    </p>
    <p>
    Set <code>use_eta_Carnot_nominal=true</code> to specify directly
    the Carnot effectiveness <i>&eta;<sub>Carnot,0</sub></i>,
    in which case the value of the parameter <code>COP_nominal</code>
    will not affect the simulation.
    If <code>use_eta_Carnot_nominal=false</code>, the model will use
    the value of the parameter <code>COP_nominal</code>
    together with the specified nominal temperatures
    to compute the Carnot effectiveness as
    </p>
    <p align=\"center\" style=\"font-style:italic;\">
    &eta;<sub>Carnot,0</sub> =
      COP<sub>0</sub>
    &frasl;  (T<sub>eva,0</sub> &frasl; (T<sub>con,0</sub> + T<sub>app,con,0</sub> - (T<sub>eva,0</sub>-T<sub>app,eva,0</sub>))),
    </p>
    <p>
    where
    <i>T<sub>eva,0</sub></i> is the evaporator temperature,
    <i>T<sub>con,0</sub></i> is the condenser temperature,
    <i>T<sub>app,eva,0</sub></i> is the evaporator approach temperature and
    <i>T<sub>app,con,0</sub></i> is the condenser approach temperature.
    </p>
    <p>
    The COP is computed as the product
    </p>
    <p align=\"center\" style=\"font-style:italic;\">
      COP = &eta;<sub>Carnot,0</sub> COP<sub>Carnot</sub> &eta;<sub>PL</sub>,
    </p>
    <p>
    where <i>COP<sub>Carnot</sub></i> is the Carnot efficiency and
    <i>&eta;<sub>PL</sub></i> is the part load efficiency, expressed using
    a polynomial.
    This polynomial has the form
    </p>
    <p align=\"center\" style=\"font-style:italic;\">
      &eta;<sub>PL</sub> = a<sub>1</sub> + a<sub>2</sub> y + a<sub>3</sub> y<sup>2</sup> + ...,
    </p>
    <p>
    where <i>y &isin; [0, 1]</i> is
    the part load for cooling and the coefficients <i>a<sub>i</sub></i>
    are declared by the parameter <code>a</code>.
    </p>
    <p>
    On the <code>Dynamics</code> tag, the model can be parametrized to compute a transient
    or steady-state response.
    The transient response of the model is computed using a first
    order differential equation for the evaporator and condenser fluid volumes.
    The chiller outlet temperatures are equal to the temperatures of these lumped volumes.
    </p>
    <h4>Typical use and important parameters</h4>
    <p>
    When using this component, make sure that the evaporator and the condenser have sufficient mass flow rate.
    Based on the mass flow rates, the compressor power, temperature difference and the efficiencies,
    the model computes how much heat will be added to the condenser and removed at the evaporator.
    If the mass flow rates are too small, very high temperature differences can result.
    </p>
    <p>
    The evaporator heat flow rate <code>QEva_flow_nominal</code> is used to assign
    the default value for the mass flow rates, which are used for the pressure drop
    calculations.
    It is also used to compute the part load efficiency.
    Hence, make sure that <code>QEva_flow_nominal</code> is set to a reasonable value.
    </p>
    <p>
    The maximum cooling capacity is set by the parameter <code>QEva_flow_min</code>,
    which is by default set to negative infinity.
    </p>
    <p>
    The coefficient of performance depends on the
    evaporator and condenser leaving temperature
    since otherwise the second law of thermodynamics may be violated.
    </p>
    <h4>Notes</h4>
    <p>
    For a similar model that can be used as a heat pump, see
    <a href=\"modelica://Buildings.Fluid.HeatPumps.Carnot_y\">Buildings.Fluid.HeatPumps.Carnot_y</a>.
    </p>
    </html>"),
        Diagram,
        experiment(StartTime = 0, StopTime = 31536000, Tolerance = 1e-6, Interval = 3600));
    end HeatPump_Carnot;

    //import Modelica.Units.Conversions;
    annotation(
      uses(Buildings(version = "10.0.0"), Modelica(version = "4.0.0"), ExternData(version = "3.0.3")),
      preferredView = "info",
      Documentation(info = "<html>
  This package contains components for heating systems such as
  heat pumps, solar thermal and heat storage. 
  </html>"),
      Icon(graphics = {Polygon(points = {{-70, 26}, {68, -44}, {68, 26}, {2, -10}, {-70, -42}, {-70, 26}}, lineColor = {0, 0, 0}), Line(points = {{2, 42}, {2, -10}}, color = {0, 0, 0}), Rectangle(extent = {{-18, 50}, {22, 42}}, lineColor = {0, 0, 0}, fillColor = {0, 0, 0}, fillPattern = FillPattern.Solid)}));
  end Heating;

  package Electrical "Package with models for electrical systems"
    extends Modelica.Icons.Package;

    model elProduction
      //PV parameter
      parameter Boolean onPV = true "true = on, false = remove pv panel" annotation(
        Dialog(tab = "PV", group = "General"));
      parameter Boolean physical = true "true = physical model, false = pv profil based model" annotation(
        Dialog(tab = "PV", group = "General", enable = onPV));
      parameter Modelica.Units.SI.Area A_pv = 10 "Net surface area of PV" annotation(
        Dialog(tab = "PV", group = "Parameters", enable = onPV and physical));
      parameter Real fAct = 0.9 "Fraction of surface area with active solar cells" annotation(
        Dialog(tab = "PV", group = "Parameters", enable = onPV and physical));
      parameter Real eta = 0.12 "Module conversion efficiency" annotation(
        Dialog(tab = "PV", group = "Parameters", enable = onPV and physical));
      parameter Boolean linearized = false "If =true, linearize the load" annotation(
        Dialog(tab = "PV", group = "Parameters", enable = onPV and physical));
      parameter Modelica.Units.SI.Angle til = 0.7853981633974483 "Surface tilt (0 for horizontally mounted collector)" annotation(
        Dialog(tab = "PV", group = "Orientation", enable = onPV and physical));
      parameter Modelica.Units.SI.Angle azi = 0 "Surface azimuth (0 for south-facing; -90 degree for east-facing; +90 degree for west facing" annotation(
        Dialog(tab = "PV", group = "Orientation", enable = onPV and physical));
      parameter Real pfPV = 0.9 "Power factor in PVs" annotation(
        Dialog(tab = "PV", group = "AC-Conversion", enable = onPV and physical));
      parameter Real etaPV_DCAC = 0.9 "Efficiency of DC/AC conversion in PVs" annotation(
        Dialog(tab = "PV", group = "AC-Conversion", enable = onPV and physical));
      parameter Modelica.Units.SI.Power P_ins(min = 0, displayUnit = "kW") = 5000 "Installed kWp" annotation(
        Dialog(tab = "PV", group = "PV profil", enable = onPV and not physical));
      //Wind turbine
      parameter Boolean onWT = true "true = on, false = remove wind turbine" annotation(
        Dialog(tab = "Wind turbine", group = "General"));
      parameter Modelica.Units.SI.Height h = 10 "Height over ground" annotation(
        Dialog(tab = "Wind turbine", group = "Wind correction", enable = onWT));
      parameter Modelica.Units.SI.Height hRef = 10 "Reference height for wind measurement" annotation(
        Dialog(tab = "Wind turbine", group = "Wind correction", enable = onWT));
      parameter Real nWin = 0.4 "Height exponent for wind profile calculation" annotation(
        Dialog(tab = "Wind turbine", group = "Wind correction", enable = onWT));
      parameter Real scale = 1 "Scaling factor, used to allow adjusting the power output without changing the table" annotation(
        Dialog(tab = "Wind turbine", group = "Parameters", enable = onWT));
      parameter Boolean tableOnFile = false "true, if table is defined on file or in function usertab" annotation(
        Dialog(tab = "Wind turbine", group = "Parameters", enable = onWT));
      parameter String tableName = "NoName" "Table name on file or in function usertab (see documentation)" annotation(
        Dialog(tab = "Wind turbine", group = "Parameters", enable = onWT));
      parameter String fileName = "NoName" "File where matrix is stored" annotation(
        Dialog(tab = "Wind turbine", group = "Parameters", enable = onWT));
      parameter Real table[:, 2] = [3.5, 0; 5.5, 100; 12, 900; 14, 1000; 25, 1000] "Table of generated power (first column is wind speed, second column is power)" annotation(
        Dialog(tab = "Wind turbine", group = "Parameters", enable = onWT));
      parameter Real pfWin = 0.9 "Power factor in wind turbines" annotation(
        Dialog(tab = "Wind turbine", group = "AC-Conversion", enable = onWT));
      parameter Real etaWin_DCAC = 0.9 "Efficiency of DC/AC conversion in wind turbines" annotation(
        Dialog(tab = "Wind turbine", group = "AC-Conversion", enable = onWT));
      //Battery
      parameter Boolean onBat = true "true = on, false = remove battery" annotation(
        Dialog(tab = "Battery", group = "General"));
      parameter Modelica.Units.SI.Efficiency etaCha(max = 1) = 0.9 "Efficiency during charging" annotation(
        Dialog(tab = "Battery", group = "Parameter", enable = onBat));
      parameter Modelica.Units.SI.Efficiency etaDis(max = 1) = 0.9 "Efficiency during discharging" annotation(
        Dialog(tab = "Battery", group = "Parameter", enable = onBat));
      parameter Real SOC_start = deaBan + 0.01 "Initial charge, must be greater than deaBan" annotation(
        Dialog(tab = "Battery", group = "Parameter", enable = onBat));
      parameter Modelica.Units.SI.Energy EMax(min = 0, displayUnit = "kW.h") = 28800000 "Maximum available charge => 0" annotation(
        Dialog(tab = "Battery", group = "Parameter", enable = onBat));
      parameter Modelica.Units.SI.ElectricCurrent I_m = 130 "Nominal discharge current" annotation(
        Dialog(tab = "Battery", group = "Parameter", enable = onBat));
      parameter Real pfBat = 0.9 "Power factor in Battery" annotation(
        Dialog(tab = "Battery", group = "AC-Conversion", enable = onBat));
      parameter Real etaBat_DCAC = 0.95 "Efficiency of DC/AC conversion in Battery" annotation(
        Dialog(tab = "Battery", group = "AC-Conversion", enable = onBat));
      parameter Modelica.Units.SI.Power thrDis = -1 "Power threshold for discharging" annotation(
        Dialog(tab = "Battery", group = "Control", enable = onBat));
      parameter Modelica.Units.SI.Power thrCha = 1 "Power threshold for charging" annotation(
        Dialog(tab = "Battery", group = "Control", enable = onBat));
      parameter Real deaBan = 0.1 "Depth of discharge" annotation(
        Dialog(tab = "Battery", group = "Control", enable = onBat));
      // General
      parameter Modelica.Units.SI.Voltage V_nominal = 230 "Nominal voltage of line (V_nominal >= 0)";
      parameter Modelica.Units.SI.Voltage V_nominal_pv = V_nominal "Nominal voltage of PV (V_nominal_pv >= 0)";
      parameter Modelica.Units.SI.Voltage V_nominal_win = V_nominal "Nominal voltage of wind turbine (VWin_nominal >= 0)";
      parameter Modelica.Units.SI.Voltage V_nominal_bat = 51.2 "Nominal voltage of Battery (V_nominal_bat >= 0)";
      Modelica.Units.SI.Power Psup "Generated Power";
      Buildings.Electrical.AC.ThreePhasesBalanced.Sources.PVSimpleOriented pv(A = A_pv, pf = pfPV, fAct = fAct, eta = eta, til = til, azi = azi, linearized = linearized, eta_DCAC = etaPV_DCAC, V_nominal = V_nominal_pv) "PV panel" annotation(
        Placement(transformation(origin = {-66, -138}, extent = {{-10, -10}, {10, 10}})));
      Buildings.Electrical.AC.ThreePhasesBalanced.Sources.WindTurbine windTurbine(scale = scale, tableOnFile = tableOnFile, tableName = tableName, fileName = fileName, h = h, hRef = hRef, nWin = nWin, V_nominal = V_nominal_win, table = table, pf = pfWin, eta_DCAC = etaWin_DCAC) "Wind turbine" annotation(
        Placement(transformation(origin = {128, -108}, extent = {{-10, -10}, {10, 10}})));
      Buildings.Electrical.AC.ThreePhasesBalanced.Storage.Battery bat(SOC_start = SOC_start, EMax = EMax, V_nominal = V_nominal_bat, pf = pfBat, eta_DCAC = etaBat_DCAC, etaCha = etaCha, etaDis = etaDis) "Battery" annotation(
        Placement(transformation(origin = {282, -60}, extent = {{-10, -10}, {10, 10}})));
      Electrical.BatCon batCon(onBat = onBat, V_nominal_bat = V_nominal_bat, I_m = I_m, EMax = EMax, thrDis = thrDis, thrCha = thrCha, deaBan = deaBan) "Batery control" annotation(
        Placement(transformation(origin = {-34, 6}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.RealExpression P_sup(y = Psup) "Generated Power" annotation(
        Placement(transformation(origin = {-112, 24}, extent = {{-10, -10}, {10, 10}})));
      Buildings.Electrical.AC.ThreePhasesBalanced.Loads.Inductive Load(P_nominal = -2000, V_nominal = 480, mode = Buildings.Electrical.Types.Load.VariableZ_P_input) "Electricity demand into grid" annotation(
        Placement(transformation(origin = {-90, 24}, extent = {{20, -50}, {40, -30}}, rotation = -0)));
      Buildings.BoundaryConditions.WeatherData.Bus weaBus "Weather bus" annotation(
        Placement(transformation(origin = {-142, 86}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {-110, 78}, extent = {{-10, -10}, {10, 10}})));
      Buildings.Electrical.AC.ThreePhasesBalanced.Interfaces.Terminal_p term_p "Terminal" annotation(
        Placement(transformation(origin = {-164, -60}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -70}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealInput Pdem(final quantity = "Power demand", final unit = "W") "Electricity demand" annotation(
        Placement(transformation(origin = {-188, 12}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -52}, extent = {{-20, -20}, {20, 20}})));
      PV_Profil pv_profil(P_ins = P_ins) "PV Profil Block" annotation(
        Placement(transformation(origin = {-120, -138}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.BooleanExpression pvMod1(y = onPV) "on off condition" annotation(
        Placement(transformation(origin = {-38, -198}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Logical.Switch swPV1 "on off switch for pv" annotation(
        Placement(transformation(origin = {4, -196}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.BooleanExpression pvMod2(y = physical) annotation(
        Placement(transformation(origin = {-66, -166}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Logical.Switch swPV2 "switch between pyhsical and profil model" annotation(
        Placement(transformation(origin = {-28, -166}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.Constant P_pv_off(k = 0) annotation(
        Placement(transformation(origin = {-38, -220}, extent = {{-10, -10}, {10, 10}})));
      Buildings.Electrical.AC.OnePhase.Sources.FixedVoltage boundary(f = 50, V = 230) annotation(
        Placement(transformation(origin = {-158, -108}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Math.Gain GainPpv(k = etaPV_DCAC) "Power generated by PV" annotation(
        Placement(transformation(origin = {40, -196}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.BooleanExpression wtMod1(y = onWT) "on off condition" annotation(
        Placement(transformation(origin = {122, -148}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.Constant Wt_off(k = 0) annotation(
        Placement(transformation(origin = {122, -170}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Logical.Switch swWT1 "on off switch for wt" annotation(
        Placement(transformation(origin = {164, -146}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Math.Gain GainPwind(k = etaWin_DCAC) annotation(
        Placement(transformation(origin = {200, -146}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealInput pvProfil(final quantity = "Power", final unit = "W") "PV profil" annotation(
        Placement(transformation(origin = {-180, -142}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -12}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealOutput Ppv(final quantity = "Power", final unit = "W") "Power supply by PV" annotation(
        Placement(transformation(origin = {370, 90}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 90}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput Pwind(final quantity = "Power", final unit = "W") "Power supply by wind turbine" annotation(
        Placement(transformation(origin = {370, 70}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 70}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput Pload(final quantity = "Power", final unit = "W") "Power load" annotation(
        Placement(transformation(origin = {370, 50}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 50}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput SOCbat annotation(
        Placement(transformation(origin = {370, 28}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 30}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput Pbat(final quantity = "Power", final unit = "W") "Power stored in Battery (P > 0 charging,P < 0 discharging " annotation(
        Placement(transformation(origin = {370, 8}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 10}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.RealExpression PpvExpression(y = GainPpv.y) annotation(
        Placement(transformation(origin = {310, 90}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.RealExpression PwindExpression(y = GainPwind.y) annotation(
        Placement(transformation(origin = {310, 70}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.RealExpression PloadExpression(y = Pdem) annotation(
        Placement(transformation(origin = {310, 50}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.RealExpression SOCbatExpression(y = bat.SOC) annotation(
        Placement(transformation(origin = {310, 28}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.RealExpression PbatExpression(y = batCon.Pbat) annotation(
        Placement(transformation(origin = {310, 8}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealInput Pchp(unit = "W") "Power generated by CHP" annotation(
        Placement(transformation(origin = {-192, -34}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -92}, extent = {{-20, -20}, {20, 20}})));
      Buildings.Electrical.AC.ThreePhasesBalanced.Sources.FixedVoltage fixVol(f = 50, V = 230) annotation(
        Placement(transformation(origin = {282, -92}, extent = {{10, -10}, {-10, 10}})));
      Buildings.Electrical.AC.ThreePhasesBalanced.Loads.Inductive Supply(P_nominal = -2000, V_nominal = 480, mode = Buildings.Electrical.Types.Load.VariableZ_P_input) annotation(
        Placement(transformation(origin = {-38, -20}, extent = {{20, -50}, {40, -30}}, rotation = -0)));
    equation
      Psup = GainPwind.y + GainPpv.y + Pchp;
//calculation of the total supplied electrical Power by PV, Wind and CHP
      connect(weaBus, pv.weaBus);
      connect(weaBus.winSpe, windTurbine.vWin);
      connect(P_sup.y, batCon.Psup) annotation(
        Line(points = {{-101, 24}, {-67, 24}, {-67, 14}, {-45, 14}}, color = {0, 0, 127}));
      connect(term_p, Load.terminal) annotation(
        Line(points = {{-164, -60}, {-102, -60}, {-102, -16}, {-70, -16}}, color = {0, 120, 120}));
      connect(swPV2.u2, pvMod2.y) annotation(
        Line(points = {{-40, -166}, {-54, -166}}, color = {255, 0, 255}));
      connect(pvMod1.y, swPV1.u2) annotation(
        Line(points = {{-27, -198}, {-5, -198}, {-5, -196}, {-8, -196}}, color = {255, 0, 255}));
      connect(swPV2.u1, pv.P) annotation(
        Line(points = {{-40, -158}, {-46, -158}, {-46, -131}, {-55, -131}}, color = {0, 0, 127}));
      connect(pv_profil.P, swPV2.u3) annotation(
        Line(points = {{-109.4, -129.8}, {-99.4, -129.8}, {-99.4, -174}, {-40, -174}}, color = {0, 0, 127}));
      connect(swPV2.y, swPV1.u1) annotation(
        Line(points = {{-17, -166}, {-13, -166}, {-13, -188}, {-8, -188}}, color = {0, 0, 127}));
      connect(P_pv_off.y, swPV1.u3) annotation(
        Line(points = {{-27, -220}, {-5, -220}, {-5, -204}, {-8, -204}}, color = {0, 0, 127}));
      connect(boundary.terminal, pv.terminal) annotation(
        Line(points = {{-148, -108}, {-78, -108}, {-78, -138}, {-76, -138}}, color = {0, 120, 120}));
      connect(boundary.terminal, pv_profil.term_p) annotation(
        Line(points = {{-148, -108}, {-130, -108}, {-130, -138}}, color = {0, 120, 120}));
      connect(swPV1.y, GainPpv.u) annotation(
        Line(points = {{15, -196}, {27, -196}}, color = {0, 0, 127}));
      connect(boundary.terminal, windTurbine.terminal) annotation(
        Line(points = {{-148, -108}, {118, -108}}, color = {0, 120, 120}));
      connect(swWT1.y, GainPwind.u) annotation(
        Line(points = {{175, -146}, {187, -146}}, color = {0, 0, 127}));
      connect(Wt_off.y, swWT1.u3) annotation(
        Line(points = {{133, -170}, {155, -170}, {155, -154}, {152, -154}}, color = {0, 0, 127}));
      connect(wtMod1.y, swWT1.u2) annotation(
        Line(points = {{133, -148}, {155, -148}, {155, -146}, {152, -146}}, color = {255, 0, 255}));
      connect(windTurbine.P, swWT1.u1) annotation(
        Line(points = {{140, -102}, {146, -102}, {146, -138}, {152, -138}}, color = {0, 0, 127}));
      connect(pv_profil.pvProfil, pvProfil) annotation(
        Line(points = {{-132, -144}, {-180, -144}, {-180, -142}}, color = {0, 0, 127}));
      connect(batCon.SOC, bat.SOC) annotation(
        Line(points = {{-44, -2}, {-62, -2}, {-62, -32}, {290, -32}, {290, -54}, {293, -54}}, color = {0, 0, 127}));
      connect(PbatExpression.y, Pbat) annotation(
        Line(points = {{321, 8}, {370, 8}}, color = {0, 0, 127}));
      connect(SOCbat, SOCbatExpression.y) annotation(
        Line(points = {{370, 28}, {322, 28}}, color = {0, 0, 127}));
      connect(PloadExpression.y, Pload) annotation(
        Line(points = {{322, 50}, {370, 50}}, color = {0, 0, 127}));
      connect(PwindExpression.y, Pwind) annotation(
        Line(points = {{322, 70}, {370, 70}}, color = {0, 0, 127}));
      connect(Ppv, PpvExpression.y) annotation(
        Line(points = {{370, 90}, {321, 90}}, color = {0, 0, 127}));
      connect(Pdem, batCon.Pdem) annotation(
        Line(points = {{-188, 12}, {-86, 12}, {-86, 6}, {-44, 6}}, color = {0, 0, 127}));
      connect(batCon.Pbat, bat.P) annotation(
        Line(points = {{-24, 6}, {282, 6}, {282, -50}}, color = {0, 0, 127}));
      connect(bat.terminal, fixVol.terminal) annotation(
        Line(points = {{272, -60}, {258, -60}, {258, -92}, {272, -92}}, color = {0, 120, 120}));
      connect(term_p, Supply.terminal) annotation(
        Line(points = {{-164, -60}, {-18, -60}}, color = {0, 120, 120}));
      connect(batCon.Pdem_out, Load.Pow) annotation(
        Line(points = {{-24, 2}, {-12, 2}, {-12, -16}, {-50, -16}}, color = {0, 0, 127}));
      connect(batCon.Psup_out, Supply.Pow) annotation(
        Line(points = {{-24, -2}, {20, -2}, {20, -60}, {2, -60}}, color = {0, 0, 127}));
      annotation(
        defaultComponentName = "elecProd",
        Diagram(coordinateSystem(extent = {{-220, 160}, {380, -240}})),
        Icon(graphics = {Bitmap(origin = {2, 5}, extent = {{-90, -91}, {90, 91}}, imageSource = ""), Text(origin = {-6, 16}, textColor = {0, 0, 255}, extent = {{-149, -114}, {151, -154}}, textString = "%name")}),
        Documentation(info = "<html><head></head><body><!--StartFragment--><p>The electrical system in the model is designed to handle the conversion, storage, and distribution of renewable energy, including photovoltaic (PV) and wind turbine (WT) technologies. It integrates battery storage (BAT) and grid interaction to manage electricity demand and supply efficiently.</p><h4>Components and Functionality:</h4><ol><li><strong>Photovoltaic (PV) System</strong>: Converts solar energy into electrical energy using the photoelectric effect. Various types of PV cells are used, with efficiencies influenced by their material and structure.</li><li><strong>Wind Turbine (WT)</strong>: Converts kinetic energy from the wind into electrical energy. The power generated depends on wind speed and turbine characteristics.</li><li><strong>Battery Storage (BAT)</strong>: Stores excess electrical energy generated by PV and WT systems. The battery management system controls charging and discharging to optimize battery life and ensure energy availability.</li><li><strong>Grid Interaction</strong>: Balances electricity supply and demand. Excess electricity can be fed into the grid, and shortages can be compensated by drawing power from the grid.</li><li><b>Battery Control:&nbsp;</b>

<!--StartFragment-->The battery controller manages the battery's charging and discharging processes based on power thresholds, state of charge (SOC), and power demand/supply conditions. It ensures the battery operates efficiently and within safe limits.<!--EndFragment--></li></ol><!--EndFragment--></body></html>"));
    end elProduction;

    model elProduction_H2 "Electrical System with Elektrolyzer control"
      //PV parameter
      parameter Boolean onPV = true "true = on, false = remove pv panel" annotation(
        Dialog(tab = "PV", group = "General"));
      parameter Boolean physical = true "true = physical model, false = pv profil based model" annotation(
        Dialog(tab = "PV", group = "General", enable = onPV));
      parameter Modelica.Units.SI.Area A_pv = 10 "Net surface area of PV" annotation(
        Dialog(tab = "PV", group = "Parameters", enable = onPV and physical));
      parameter Real fAct = 0.9 "Fraction of surface area with active solar cells" annotation(
        Dialog(tab = "PV", group = "Parameters", enable = onPV and physical));
      parameter Real eta = 0.12 "Module conversion efficiency" annotation(
        Dialog(tab = "PV", group = "Parameters", enable = onPV and physical));
      parameter Boolean linearized = false "If =true, linearize the load" annotation(
        Dialog(tab = "PV", group = "Parameters", enable = onPV and physical));
      parameter Modelica.Units.SI.Angle til = 0.7853981633974483 "Surface tilt (0 for horizontally mounted collector)" annotation(
        Dialog(tab = "PV", group = "Orientation", enable = onPV and physical));
      parameter Modelica.Units.SI.Angle azi = 0 "Surface azimuth (0 for south-facing; -90 degree for east-facing; +90 degree for west facing" annotation(
        Dialog(tab = "PV", group = "Orientation", enable = onPV and physical));
      parameter Real pfPV = 0.9 "Power factor in PVs" annotation(
        Dialog(tab = "PV", group = "AC-Conversion", enable = onPV and physical));
      parameter Real etaPV_DCAC = 0.9 "Efficiency of DC/AC conversion in PVs" annotation(
        Dialog(tab = "PV", group = "AC-Conversion", enable = onPV and physical));
      parameter Modelica.Units.SI.Power P_ins(min = 0, displayUnit = "kW") = 5000 "Installed kWp" annotation(
        Dialog(tab = "PV", group = "PV profil", enable = onPV and not physical));
      //Wind turbine
      parameter Boolean onWT = true "true = on, false = remove wind turbine" annotation(
        Dialog(tab = "Wind turbine", group = "General"));
      parameter Modelica.Units.SI.Height h = 10 "Height over ground" annotation(
        Dialog(tab = "Wind turbine", group = "Wind correction", enable = onWT));
      parameter Modelica.Units.SI.Height hRef = 10 "Reference height for wind measurement" annotation(
        Dialog(tab = "Wind turbine", group = "Wind correction", enable = onWT));
      parameter Real nWin = 0.4 "Height exponent for wind profile calculation" annotation(
        Dialog(tab = "Wind turbine", group = "Wind correction", enable = onWT));
      parameter Real scale = 1 "Scaling factor, used to allow adjusting the power output without changing the table" annotation(
        Dialog(tab = "Wind turbine", group = "Parameters", enable = onWT));
      parameter Boolean tableOnFile = false "true, if table is defined on file or in function usertab" annotation(
        Dialog(tab = "Wind turbine", group = "Parameters", enable = onWT));
      parameter String tableName = "NoName" "Table name on file or in function usertab (see documentation)" annotation(
        Dialog(tab = "Wind turbine", group = "Parameters", enable = onWT));
      parameter String fileName = "NoName" "File where matrix is stored" annotation(
        Dialog(tab = "Wind turbine", group = "Parameters", enable = onWT));
      parameter Real table[:, 2] = [3.5, 0; 5.5, 100; 12, 900; 14, 1000; 25, 1000] "Table of generated power (first column is wind speed, second column is power)" annotation(
        Dialog(tab = "Wind turbine", group = "Parameters", enable = onWT));
      parameter Real pfWin = 0.9 "Power factor in wind turbines" annotation(
        Dialog(tab = "Wind turbine", group = "AC-Conversion", enable = onWT));
      parameter Real etaWin_DCAC = 0.9 "Efficiency of DC/AC conversion in wind turbines" annotation(
        Dialog(tab = "Wind turbine", group = "AC-Conversion", enable = onWT));
      //Battery
      parameter Boolean onBat = true "true = on, false = remove battery" annotation(
        Dialog(tab = "Battery", group = "General"));
      parameter Modelica.Units.SI.Efficiency etaCha(max = 1) = 0.9 "Efficiency during charging" annotation(
        Dialog(tab = "Battery", group = "Parameter", enable = onBat));
      parameter Modelica.Units.SI.Efficiency etaDis(max = 1) = 0.9 "Efficiency during discharging" annotation(
        Dialog(tab = "Battery", group = "Parameter", enable = onBat));
      parameter Real SOC_start = deaBan + 0.01 "Initial charge, must be greater than deaBan" annotation(
        Dialog(tab = "Battery", group = "Parameter", enable = onBat));
      parameter Modelica.Units.SI.Energy EMax(min = 0, displayUnit = "kW.h") = 28800000 "Maximum available charge => 0" annotation(
        Dialog(tab = "Battery", group = "Parameter", enable = onBat));
      parameter Modelica.Units.SI.ElectricCurrent I_m = 130 "Nominal discharge current" annotation(
        Dialog(tab = "Battery", group = "Parameter", enable = onBat));
      parameter Real pfBat = 0.9 "Power factor in Battery" annotation(
        Dialog(tab = "Battery", group = "AC-Conversion", enable = onBat));
      parameter Real etaBat_DCAC = 0.95 "Efficiency of DC/AC conversion in Battery" annotation(
        Dialog(tab = "Battery", group = "AC-Conversion", enable = onBat));
      parameter Modelica.Units.SI.Power thrDis = -1 "Power threshold for discharging" annotation(
        Dialog(tab = "Battery", group = "Control", enable = onBat));
      parameter Modelica.Units.SI.Power thrCha = 1 "Power threshold for charging" annotation(
        Dialog(tab = "Battery", group = "Control", enable = onBat));
      parameter Real deaBan = 0.1 "Depth of discharge" annotation(
        Dialog(tab = "Battery", group = "Control", enable = onBat));
      //Electrolyser controller
      parameter Modelica.Units.SI.Power thrmax = 4000 "Max. Power threshold for electrolyser" annotation(
        Dialog(tab = "Electrolyser", group = "Control"));
      parameter Modelica.Units.SI.Power thrmin = 100 "Min. Power threshold for electrolyser" annotation(
        Dialog(tab = "Electrolyser", group = "Control"));
      // General
      parameter Modelica.Units.SI.Voltage V_nominal = 230 "Nominal voltage of line (V_nominal >= 0)";
      parameter Modelica.Units.SI.Voltage V_nominal_pv = V_nominal "Nominal voltage of PV (V_nominal_pv >= 0)";
      parameter Modelica.Units.SI.Voltage V_nominal_win = V_nominal "Nominal voltage of wind turbine (VWin_nominal >= 0)";
      parameter Modelica.Units.SI.Voltage V_nominal_bat = 51.2 "Nominal voltage of Battery (V_nominal_bat >= 0)";
      Modelica.Units.SI.Power Psup "Generated Power";
      Buildings.Electrical.AC.ThreePhasesBalanced.Sources.PVSimpleOriented pv(A = A_pv, pf = pfPV, fAct = fAct, eta = eta, til = til, azi = azi, linearized = linearized, eta_DCAC = etaPV_DCAC, V_nominal = V_nominal_pv) "PV panel" annotation(
        Placement(transformation(origin = {-66, -138}, extent = {{-10, -10}, {10, 10}})));
      Buildings.Electrical.AC.ThreePhasesBalanced.Sources.WindTurbine windTurbine(scale = scale, tableOnFile = tableOnFile, tableName = tableName, fileName = fileName, h = h, hRef = hRef, nWin = nWin, V_nominal = V_nominal_win, table = table, pf = pfWin, eta_DCAC = etaWin_DCAC) "Wind turbine" annotation(
        Placement(transformation(origin = {128, -108}, extent = {{-10, -10}, {10, 10}})));
      Buildings.Electrical.AC.ThreePhasesBalanced.Storage.Battery bat(SOC_start = SOC_start, EMax = EMax, V_nominal = V_nominal_bat, pf = pfBat, eta_DCAC = etaBat_DCAC, etaCha = etaCha, etaDis = etaDis) "Battery" annotation(
        Placement(transformation(origin = {278, -60}, extent = {{-10, -10}, {10, 10}})));
      Electrical.BatCon batCon(onBat = onBat, V_nominal_bat = V_nominal_bat, I_m = I_m, EMax = EMax, thrDis = thrDis, thrCha = thrCha, deaBan = deaBan) "Batery control" annotation(
        Placement(transformation(origin = {-50, 12}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.RealExpression P_sup(y = Psup) "Generated Power" annotation(
        Placement(transformation(origin = {-98, 28}, extent = {{-10, -10}, {10, 10}})));
      Buildings.Electrical.AC.ThreePhasesBalanced.Loads.Inductive Load(P_nominal = -2000, V_nominal = 480, mode = Buildings.Electrical.Types.Load.VariableZ_P_input) "Electricity demand into grid" annotation(
        Placement(transformation(origin = {-68, 24}, extent = {{20, -50}, {40, -30}}, rotation = -0)));
      Buildings.BoundaryConditions.WeatherData.Bus weaBus "Weather bus" annotation(
        Placement(transformation(origin = {-142, 86}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {-110, 78}, extent = {{-10, -10}, {10, 10}})));
      Buildings.Electrical.AC.ThreePhasesBalanced.Interfaces.Terminal_p term_p "Terminal" annotation(
        Placement(transformation(origin = {-164, -60}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -70}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealInput Pdem(final quantity = "Power demand", final unit = "W") "Electricity demand" annotation(
        Placement(transformation(origin = {-188, 12}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -52}, extent = {{-20, -20}, {20, 20}})));
      PV_Profil pv_profil(P_ins = P_ins) "PV Profil Block" annotation(
        Placement(transformation(origin = {-120, -138}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.BooleanExpression pvMod1(y = onPV) "on off condition" annotation(
        Placement(transformation(origin = {-38, -198}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Logical.Switch swPV1 "on off switch for pv" annotation(
        Placement(transformation(origin = {4, -196}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.BooleanExpression pvMod2(y = physical) annotation(
        Placement(transformation(origin = {-66, -166}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Logical.Switch swPV2 "switch between pyhsical and profil model" annotation(
        Placement(transformation(origin = {-28, -166}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.Constant P_pv_off(k = 0) annotation(
        Placement(transformation(origin = {-38, -220}, extent = {{-10, -10}, {10, 10}})));
      Buildings.Electrical.AC.OnePhase.Sources.FixedVoltage boundary(f = 50, V = 230) annotation(
        Placement(transformation(origin = {-158, -108}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Math.Gain GainPpv(k = etaPV_DCAC) "Power generated by PV" annotation(
        Placement(transformation(origin = {40, -196}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.BooleanExpression wtMod1(y = onWT) "on off condition" annotation(
        Placement(transformation(origin = {122, -148}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.Constant Wt_off(k = 0) annotation(
        Placement(transformation(origin = {122, -170}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Logical.Switch swWT1 "on off switch for wt" annotation(
        Placement(transformation(origin = {164, -146}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Math.Gain GainPwind(k = etaWin_DCAC) annotation(
        Placement(transformation(origin = {200, -146}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealInput pvProfil(final quantity = "Power", final unit = "W") "PV profil" annotation(
        Placement(transformation(origin = {-180, -142}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -12}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealOutput Ppv(final quantity = "Power", final unit = "W") "Power supply by PV" annotation(
        Placement(transformation(origin = {370, 90}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 90}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput Pwind(final quantity = "Power", final unit = "W") "Power supply by wind turbine" annotation(
        Placement(transformation(origin = {370, 70}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 70}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput Pload(final quantity = "Power", final unit = "W") "Power load" annotation(
        Placement(transformation(origin = {370, 50}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 50}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput SOCbat annotation(
        Placement(transformation(origin = {370, 28}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 30}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput Pbat(final quantity = "Power", final unit = "W") "Power stored in Battery (P > 0 charging,P < 0 discharging " annotation(
        Placement(transformation(origin = {370, 8}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 10}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.RealExpression PpvExpression(y = GainPpv.y) annotation(
        Placement(transformation(origin = {310, 90}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.RealExpression PwindExpression(y = GainPwind.y) annotation(
        Placement(transformation(origin = {310, 70}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.RealExpression PloadExpression(y = Pdem) annotation(
        Placement(transformation(origin = {310, 50}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.RealExpression SOCbatExpression(y = bat.SOC) annotation(
        Placement(transformation(origin = {310, 28}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.RealExpression PbatExpression(y = batCon.Pbat) annotation(
        Placement(transformation(origin = {310, 8}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealInput Pchp(unit = "W") "Power generated by CHP" annotation(
        Placement(transformation(origin = {-192, -34}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -92}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealOutput Ppemel annotation(
        Placement(transformation(origin = {96, 30}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -88}, extent = {{-10, -10}, {10, 10}})));
      Buildings.Electrical.AC.OnePhase.Sources.FixedVoltage boundary1(V = 230, f = 50) annotation(
        Placement(transformation(origin = {236, -90}, extent = {{-10, -10}, {10, 10}})));
      Buildings.Electrical.AC.ThreePhasesBalanced.Loads.Inductive Supply(P_nominal = -2000, V_nominal = 480, mode = Buildings.Electrical.Types.Load.VariableZ_P_input) annotation(
        Placement(transformation(origin = {-46, -8}, extent = {{20, -50}, {40, -30}})));
      PemelCon pemelCon(thrmax = thrmax, thrmin = thrmin) annotation(
        Placement(transformation(origin = {28, 24}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.BooleanInput Pemeloff annotation(
        Placement(transformation(origin = {-180, 54}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-80, -120}, extent = {{-20, -20}, {20, 20}}, rotation = 90)));
    equation
      Psup = GainPwind.y + GainPpv.y + Pchp;
//calculation of the total supplied electrical Power by PV, Wind and CHP
      connect(weaBus, pv.weaBus);
      connect(weaBus.winSpe, windTurbine.vWin);
      connect(term_p, Load.terminal) annotation(
        Line(points = {{-164, -60}, {-48, -60}, {-48, -16}}, color = {0, 120, 120}));
      connect(swPV2.u2, pvMod2.y) annotation(
        Line(points = {{-40, -166}, {-54, -166}}, color = {255, 0, 255}));
      connect(pvMod1.y, swPV1.u2) annotation(
        Line(points = {{-27, -198}, {-5, -198}, {-5, -196}, {-8, -196}}, color = {255, 0, 255}));
      connect(swPV2.u1, pv.P) annotation(
        Line(points = {{-40, -158}, {-46, -158}, {-46, -131}, {-55, -131}}, color = {0, 0, 127}));
      connect(pv_profil.P, swPV2.u3) annotation(
        Line(points = {{-109.4, -129.8}, {-99.4, -129.8}, {-99.4, -174}, {-40, -174}}, color = {0, 0, 127}));
      connect(swPV2.y, swPV1.u1) annotation(
        Line(points = {{-17, -166}, {-13, -166}, {-13, -188}, {-8, -188}}, color = {0, 0, 127}));
      connect(P_pv_off.y, swPV1.u3) annotation(
        Line(points = {{-27, -220}, {-5, -220}, {-5, -204}, {-8, -204}}, color = {0, 0, 127}));
      connect(boundary.terminal, pv.terminal) annotation(
        Line(points = {{-148, -108}, {-78, -108}, {-78, -138}, {-76, -138}}, color = {0, 120, 120}));
      connect(boundary.terminal, pv_profil.term_p) annotation(
        Line(points = {{-148, -108}, {-130, -108}, {-130, -138}}, color = {0, 120, 120}));
      connect(swPV1.y, GainPpv.u) annotation(
        Line(points = {{15, -196}, {27, -196}}, color = {0, 0, 127}));
      connect(boundary.terminal, windTurbine.terminal) annotation(
        Line(points = {{-148, -108}, {118, -108}}, color = {0, 120, 120}));
      connect(swWT1.y, GainPwind.u) annotation(
        Line(points = {{175, -146}, {187, -146}}, color = {0, 0, 127}));
      connect(Wt_off.y, swWT1.u3) annotation(
        Line(points = {{133, -170}, {155, -170}, {155, -154}, {152, -154}}, color = {0, 0, 127}));
      connect(wtMod1.y, swWT1.u2) annotation(
        Line(points = {{133, -148}, {155, -148}, {155, -146}, {152, -146}}, color = {255, 0, 255}));
      connect(windTurbine.P, swWT1.u1) annotation(
        Line(points = {{140, -102}, {146, -102}, {146, -138}, {152, -138}}, color = {0, 0, 127}));
      connect(pv_profil.pvProfil, pvProfil) annotation(
        Line(points = {{-132, -144}, {-180, -144}, {-180, -142}}, color = {0, 0, 127}));
      connect(batCon.SOC, bat.SOC) annotation(
        Line(points = {{-61, 4}, {-61, -32}, {290, -32}, {290, -54}}, color = {0, 0, 127}));
      connect(PbatExpression.y, Pbat) annotation(
        Line(points = {{321, 8}, {370, 8}}, color = {0, 0, 127}));
      connect(SOCbat, SOCbatExpression.y) annotation(
        Line(points = {{370, 28}, {322, 28}}, color = {0, 0, 127}));
      connect(PloadExpression.y, Pload) annotation(
        Line(points = {{322, 50}, {370, 50}}, color = {0, 0, 127}));
      connect(PwindExpression.y, Pwind) annotation(
        Line(points = {{322, 70}, {370, 70}}, color = {0, 0, 127}));
      connect(Ppv, PpvExpression.y) annotation(
        Line(points = {{370, 90}, {321, 90}}, color = {0, 0, 127}));
      connect(Pdem, batCon.Pdem) annotation(
        Line(points = {{-188, 12}, {-61, 12}}, color = {0, 0, 127}));
      connect(batCon.Pbat, bat.P) annotation(
        Line(points = {{-39, 12}, {281, 12}, {281, -50}, {278, -50}}, color = {0, 0, 127}));
      connect(Load.Pow, batCon.Pdem_out) annotation(
        Line(points = {{-28, -16}, {38, -16}, {38, 8}, {-39, 8}}, color = {0, 0, 127}));
      connect(boundary1.terminal, bat.terminal) annotation(
        Line(points = {{246, -90}, {258, -90}, {258, -60}, {268, -60}}, color = {0, 120, 120}));
      connect(term_p, Supply.terminal) annotation(
        Line(points = {{-164, -60}, {-42, -60}, {-42, -48}, {-26, -48}}, color = {0, 120, 120}));
      connect(P_sup.y, batCon.Psup) annotation(
        Line(points = {{-86, 28}, {-78, 28}, {-78, 20}, {-60, 20}}, color = {0, 0, 127}));
      connect(pemelCon.Pdem, batCon.Pdem_out) annotation(
        Line(points = {{16, 24}, {-28, 24}, {-28, 8}, {-40, 8}}, color = {0, 0, 127}));
      connect(batCon.Psup_out, pemelCon.Psup) annotation(
        Line(points = {{-40, 4}, {-18, 4}, {-18, 32}, {16, 32}}, color = {0, 0, 127}));
      connect(pemelCon.Ppemel, Ppemel) annotation(
        Line(points = {{40, 24}, {62, 24}, {62, 30}, {96, 30}}, color = {0, 0, 127}));
      connect(Supply.Pow, batCon.Psup_out) annotation(
        Line(points = {{-6, -48}, {10, -48}, {10, 4}, {-40, 4}}, color = {0, 0, 127}));
      connect(Pemeloff, pemelCon.PEMELoff) annotation(
        Line(points = {{-180, 54}, {-2, 54}, {-2, 16}, {16, 16}}, color = {255, 0, 255}));
      annotation(
        defaultComponentName = "elecProd",
        Diagram(coordinateSystem(extent = {{-220, 160}, {380, -240}})),
        Icon(graphics = {Bitmap(origin = {2, 5}, extent = {{-90, -91}, {90, 91}}, imageSource = ""), Text(origin = {-10, 254}, textColor = {0, 0, 255}, extent = {{-149, -114}, {151, -154}}, textString = "%name")}),
        Documentation(info = "<html><head></head><body><p>The electrical system for decentralized hydrogen production in the model is designed to handle the conversion, storage, and distribution of renewable energy, including photovoltaic (PV) and wind turbine (WT) technologies. It integrates battery storage (BAT) and grid interaction to manage electricity demand and supply efficiently.</p><h4>Components and Functionality:</h4><ol><li><strong>Photovoltaic (PV) System</strong>: Converts solar energy into electrical energy using the photoelectric effect. Various types of PV cells are used, with efficiencies influenced by their material and structure.</li><li><strong>Wind Turbine (WT)</strong>: Converts kinetic energy from the wind into electrical energy. The power generated depends on wind speed and turbine characteristics.</li><li><strong>Battery Storage (BAT)</strong>: Stores excess electrical energy generated by PV and WT systems. The battery management system controls charging and discharging to optimize battery life and ensure energy availability.</li><li><strong>Grid Interaction</strong>: Balances electricity supply and demand. Excess electricity can be fed into the grid, and shortages can be compensated by drawing power from the grid.</li><li><b>Battery Control:&nbsp;</b>&nbsp;The battery controller manages the battery's charging and discharging processes based on power thresholds, state of charge (SOC), and power demand/supply conditions. It ensures the battery operates efficiently and within safe limits.</li><li><b>Electrolyseur Control (pemelCon):&nbsp;</b>The PEMEC controller regulates the operation of the polymer electrolyte membrane electrolyzer, ensuring efficient hydrogen production by optimizing power input and maintaining safe operating conditions.<!--EndFragment--></li></ol></body></html>"));
    end elProduction_H2;

    model BatCon
      extends Modelica.Blocks.Icons.Block;
      Modelica.Units.SI.Power Pcha "Power charing battery";
      parameter Boolean onBat = true "true = on, false = remove battery";
      Modelica.Units.SI.Power P_chamax "max. charging Power";
      Modelica.Units.SI.Power P_dismax "max. discharging Power";
      Modelica.Units.NonSI.ElectricCharge_Ah Q_0 "Electric charge in Ah";
      Real c_rate "maximum permissible charging and discharging currents";
      parameter Modelica.Units.SI.ElectricCurrent I_m = 130 "Nominal discharge current";
      parameter Modelica.Units.SI.Energy EMax(min = 0, displayUnit = "kW.h") = 28800000 "Maximum available charge => 0";
      parameter Modelica.Units.SI.Voltage V_nominal_bat = 51.2 "Nominal voltage of Battery (V_nominal_bat >= 0)";
      parameter Modelica.Units.SI.Power thrDis "Power threshold for discharging < 0";
      parameter Modelica.Units.SI.Power thrCha "Power threshold for charging";
      parameter Real deaBan "Dead band width for switching charging/discharging on/off";
      Modelica.Blocks.Interfaces.RealInput Psup(unit = "W") "Supply power" annotation(
        Placement(transformation(origin = {-106, 80}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-106, 80}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealInput Pdem(unit = "W") "Demand power" annotation(
        Placement(transformation(origin = {-106, 0}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-106, 0}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealInput SOC(unit = "1") "State of Charge" annotation(
        Placement(transformation(origin = {-106, -80}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-106, -80}, extent = {{-20, -20}, {20, 20}})));
      Boolean cha "charging signal";
      Boolean dis "discharging signal";
      Boolean stby "stand by signal";
      Modelica.Blocks.Interfaces.RealOutput Pbat(unit = "W") "> 0 charging, <0 discharging" annotation(
        Placement(transformation(origin = {106, 0}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {106, 0}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput Psup_out(unit = "W") "Supply after charching battery" annotation(
        Placement(transformation(origin = {106, -30}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {106, -80}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput Pdem_out(unit = "W") "Demnad after discharching battery" annotation(
        Placement(transformation(origin = {104, -56}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {106, -40}, extent = {{-10, -10}, {10, 10}})));
    initial equation
      stby = false;
      cha = true;
      dis = false;
    algorithm
// Discharge --> 0
      when SOC > 1 - deaBan and Pdem < thrDis then
        stby := false;
        cha := false;
        dis := true;
      end when;
//Stand by --> 1
      when SOC < 0 + deaBan and Pdem < thrDis or SOC > 1 then
        stby := true;
        cha := false;
        dis := false;
      end when;
// Charge --> 2
      when SOC < 0 + deaBan + 0.01 and Pcha >= thrCha then
        stby := false;
        cha := true;
        dis := false;
      end when;
    equation
      if -Pdem > Psup then
        Pcha = 0;
      else
        Pcha = Psup + Pdem;
      end if;
      Q_0 = EMax/V_nominal_bat*1/3600;
      c_rate = I_m/Q_0;
      P_chamax = EMax*c_rate*1/3600;
      P_dismax = -EMax*c_rate*1/3600;
      if dis and Pdem > P_dismax and onBat then
        Pbat = Pdem;
        Pdem_out = Pdem - Pbat;
        Psup_out = Psup;
      elseif dis and Pdem < P_dismax and onBat then
        Pbat = P_dismax;
        Pdem_out = Pdem - Pbat;
        Psup_out = Psup;
      elseif cha and Pcha < P_chamax and onBat then
        Pbat = Pcha;
        Pdem_out = Pdem;
        Psup_out = Psup - Pbat;
      elseif cha and Pcha > P_chamax and onBat then
        Pbat = P_chamax;
        Pdem_out = Pdem;
        Psup_out = Psup - Pbat;
      elseif not onBat then
        Pbat = 0;
        Pdem_out = Pdem;
        Psup_out = Psup;
      else
        Pbat = 0;
        Pdem_out = Pdem;
        Psup_out = Psup;
      end if;
      annotation(
        Documentation(info = "<html><head></head><body>The BatCon block models a battery controller that manages the charging and discharging of a battery system based on various power thresholds and the State of Charge (SOC) of the battery.<div><br></div>
<p></p>
    <p align=\"center\">
    <img alt=\"Schematics of the controll logic\" src=\"modelica://Energysystem/Documentation/BatCon_Simple.png\">
    </p>
    <p></p>
</body></html>"),
        Icon(graphics = {Text(textColor = {0, 0, 255}, extent = {{-150, 150}, {150, 110}}, textString = "%name")}));
    end BatCon;

    model PemelCon
      extends Modelica.Blocks.Icons.Block;
      parameter Modelica.Units.SI.Power thrmax = 4000 "Max. Power threshold";
      parameter Modelica.Units.SI.Power thrmin = 100 "Min. Power threshold";
      Modelica.Blocks.Interfaces.RealInput Psup(unit = "W") "Power supply" annotation(
        Placement(transformation(origin = {-106, 80}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 80}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealInput Pdem(unit = "W") "Power denmand" annotation(
        Placement(transformation(origin = {-106, 0}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 0}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealOutput Ppemel(unit = "W") "Power fed to the electrolyzer" annotation(
        Placement(transformation(origin = {106, 0}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 0}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Units.SI.Power Pdiff = (Psup + Pdem)*0.9 "Power diffrence between supply and demand";
      Boolean on "Electrolyzer on";
      Boolean off "Electrolyzer off";
      Boolean on_max "Electrolyzer on, excess power into battery";
      Modelica.Blocks.Interfaces.RealOutput Psup_out(unit = "W") annotation(
        Placement(transformation(origin = {100, -58}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -58}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.BooleanInput PEMELoff "PEMEL off Singnal" annotation(
        Placement(transformation(origin = {-98, -72}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -76}, extent = {{-20, -20}, {20, 20}})));
    initial equation
      on = false;
      off = true;
      on_max = false;
    algorithm
      when Pdiff > thrmin and Pdiff < thrmax then
        on := true;
        off := false;
        on_max := false;
      end when;
      when Pdiff < thrmin then
        on := false;
        off := true;
        on_max := false;
      end when;
      when Pdiff > thrmax then
        on := false;
        off := false;
        on_max := true;
      end when;
    equation
      if PEMELoff then
        Ppemel = 0;
        Psup_out = Psup;
      else
        if on then
          Ppemel = Pdiff;
          Psup_out = 0;
        elseif off then
          Ppemel = 0;
          Psup_out = Psup;
        else
          Ppemel = thrmax;
          Psup_out = Pdiff - thrmax;
        end if;
      end if;
      annotation(
        Documentation(info = "<html><head></head><body><!--StartFragment--><div class=\"flex-shrink-0 flex flex-col relative items-end\"><div class=\"pt-0.5 juice:pt-0\"><div class=\"gizmo-bot-avatar flex h-6 w-6 items-center justify-center overflow-hidden rounded-full juice:h-8 juice:w-8\"><div class=\"relative p-1 rounded-sm flex items-center justify-center bg-token-main-surface-primary text-token-text-primary h-8 w-8\">The PEMEC controller regulates the operation of the polymer electrolyte membrane electrolyzer, ensuring efficient hydrogen production by optimizing power input and maintaining safe operating conditions.</div></div></div></div>
<p></p>
    <p align=\"center\">
    <img alt=\"Schematics of the controll logic\" src=\"modelica://Energysystem/Documentation/PEMELControlLogic.png\">
    </p>
    <p></p>

</body></html>"));
    end PemelCon;

    model PV_Profil
      parameter Modelica.Units.SI.Power P_ins(min = 0, displayUnit = "kW") = 5 "Installed peak power";
      Modelica.Blocks.Interfaces.RealOutput P(final quantity = "electrical Power", final unit = "W") "Generated power" annotation(
        Placement(transformation(origin = {106, 82}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {106, 82}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Sources.RealExpression Power_installed(y = P_ins) annotation(
        Placement(transformation(origin = {-86, 78}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Math.Product product annotation(
        Placement(transformation(origin = {-34, 64}, extent = {{-10, -10}, {10, 10}})));
      Buildings.Electrical.AC.ThreePhasesBalanced.Interfaces.Terminal_p term_p annotation(
        Placement(transformation(origin = {-100, -4}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {-100, -4}, extent = {{-10, -10}, {10, 10}})));
      Buildings.Electrical.AC.ThreePhasesBalanced.Loads.Capacitive load(P_nominal = 0, mode = Buildings.Electrical.Types.Load.VariableZ_P_input) annotation(
        Placement(transformation(origin = {-2, -4}, extent = {{-40, -10}, {-20, 10}})));
      Modelica.Blocks.Interfaces.RealInput pvProfil(final quantity = "Power", final unit = "Wh") "PV profil" annotation(
        Placement(transformation(origin = {-102, 56}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -58}, extent = {{-20, -20}, {20, 20}})));
    equation
      connect(Power_installed.y, product.u1) annotation(
        Line(points = {{-74, 78}, {-62, 78}, {-62, 70}, {-46, 70}}, color = {0, 0, 127}));
      connect(product.y, P) annotation(
        Line(points = {{-22, 64}, {6, 64}, {6, 82}, {106, 82}}, color = {0, 0, 127}));
      connect(product.y, load.Pow) annotation(
        Line(points = {{-22, 64}, {6, 64}, {6, -4}, {-22, -4}}, color = {0, 0, 127}));
      connect(term_p, load.terminal) annotation(
        Line(points = {{-100, -4}, {-42, -4}}, color = {0, 120, 120}));
      connect(product.u2, pvProfil) annotation(
        Line(points = {{-46, 58}, {-102, 58}, {-102, 56}}, color = {0, 0, 127}));
      annotation(
        defaultComponentName = "pv_profil",
        Icon(graphics = {Bitmap(origin = {3, 3}, extent = {{75, -99}, {-75, 99}}, imageSource = ""), Text(origin = {-6, 16}, textColor = {0, 0, 255}, extent = {{-149, -114}, {151, -154}}, textString = "%name")}),
        Documentation(info = "<html><head></head><body>In case a PV profil is available this model will be used.&nbsp;</body></html>"));
    end PV_Profil;

    package Validation
      extends Modelica.Icons.Example;

      model electrical_System_test
        extends Modelica.Icons.Example;
        elProduction elecProd(A_pv = 100, deaBan = 0.1, SOC_start = 0.11, scale = 0.25, table = [3.5, 0; 6.8, 483000; 11.75, 2000000; 25, 2000000; 28, 0], h = 16) annotation(
          Placement(transformation(origin = {2, 2}, extent = {{-10, -10}, {10, 10}})));
        Buildings.Electrical.AC.ThreePhasesBalanced.Sources.Grid gri(f = 50, V = 230) annotation(
          Placement(transformation(origin = {76, -24}, extent = {{-10, -10}, {10, 10}})));
        Modelica.Blocks.Sources.Constant const(k = 0) annotation(
          Placement(transformation(origin = {-96, -20}, extent = {{-10, -10}, {10, 10}})));
        Buildings.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(filNam = Modelica.Utilities.Files.loadResource("modelica://Energysystem/resources/weatherdata/FRA_Strasbourg.071900_IWEC.mos")) annotation(
          Placement(transformation(origin = {-66, 28}, extent = {{-40, 20}, {-20, 40}})));
        Modelica.Blocks.Math.Gain gain(k = -1000) annotation(
          Placement(transformation(origin = {-62, 20}, extent = {{-6, -6}, {6, 6}})));
        Modelica.Blocks.Sources.CombiTimeTable testTable(columns = 2:2, fileName = Modelica.Utilities.Files.loadResource("modelica://Energysystem/resources/loads/elLoads_all.txt"), table = [0, 0; 5000, 10; 20000, 20; 5000, 30; 20000, 40; 0, 50], tableName = "table1", tableOnFile = true) annotation(
          Placement(transformation(origin = {-98, 18}, extent = {{-10, -10}, {10, 10}})));
      equation
        connect(weaDat.weaBus, elecProd.weaBus);
        connect(gri.terminal, elecProd.term_p) annotation(
          Line(points = {{76, -34}, {76, -10}, {52, -10}, {52, -14}, {14, -14}, {14, -4}}, color = {150, 150, 150}));
        connect(const.y, elecProd.Pchp) annotation(
          Line(points = {{-84, -20}, {-10, -20}, {-10, -8}}, color = {0, 0, 127}));
        connect(gain.y, elecProd.Pdem) annotation(
          Line(points = {{-56, 20}, {-50, 20}, {-50, -4}, {-10, -4}}, color = {0, 0, 127}));
        connect(testTable.y[1], gain.u) annotation(
          Line(points = {{-86, 18}, {-78, 18}, {-78, 20}, {-70, 20}}, color = {0, 0, 127}));
        connect(const.y, elecProd.pvProfil) annotation(
          Line(points = {{-84, -20}, {-26, -20}, {-26, 0}, {-10, 0}}, color = {0, 0, 127}));
        annotation(
          experiment(StartTime = 0, StopTime = 31536000, Tolerance = 1e-6, Interval = 3600),
          Documentation(info = "<html><head></head><body>Test of the electrical System</body></html>"),
          Diagram(coordinateSystem(extent = {{-120, 80}, {100, -40}})));
      end electrical_System_test;

      model electrcial_System_hydrogen_test
        extends Modelica.Icons.Example;
        Buildings.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(filNam = Modelica.Utilities.Files.loadResource("modelica://Energysystem/resources/weatherdata/FRA_Strasbourg.071900_IWEC.mos")) annotation(
          Placement(transformation(origin = {-86, 2}, extent = {{-40, 20}, {-20, 40}})));
        Buildings.Electrical.AC.ThreePhasesBalanced.Sources.Grid grid(V = 230, f = 50) annotation(
          Placement(transformation(origin = {94, 120}, extent = {{-60, -20}, {-40, 0}})));
        Electrical.elProduction_H2 ElectricalSystem(azi(displayUnit = "rad"), onPV = true, onWT = true, onBat = false, A_pv = 10000, EMax = 1800000000, etaCha = 0.94, etaDis = 0.88, thrmax(displayUnit = "W") = 500000, V_nominal_bat = 380, thrmin = 300, I_m = 300, scale = 0.25, h = 16, table = [3.5, 0; 6.8, 483000; 11.75, 2000000; 25, 2000000; 28, 0]) annotation(
          Placement(transformation(origin = {-18, 104}, extent = {{-18, -18}, {18, 18}})));
        Data_Input data_Input annotation(
          Placement(transformation(origin = {-118, 58}, extent = {{-10, -10}, {10, 10}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression annotation(
          Placement(transformation(origin = {-48, 66}, extent = {{-10, -10}, {10, 10}})));
      protected
        Modelica.Blocks.Math.Gain gain(k = -1) annotation(
          Placement(transformation(origin = {-90, 62}, extent = {{-4, -4}, {4, 4}})));
        Modelica.Blocks.Math.MultiSum Sum_P_el_dem(nu = 3) annotation(
          Placement(transformation(origin = {-71, 81}, extent = {{-7, 7}, {7, -7}}, rotation = 90)));
      equation
        connect(weaDat.weaBus, ElectricalSystem.weaBus);
        connect(data_Input.pv_Profil, ElectricalSystem.pvProfil) annotation(
          Line(points = {{-108, 66}, {-102, 66}, {-102, 102}, {-40, 102}}, color = {0, 0, 127}));
        connect(data_Input.electricity_load, gain.u) annotation(
          Line(points = {{-108, 62}, {-94, 62}}, color = {0, 0, 127}));
        connect(booleanExpression.y, ElectricalSystem.Pemeloff) annotation(
          Line(points = {{-36, 66}, {-32, 66}, {-32, 82}}, color = {255, 0, 255}));
        annotation(
          experiment(StartTime = 1.04544e+07, StopTime = 41990400, Tolerance = 1e-06, Interval = 3600),
          Diagram(coordinateSystem(extent = {{-140, 140}, {60, 20}})),
          Icon,
          Documentation(info = "<html><head></head><body><div>Test of the hydrogen electrical system</div></body></html>"));
      end electrcial_System_hydrogen_test;
    end Validation;
    annotation(
      Documentation(info = "<html>
  <p>
  This package contains models for the electrical systems.
  </p>
  </html>"),
      Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics = {Line(points = {{32, 80}, {-36, 12}, {24, 12}, {-58, -74}, {-58, -74}}, color = {0, 0, 0}, smooth = Smooth.None), Polygon(points = {{-58, -74}, {-42, -24}, {-8, -56}, {-58, -74}}, lineColor = {0, 0, 0}, smooth = Smooth.None, fillPattern = FillPattern.Solid, fillColor = {0, 0, 0})}));
  end Electrical;

  package Hydrogen
    extends Modelica.Icons.Package;

    package PEM_Modell
      extends Modelica.Icons.Package;

      block PEMEL_cell
        parameter Modelica.Units.SI.Pressure P_O2 = 1e5 "Pressure of O2 outlet";
        parameter Modelica.Units.SI.Pressure P_H2 = 6e5 "Pressure of H2 outlet";
        parameter Modelica.Units.SI.Temperature T_op = 310 "Operating Temperature";
        parameter Modelica.Units.SI.Power P_el_max = 1900 "Max. Operating electrical Power";
        parameter Modelica.Units.SI.Voltage V_nom = 230 "Nominal operating Voltage";
        parameter Real N_cell = 10 "Number of cells in a stack";
        parameter Real N_stacks = 150 "Number of stacks";
        parameter Real eta_r = 0.98 "efficency of Rectifier";
        parameter Real eta_f = 0.94 "Faraday efficiency";
        parameter Modelica.Units.SI.Area A_mem = 1 "Cross section of the membrane" annotation(
          Dialog(group = "Membrane"));
        parameter Modelica.Units.SI.Length d_mem = 180e-6 "Tickness of Membran" annotation(
          Dialog(group = "Membrane"));
        parameter Real lamda = 24 "Humidity factor" annotation(
          Dialog(group = "Membrane"));
        parameter Modelica.Units.SI.CurrentDensity J_0a = 1e-3 "Exchange current density, anode" annotation(
          Dialog(group = "Anode and Cathode properties"));
        parameter Modelica.Units.SI.CurrentDensity J_0c = 1000 "Exchange current density, cathode" annotation(
          Dialog(group = "Anode and Cathode properties"));
        parameter Real alpha_a = 0.8 "Symmetry factor anode" annotation(
          Dialog(group = "Anode and Cathode properties"));
        parameter Real alpha_c = 0.25 "Symmetry factor cathode" annotation(
          Dialog(group = "Anode and Cathode properties"));
        Energysystem.Hydrogen.PEM_Modell.PEM_cell_libary.J_cell j_cell(A_mem = A_mem) "Current density [A/m^2]" annotation(
          Placement(visible = true, transformation(origin = {73, -205}, extent = {{-33, -33}, {33, 33}}, rotation = 0)));
        Energysystem.Hydrogen.PEM_Modell.PEM_cell_libary.V_oc v_oc(T_op = T_op, P_O2 = P_O2, P_H2 = P_H2) "open circuit voltage [V]" annotation(
          Placement(visible = true, transformation(origin = {212, -524}, extent = {{-32, -32}, {32, 32}}, rotation = 0)));
        Energysystem.Hydrogen.PEM_Modell.PEM_cell_libary.V_ohm v_ohm(lamda = lamda, d_mem = d_mem, T_op = T_op) "ohmic voltage [V]" annotation(
          Placement(visible = true, transformation(origin = {213, -285}, extent = {{-33, -33}, {33, 33}}, rotation = 0)));
        Energysystem.Hydrogen.PEM_Modell.PEM_cell_libary.V_act_i v_act_anode(T_op = T_op, J_0i = J_0a, alpha_i = alpha_a) "activation voltage anode [V]" annotation(
          Placement(visible = true, transformation(origin = {213.273, -365.273}, extent = {{-39.2727, -32.7273}, {32.7273, 39.2727}}, rotation = 0)));
        Energysystem.Hydrogen.PEM_Modell.PEM_cell_libary.V_act_i v_act_cathode(T_op = T_op, J_0i = J_0c, alpha_i = alpha_c) "activation voltage cathode [V]" annotation(
          Placement(visible = true, transformation(origin = {212.364, -444.364}, extent = {{-40.3636, -33.6364}, {33.6364, 40.3636}}, rotation = 0)));
        Energysystem.Hydrogen.PEM_Modell.PEM_cell_libary.m_dot mass_volum_flow(N_cell = N_cell, N_stacks = N_stacks, eta_faraday = eta_f) "Mass and Volum flow rates of H2 and H20" annotation(
          Placement(transformation(origin = {258, 48}, extent = {{-36, -36}, {36, 36}})));
        Modelica.Blocks.Math.MultiSum E(nu = 4) "real Cell Voltage after losses  [V]" annotation(
          Placement(visible = true, transformation(origin = {360, -404}, extent = {{-40, -40}, {40, 40}}, rotation = 0)));
        Energysystem.Hydrogen.PEM_Modell.PEM_cell_libary.V_cell_check E_cell_chcek annotation(
          Placement(visible = true, transformation(origin = {452, -404}, extent = {{-28, -28}, {28, 28}}, rotation = 0)));
        Energysystem.Hydrogen.PEM_Modell.PEM_cell_libary.Pump consumer_pump(P_H2 = P_H2) annotation(
          Placement(transformation(origin = {-100, 60}, extent = {{-12, -12}, {12, 12}})));
        PEM_cell_libary.I_cell i_cell(N_cell = N_cell, N_stacks = N_stacks, eta_r = eta_r, V_nom = V_nom) annotation(
          Placement(transformation(origin = {33, 60}, extent = {{-29, -28}, {29, 28}})));
        PEM_cell_libary.eta_cell efficencies(N_cell = N_cell, N_stacks = N_stacks) annotation(
          Placement(transformation(origin = {276, -80}, extent = {{-34, -32}, {34, 32}})));
        Modelica.Blocks.Interfaces.RealInput P_el(unit = "W") "electrical Power fed into PEMEL" annotation(
          Placement(transformation(origin = {-160, 52}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 0}, extent = {{-20, -20}, {20, 20}})));
        Modelica.Blocks.Interfaces.RealOutput m_dot_H2(unit = "kg/s") "Mass flow H2" annotation(
          Placement(transformation(origin = {410, 90}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 24}, extent = {{-10, -10}, {10, 10}})));
        Modelica.Blocks.Interfaces.RealOutput m_dot_H2O(unit = "kg/s") "Mass flow H2O" annotation(
          Placement(transformation(origin = {410, 34}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -24}, extent = {{-10, -10}, {10, 10}})));
        Modelica.Blocks.Interfaces.RealOutput m_dot_O2(unit = "kg/s") "Mass flow O2" annotation(
          Placement(transformation(origin = {410, 60}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 0}, extent = {{-10, -10}, {10, 10}})));
        Modelica.Blocks.Interfaces.RealOutput V_dot_H2(unit = "m3/s") "Volume flow H2" annotation(
          Placement(transformation(origin = {410, -2}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -68}, extent = {{-10, -10}, {10, 10}})));
        Modelica.Blocks.Interfaces.RealOutput V_dot_H2O(unit = "m3/s") "Volume flow H2O" annotation(
          Placement(transformation(origin = {410, -28}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -90}, extent = {{-10, -10}, {10, 10}})));
        Modelica.Blocks.Interfaces.RealOutput V_dot_O2(unit = "m3/s") "Volume flow O2" annotation(
          Placement(transformation(origin = {410, 16}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -46}, extent = {{-10, -10}, {10, 10}})));
        Modelica.Blocks.Interfaces.RealOutput eta_cell(unit = "1") annotation(
          Placement(transformation(origin = {410, -52}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 70}, extent = {{-10, -10}, {10, 10}})));
        Modelica.Blocks.Interfaces.RealOutput eta_energy(unit = "1") annotation(
          Placement(transformation(origin = {410, -78}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 90}, extent = {{-10, -10}, {10, 10}})));
      equation
        connect(j_cell.J_cell, v_ohm.J) annotation(
          Line(points = {{102, -204}, {140, -204}, {140, -260}, {184, -260}}, color = {0, 0, 127}));
        connect(j_cell.J_cell, v_act_anode.J) annotation(
          Line(points = {{102, -204}, {140, -204}, {140, -340}, {184, -340}}, color = {0, 0, 127}));
        connect(j_cell.J_cell, v_act_cathode.J) annotation(
          Line(points = {{102, -204}, {140, -204}, {140, -418}, {182, -418}}, color = {0, 0, 127}));
        connect(v_oc.V_OC, E.u[1]) annotation(
          Line(points = {{240, -524}, {284, -524}, {284, -404}, {320, -404}}, color = {0, 0, 127}));
        connect(v_act_cathode.V_act_i, E.u[2]) annotation(
          Line(points = {{242, -444}, {284, -444}, {284, -404}, {320, -404}}, color = {0, 0, 127}));
        connect(v_act_anode.V_act_i, E.u[3]) annotation(
          Line(points = {{242, -366}, {284, -366}, {284, -404}, {320, -404}}, color = {0, 0, 127}));
        connect(v_ohm.V_ohm, E.u[4]) annotation(
          Line(points = {{242, -284}, {284, -284}, {284, -404}, {320, -404}}, color = {0, 0, 127}));
        connect(E.y, E_cell_chcek.V_cell_in) annotation(
          Line(points = {{406, -404}, {426, -404}}, color = {0, 0, 127}));
        connect(j_cell.I_cell, i_cell.I_cell) annotation(
          Line(points = {{44, -178}, {14, -178}, {14, 8}, {96, 8}, {96, 80}, {65, 80}}, color = {0, 0, 127}));
        connect(i_cell.I_cell, mass_volum_flow.I_cell) annotation(
          Line(points = {{65, 80}, {120, 80}, {120, 66}, {226, 66}}, color = {0, 0, 127}));
        connect(consumer_pump.P_el_out, efficencies.P_el) annotation(
          Line(points = {{-89, 60}, {-84, 60}, {-84, -92}, {246, -92}}, color = {0, 0, 127}));
        connect(efficencies.E, E_cell_chcek.V_cell_out) annotation(
          Line(points = {{246, -106}, {220, -106}, {220, -212}, {490, -212}, {490, -404}, {478, -404}}, color = {0, 0, 127}));
        connect(efficencies.P_el, consumer_pump.P_el_out) annotation(
          Line(points = {{246, -92}, {-24, -92}, {-24, 60}, {-90, 60}}, color = {0, 0, 127}));
        connect(i_cell.I_cell, efficencies.I_cell) annotation(
          Line(points = {{65, 80}, {120, 80}, {120, -68}, {246, -68}}, color = {0, 0, 127}));
        connect(efficencies.m_dot, mass_volum_flow.m_dot_H2) annotation(
          Line(points = {{246, -54}, {218, -54}, {218, -4}, {304, -4}, {304, 76}, {290, 76}}, color = {0, 0, 127}));
        connect(P_el, consumer_pump.P_el_in) annotation(
          Line(points = {{-160, 52}, {-110, 52}}, color = {0, 0, 127}));
        connect(consumer_pump.P_el_out, i_cell.P_el) annotation(
          Line(points = {{-90, 60}, {2, 60}}, color = {0, 0, 127}));
        connect(mass_volum_flow.m_dot_H2, m_dot_H2) annotation(
          Line(points = {{290, 76}, {334, 76}, {334, 90}, {410, 90}}, color = {0, 0, 127}));
        connect(mass_volum_flow.m_dot_O2, m_dot_O2) annotation(
          Line(points = {{290, 66}, {364, 66}, {364, 60}, {410, 60}}, color = {0, 0, 127}));
        connect(mass_volum_flow.m_dot_H2O, m_dot_H2O) annotation(
          Line(points = {{290, 56}, {352, 56}, {352, 34}, {410, 34}}, color = {0, 0, 127}));
        connect(mass_volum_flow.V_dot_O2, V_dot_O2) annotation(
          Line(points = {{290, 44}, {344, 44}, {344, 16}, {410, 16}}, color = {0, 0, 127}));
        connect(mass_volum_flow.V_dot_H2, V_dot_H2) annotation(
          Line(points = {{290, 30}, {320, 30}, {320, -2}, {410, -2}}, color = {0, 0, 127}));
        connect(mass_volum_flow.V_dot_H2O, V_dot_H2O) annotation(
          Line(points = {{290, 20}, {310, 20}, {310, -28}, {410, -28}}, color = {0, 0, 127}));
        connect(efficencies.eta_cell, eta_cell) annotation(
          Line(points = {{306, -64}, {338, -64}, {338, -52}, {410, -52}}, color = {0, 0, 127}));
        connect(efficencies.eta_energy, eta_energy) annotation(
          Line(points = {{306, -96}, {346, -96}, {346, -78}, {410, -78}}, color = {0, 0, 127}));
        annotation(
          Diagram(coordinateSystem(extent = {{-240, 100}, {500, -580}}), graphics = {Text(origin = {425, -163}, extent = {{-69, 13}, {69, -13}}, textString = "Calculation of Voltage losses"), Bitmap(origin = {386, -478}, extent = {{-70, -48}, {70, 48}}, imageSource = "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"), Rectangle(origin = {241, -362}, lineColor = {255, 0, 0}, lineThickness = 0.5, extent = {{-259, 210}, {259, -210}})}),
          Icon(graphics = {Text(textColor = {0, 0, 255}, extent = {{-150, 150}, {150, 110}}, textString = "%name"), Bitmap(origin = {0, 2}, extent = {{-96, -86}, {96, 86}}, imageSource = "")}),
          experiment(StartTime = 0, StopTime = 1, Tolerance = 1e-6, Interval = 0.002),
          Documentation(info = "<html><head></head><body><p>PEMEC have gained importance in recent years. The reason for this is their adaptability to variable energy inputs from renewable energy sources. Investigating the effect of renewable energy’s fluctuating supply on electrolyser efficiency is a crucial area of research. The <b>Figure </b>shows the schematic structure of a PEMEC, where the following specified reactions take place:</p>
    
    <p><b>Cathode:</b> 2H<sup>+</sup> + 2e<sup>-</sup> → H<sub>2</sub>&nbsp;</p>
    <p><b>Anode:</b> H<sub>2</sub>O → 2H<sup>+</sup> + ½ O<sub>2</sub> + 2e<sup>-</sup>&nbsp;</p>
    <p><b>Total:</b> H<sub>2</sub>O(l) → H<sub>2</sub>(g) + ½ O<sub>2</sub>(g)&nbsp;</p>

<p></p>
    <p align=\"center\">
    <img alt=\"Schematics of the controll logic\" src=\"modelica://Energysystem/Documentation/Aufbau_Pem.jpg\" width=\"70%\">
    </p><p align=\"center\"><br></p>
    
    
      <h3>Physical Modelling</h3>
    <p>All equations model only one PEMEC cell, but can be scaled according to Ohm’s law and Kirchhoff’s rules and the circuit diagram. The produced hydrogen mass flow rate is very important for solid working RES. This, together with the required water mass flow from the reaction, can be calculated using the following equation, where i indicates either water, oxygen or hydrogen in this case:</p>
    
    <p>ṁ<sub>i</sub> = v<sub>i</sub> · M<sub>i</sub> · <sup>I<sub>cell</sub></sup>⁄<sub>n · F</sub>&nbsp;</p>
    <p>where v<sub>i</sub> and M<sub>i</sub> are the stoichiometric coefficients and the molar mass, respectively. These are multiplied by the cell current I<sub>cell</sub> and divided by the number of moles transferred n and the Faraday constant F. In this case n = 2 and v<sub>1</sub> = 1 [106]. For calculating I<sub>cell</sub> losses must be considered. These losses can be expressed by calculating the operating voltage (U) of an electrolyser:</p>

    <p>U = U<sub>oc</sub> + U<sub>act</sub> + U<sub>ohm</sub> + U<sub>con</sub>.</p>
    <p>It is composed of the open circuit voltage U<sub>oc</sub> and the three overvoltages: the ohmic voltage U<sub>ohm</sub>, the activation voltage U<sub>act</sub> and the transport voltage U<sub>con</sub>&nbsp;. Once the losses due to overcoming the voltages are obtained, the produced hydrogen mass flow can be calculated by considering the Faraday efficiency, which represents the correlation between the actual and presumed efficiency of the produced hydrogen output and is expressed as:</p>

    <p>η<sub>F</sub> = <sup>ṁ · n · F</sup>⁄<sub>I · M<sub>H2</sub></sub></p>
    <p>Voltage efficiency, η<sub>U</sub>, compares the thermo-neutral voltage, U<sub>tn</sub> (or the minimum required voltage for reaction), to the actual cell voltage, U<sub>cell</sub>, integrating the enthalpy change ΔH and Gibbs free energy ΔG under standard conditions. At this point it is possible to determine the overall efficiency η<sub>cell</sub> of the cell as well:</p>

    <p>U<sub>tn</sub> = <sup>ΔH</sup>⁄<sub>n · F</sub> = <sup>ΔG + T · ΔS</sup>⁄<sub>n ⁄ F</sub> = 1.48 V,&nbsp;</p>
    <p>η<sub>U</sub> = <sup>U<sub>tn</sub></sup>⁄<sub>U<sub>cell</sub></sub>&nbsp;</p>
    <p>η<sub>cell</sub> = η<sub>F</sub> · η<sub>U</sub>&nbsp;</p>
    <p>Energy efficiency, η<sub>E</sub>, evaluates the benefit against the input, factoring in the Higher Heating Value (HHV) of hydrogen (39.4 kWh/kg) to convert mass flow into generated power, alongside electrical power P<sub>el</sub>, heat recovered Q<sub>hex</sub>, and added heat Q<sub>add</sub> [91]:</p>
    
    <p>η<sub>E</sub> = <sup>ṁ · HHV</sup>⁄<sub>P<sub>el</sub> + Q̇<sub>hex</sub> + Q̇<sub>add</sub></sub>&nbsp;</p>

    <p align=\"left\"><b>Referece:</b></p><p align=\"left\">Liso, V., Savoia, G., Araya, S. S., Cinti, G., and Kær, S. K. “Modelling and Experimental
Analysis of a Polymer Electrolyte Membrane Water Electrolysis Cell at Different Operating
Temperatures”. In: Energies 11.12 (2018). issn: 1996-1073. doi: 10.3390/en11123273<!--EndFragment-->

</p><p align=\"left\"><!--StartFragment-->Marangio, F., Santarelli, M., and Calì, M. “Theoretical model and experimental analysis of a
high pressure PEM water electrolyser for hydrogen production”. In: International Journal of
Hydrogen Energy 34.3 (2009), pp. 1143–1158. issn: 0360-3199. doi: 10 . 1016 / j . ijhydene .
2008.11.083<!--EndFragment-->&nbsp;&nbsp;</p><p align=\"left\"><!--StartFragment-->Ojong, T. E. Characterization of the Performance of PEM Water Electrolysis Cells operating
with and without Flow Channels, based on Experimentally Validated Semi-empirical CoupledPhysics Models. Ed. by Fraunhofer. 2018. doi: 10.24406/publica-fhg-282794<!--EndFragment-->&nbsp;&nbsp;</p><p align=\"left\"><!--StartFragment-->Ruiz Diaz, D. F. Mathematical Modeling of Polymer Electrolyte Membrane Water Electrolysis
Cell with a Component-level Approach. Ed. by UC Irvine. 2021. url: https://escholarship.
org/uc/item/8cv660cn<!--EndFragment-->&nbsp;&nbsp;</p><p align=\"left\"><!--StartFragment-->&nbsp;Sood, S., Prakash, O., Boukerdja, M., Dieulot, J.-Y., Ould-Bouamama, B., Bressel, M., and
Gehin, A.-L. “Generic Dynamical Model of PEM Electrolyser under Intermittent Sources”. In:
Energies 13.24 (2020). issn: 1996-1073. doi: 10.3390/en13246556.<!--EndFragment--></p>
    <p></p>

</body></html>"));
      end PEMEL_cell;

      package PEM_cell_libary
        extends Modelica.Icons.Package;

        block asinh
          extends Modelica.Blocks.Icons.Block;
          Modelica.Blocks.Interfaces.RealInput u annotation(
            Placement(visible = true, transformation(origin = {-100, 56}, extent = {{-12, -12}, {12, 12}}, rotation = 0), iconTransformation(origin = {-90, 6.66134e-16}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealOutput y annotation(
            Placement(visible = true, transformation(origin = {100, -50}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Log log annotation(
            Placement(visible = true, transformation(origin = {-10, -50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Sqrt sqrt1 annotation(
            Placement(visible = true, transformation(origin = {50, 44}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.Constant const(k = 1) annotation(
            Placement(visible = true, transformation(origin = {-50, 10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Add add annotation(
            Placement(visible = true, transformation(origin = {10, 44}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product annotation(
            Placement(visible = true, transformation(origin = {-50, 50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Add add1 annotation(
            Placement(visible = true, transformation(origin = {-50, -50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
        equation
          connect(add.y, sqrt1.u) annotation(
            Line(points = {{21, 44}, {38, 44}}, color = {0, 0, 127}));
          connect(u, product.u1) annotation(
            Line(points = {{-100, 56}, {-62, 56}}, color = {0, 0, 127}));
          connect(u, product.u2) annotation(
            Line(points = {{-100, 56}, {-71, 56}, {-71, 44}, {-62, 44}}, color = {0, 0, 127}));
          connect(product.y, add.u1) annotation(
            Line(points = {{-39, 50}, {-2, 50}}, color = {0, 0, 127}));
          connect(u, add1.u1) annotation(
            Line(points = {{-100, 56}, {-71, 56}, {-71, -44}, {-62, -44}}, color = {0, 0, 127}));
          connect(sqrt1.y, add1.u2) annotation(
            Line(points = {{61, 44}, {80, 44}, {80, -20}, {-80, -20}, {-80, -56}, {-62, -56}}, color = {0, 0, 127}));
          connect(add1.y, log.u) annotation(
            Line(points = {{-39, -50}, {-22, -50}}, color = {0, 0, 127}));
          connect(log.y, y) annotation(
            Line(points = {{1, -50}, {100, -50}}, color = {0, 0, 127}));
          connect(add.u2, const.y) annotation(
            Line(points = {{-2, 38}, {-20, 38}, {-20, 10}, {-39, 10}}, color = {0, 0, 127}));
          annotation(
            Diagram(coordinateSystem(extent = {{-100, -100}, {100, 100}})),
            Documentation(info = "<html>
        <p>
Calculation of arsinh(x):
        </p>
<p align=\"center\" style=\"font-style:italic;\">
  arsinh(x) = ln( x + √(x<sup>2</sup> + 1) ) mit x ∈ ℝ
</p>
        </html>"));
        end asinh;

        block eta_cell
          extends Modelica.Blocks.Icons.Block;
          Modelica.Units.SI.FaradayConstant F = Modelica.Constants.F "Faraday constant";
          Real n = 2 "Molecules transferred";
          Modelica.Units.SI.MolarMass M_H2 = 0.00201588 "Molar Mass of Hydrogen";
          Modelica.Units.SI.Voltage V_TN = 1.48 "thermo-neutral voltage, also called the minimum required voltage";
          parameter Real N_cell = 10 "Number of cells in a stack";
          parameter Real N_stacks = 150 "Number of stacks";
          Real N_cell_total = N_cell*N_stacks "total number of cells";
          Real eta_farraday "Farrady efficiency";
          Real eta_voltage "Voltage efficiency";
          Modelica.Blocks.Interfaces.RealInput m_dot(unit = "kg/s") "Mass flow H2" annotation(
            Placement(visible = true, transformation(origin = {-140, 120}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-90, 80}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealInput I_cell(unit = "A") "Cell current" annotation(
            Placement(visible = true, transformation(origin = {-140, 40}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-90, 40}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealInput E(unit = "V") "real Cell Voltage after losses" annotation(
            Placement(visible = true, transformation(origin = {-140, -60}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-90, -80}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealOutput eta_cell(unit = "1") "Overall cell efficiency" annotation(
            Placement(visible = true, transformation(origin = {120, 108}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, 50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Energysystem.Hydrogen.PEM_Modell.PEM_cell_libary.eta_energy_HHV eta_energy_HHV(N_cell = N_cell) annotation(
            Placement(visible = true, transformation(origin = {-30, -110}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealInput P_el(unit = "W") "Power" annotation(
            Placement(visible = true, transformation(origin = {-140, -150}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-90, -40}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealOutput eta_energy(unit = "1") "energy efficiency" annotation(
            Placement(visible = true, transformation(origin = {120, -110}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, -50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
        algorithm
          if E == 0 or I_cell == 0 then
            eta_farraday := 0;
            eta_voltage := 0;
            eta_cell := eta_farraday*eta_voltage;
          else
            eta_farraday := (m_dot*n*F)/(N_cell_total*I_cell*M_H2);
            eta_voltage := V_TN/E;
            eta_cell := eta_farraday*eta_voltage;
          end if;
        equation
          connect(eta_energy_HHV.m_dot, m_dot) annotation(
            Line(points = {{-39, -104}, {-109, -104}, {-109, 120}, {-140, 120}}, color = {0, 0, 127}));
          connect(P_el, eta_energy_HHV.P_el) annotation(
            Line(points = {{-140, -150}, {-60, -150}, {-60, -116}, {-39, -116}}, color = {0, 0, 127}));
          connect(eta_energy_HHV.eta_energy, eta_energy) annotation(
            Line(points = {{-21, -110}, {120, -110}}, color = {0, 0, 127}));
          annotation(
            Diagram(coordinateSystem(extent = {{-140, 140}, {120, -180}}), graphics = {Bitmap(origin = {204, -42}, extent = {{-44, -40}, {44, 40}}, imageSource = "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"), Bitmap(origin = {205, 12}, extent = {{-57, -40}, {57, 40}}, imageSource = ""), Bitmap(origin = {245, -78}, extent = {{-41, -24}, {41, 24}}, imageSource = "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")}));
        end eta_cell;

        block eta_energy_HHV
          extends Modelica.Blocks.Icons.Block;
          parameter Real N_cell = 10 "Number of cells in a stack";
          Real HVV(final unit = "J/kg") = 39.4*3.6e7;
          Modelica.Blocks.Interfaces.RealInput m_dot(final unit = "kg/s") "mass flow H2" annotation(
            Placement(visible = true, transformation(origin = {-100, 70}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-90, 60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealInput P_el(final unit = "W") "Power" annotation(
            Placement(visible = true, transformation(origin = {-100, -60}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-90, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealOutput eta_energy "energy efficiency" annotation(
            Placement(visible = true, transformation(origin = {100, 0}, extent = {{-14, -14}, {14, 14}}, rotation = 0), iconTransformation(origin = {90, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Continuous.Integrator int_m annotation(
            Placement(transformation(origin = {-56, 70}, extent = {{-10, -10}, {10, 10}})));
          Modelica.Blocks.Continuous.Integrator int_P annotation(
            Placement(transformation(origin = {-54, -60}, extent = {{-10, -10}, {10, 10}})));
        algorithm
          if int_P.y == 0 then
            eta_energy := 0;
          else
            eta_energy := (int_m.y*HVV)/(int_P.y*N_cell);
          end if;
        equation
          connect(m_dot, int_m.u) annotation(
            Line(points = {{-100, 70}, {-68, 70}}, color = {0, 0, 127}));
          connect(P_el, int_P.u) annotation(
            Line(points = {{-100, -60}, {-66, -60}}, color = {0, 0, 127}));
          annotation(
            Diagram(graphics = {Bitmap(origin = {21, -68}, extent = {{-41, -24}, {41, 24}}, imageSource = "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")}, coordinateSystem(extent = {{-100, -100}, {100, 100}})));
        end eta_energy_HHV;

        model Sigma_mem
          extends Modelica.Blocks.Icons.Block;
          parameter Real lamda = 24 "Humidity factor";
          parameter Modelica.Units.SI.Temperature T_op = 310 "Operating Temperature";
          Modelica.Blocks.Math.Add sub(k2 = -1) annotation(
            Placement(visible = true, transformation(origin = {-10, -68}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Exp exp annotation(
            Placement(visible = true, transformation(origin = {70, -62}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product1 annotation(
            Placement(visible = true, transformation(origin = {-50, 74}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.RealExpression Exlamda(y = lamda) "Humidity factor [-]" annotation(
            Placement(visible = true, transformation(origin = {-100, 80}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-90, 50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Add sub2(k2 = -1) annotation(
            Placement(visible = true, transformation(origin = {-10, 68}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealOutput Sigma_mem "Proton conductivity of PEM [S/m]" annotation(
            Placement(visible = true, transformation(origin = {100, 62}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.Constant const(k = 0.005139) annotation(
            Placement(visible = true, transformation(origin = {-90, 50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.Constant const2(k = 1268) annotation(
            Placement(visible = true, transformation(origin = {-10, -20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.Constant const4(k = 303) annotation(
            Placement(visible = true, transformation(origin = {-90, -20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.Constant const3(k = 1) annotation(
            Placement(visible = true, transformation(origin = {-90, 10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product output_Sigma_mem annotation(
            Placement(visible = true, transformation(origin = {50, 62}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.Constant const1(k = 0.00326) annotation(
            Placement(visible = true, transformation(origin = {-50, 40}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.RealExpression ExT(y = T_op) "Temperature [K]" annotation(
            Placement(visible = true, transformation(origin = {-100, -80}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-90, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product annotation(
            Placement(visible = true, transformation(origin = {30, -62}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Division division annotation(
            Placement(visible = true, transformation(origin = {-50, -14}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.Constant const5(k = 1) annotation(
            Placement(visible = true, transformation(origin = {-90, -50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Division division1 annotation(
            Placement(visible = true, transformation(origin = {-50, -74}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
        equation
          connect(const.y, product1.u2) annotation(
            Line(points = {{-79, 50}, {-71, 50}, {-71, 68}, {-62, 68}}, color = {0, 0, 127}));
          connect(product1.y, sub2.u1) annotation(
            Line(points = {{-39, 74}, {-22, 74}}, color = {0, 0, 127}));
          connect(output_Sigma_mem.y, Sigma_mem) annotation(
            Line(points = {{61, 62}, {100, 62}}, color = {0, 0, 127}));
          connect(product.y, exp.u) annotation(
            Line(points = {{41, -62}, {58, -62}}, color = {0, 0, 127}));
          connect(division1.y, sub.u2) annotation(
            Line(points = {{-39, -74}, {-22, -74}}, color = {0, 0, 127}));
          connect(sub2.y, output_Sigma_mem.u1) annotation(
            Line(points = {{1, 68}, {38, 68}}, color = {0, 0, 127}));
          connect(const3.y, division.u1) annotation(
            Line(points = {{-79, 10}, {-70, 10}, {-70, -8}, {-62, -8}}, color = {0, 0, 127}));
          connect(const5.y, division1.u1) annotation(
            Line(points = {{-79, -50}, {-70.4, -50}, {-70.4, -68}, {-62.4, -68}}, color = {0, 0, 127}));
          connect(const1.y, sub2.u2) annotation(
            Line(points = {{-39, 40}, {-32, 40}, {-32, 61.5}, {-22, 61.5}, {-22, 62}}, color = {0, 0, 127}));
          connect(const4.y, division.u2) annotation(
            Line(points = {{-79, -20}, {-62, -20}}, color = {0, 0, 127}));
          connect(exp.y, output_Sigma_mem.u2) annotation(
            Line(points = {{81, -62}, {90, -62}, {90, 40}, {20, 40}, {20, 56}, {38, 56}}, color = {0, 0, 127}));
          connect(sub.y, product.u2) annotation(
            Line(points = {{1, -68}, {18, -68}}, color = {0, 0, 127}));
          connect(division.y, sub.u1) annotation(
            Line(points = {{-39, -14}, {-29.8, -14}, {-29.8, -62}, {-22, -62}}, color = {0, 0, 127}));
          connect(product.u1, const2.y) annotation(
            Line(points = {{18, -56}, {10, -56}, {10, -20}, {2, -20}}, color = {0, 0, 127}));
          connect(Exlamda.y, product1.u1) annotation(
            Line(points = {{-78, 80}, {-62, 80}}, color = {0, 0, 127}));
          connect(ExT.y, division1.u2) annotation(
            Line(points = {{-78, -80}, {-62, -80}}, color = {0, 0, 127}));
          annotation(
            Diagram(graphics = {Bitmap(origin = {48, 100}, extent = {{-90, -14}, {90, 14}}, imageSource = "")}, coordinateSystem(extent = {{-100, -100}, {100, 100}})));
        end Sigma_mem;

        block J_cell
          extends Modelica.Blocks.Icons.Block;
          parameter Modelica.Units.SI.Area A_mem = 1 "Cross section of the membrane";
          Modelica.Blocks.Interfaces.RealOutput J_cell(final unit = "A/m2") "Cell current density" annotation(
            Placement(visible = true, transformation(origin = {100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealInput I_cell(final unit = "A") "Cell Curent" annotation(
            Placement(visible = true, transformation(origin = {-100, 52}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-90, 80}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
        equation
          J_cell = I_cell/A_mem;
          annotation(
            Diagram(coordinateSystem(extent = {{-100, -100}, {100, 100}})),
            Icon(coordinateSystem(extent = {{-100, -100}, {100, 100}})));
        end J_cell;

        model J_check
          extends Modelica.Blocks.Icons.Block;
          Modelica.Blocks.Interfaces.RealInput J_cell_in "Cell current density [A/m^2]" annotation(
            Placement(visible = true, transformation(origin = {-100, 0}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-90, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealOutput J_cell_out "Cell current density [A/m^2]" annotation(
            Placement(visible = true, transformation(origin = {100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
        equation
          if J_cell_in > 20 then
            J_cell_out = 20;
          elseif J_cell_in < 6 then
            J_cell_out = 0;
          else
            J_cell_out = J_cell_in;
          end if;
          annotation(
            Diagram(graphics = {Text(origin = {7, -4}, extent = {{-27, 12}, {27, -12}}, textString = "6< J_cell < 20 A m^-2")}));
        end J_check;

        block m_dot
          extends Modelica.Blocks.Icons.Block;
          Modelica.Units.SI.FaradayConstant F = Modelica.Constants.F "Faraday constant";
          parameter Real N_cell = 10 "Number of cells in a stack";
          parameter Real N_stacks = 150 "Number of stacks";
          Real N_cell_total = N_cell*N_stacks "total number of cells";
          parameter Real eta_faraday = 0.94 "Faraday efficiency";
          Real n = 2 "number of moles transferred";
          Modelica.Units.SI.MolarMass M_H2 = 0.00201588 "Molar Mass of Hydrogen";
          Modelica.Units.SI.MolarMass M_H2O = 0.018015268 "Molar Mass of Water";
          Modelica.Units.SI.MolarMass M_O2 = 0.0319988 "Molar Mass of Oxygen";
          Modelica.Units.SI.Density rho_H2 = 0.08988 "Density H2";
          Modelica.Units.SI.Density rho_H2O = 997 "Density H2O";
          Modelica.Units.SI.Density rho_O2 = 1.429 "Density O2";
          Modelica.Blocks.Interfaces.RealInput I_cell "Cell Current" annotation(
            Placement(transformation(origin = {-160, 0}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-90, 50}, extent = {{-10, -10}, {10, 10}})));
          Modelica.Blocks.Interfaces.RealOutput m_dot_H2(unit = "kg/s") "Mass flow H2" annotation(
            Placement(visible = true, transformation(origin = {180, 56}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, 80}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealOutput m_dot_H2O(unit = "kg/s") "Mass flow H2O" annotation(
            Placement(transformation(origin = {180, -66}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {90, 20}, extent = {{-10, -10}, {10, 10}})));
          Modelica.Blocks.Interfaces.RealOutput m_dot_O2(unit = "kg/s") "Mass flow O2" annotation(
            Placement(transformation(origin = {180, 20}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {90, 50}, extent = {{-10, -10}, {10, 10}})));
          Modelica.Blocks.Interfaces.RealOutput V_dot_H2(unit = "m3/s") "Volume flow H2" annotation(
            Placement(transformation(origin = {180, -100}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {90, -48}, extent = {{-10, -10}, {10, 10}})));
          Modelica.Blocks.Interfaces.RealOutput V_dot_H2O(unit = "m3/s") "Volume flow H2O" annotation(
            Placement(visible = true, transformation(origin = {180, 90}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, -80}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealOutput V_dot_O2(unit = "m3/s") "Volume flow O2" annotation(
            Placement(transformation(origin = {178, -14}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {90, -12}, extent = {{-10, -10}, {10, 10}})));
        equation
          m_dot_H2 = N_cell_total*eta_faraday*M_H2*I_cell/(n*F);
          m_dot_H2O = N_cell_total*eta_faraday*M_H2O*I_cell/(n*F);
          m_dot_O2 = N_cell_total*eta_faraday*M_O2*I_cell/(n*F);
          V_dot_H2 = m_dot_H2/rho_H2;
          V_dot_H2O = m_dot_H2O/rho_H2O;
          V_dot_O2 = m_dot_O2/rho_O2;
          annotation(
            Diagram(coordinateSystem(extent = {{-140, 120}, {180, -140}}), graphics = {Bitmap(origin = {-142, 158}, extent = {{-84, -12}, {84, 12}}, imageSource = "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"), Bitmap(origin = {-31, 156}, extent = {{-25, -8}, {25, 8}}, imageSource = "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")}));
        end m_dot;

        block PEM_controll
          extends Modelica.Blocks.Icons.Block;
          Modelica.Blocks.Math.Feedback feedback annotation(
            Placement(visible = true, transformation(origin = {-60, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealOutput y annotation(
            Placement(visible = true, transformation(origin = {100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {104, 2}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealInput u annotation(
            Placement(visible = true, transformation(origin = {-100, 0}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-114, 4}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
          Modelica.Blocks.Continuous.PI pi(T = 30, k = 5.8, x_start = 0.1) annotation(
            Placement(visible = true, transformation(origin = {-10, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Continuous.FirstOrder firstOrder(T = 29, k = 1, y(fixed = true, start = 1)) annotation(
            Placement(visible = true, transformation(origin = {30, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
        equation
          connect(u, feedback.u1) annotation(
            Line(points = {{-100, 0}, {-68, 0}}, color = {0, 0, 127}));
          connect(pi.u, feedback.y) annotation(
            Line(points = {{-22, 0}, {-51, 0}}, color = {0, 0, 127}));
          connect(pi.y, firstOrder.u) annotation(
            Line(points = {{1, 0}, {18, 0}}, color = {0, 0, 127}));
          connect(firstOrder.y, feedback.u2) annotation(
            Line(points = {{41, 0}, {70, 0}, {70, -50}, {-60, -50}, {-60, -8}}, color = {0, 0, 127}));
          connect(firstOrder.y, y) annotation(
            Line(points = {{41, 0}, {100, 0}}, color = {0, 0, 127}));
          annotation(
            uses(Modelica(version = "4.0.0")),
            Diagram(graphics = {Bitmap(origin = {53, 66}, extent = {{-45, -40}, {45, 40}}, imageSource = "")}, coordinateSystem(extent = {{-100, -100}, {100, 100}})));
        end PEM_controll;

        block R_ohm
          extends Modelica.Blocks.Icons.Block;
          parameter Modelica.Units.SI.Length d_mem = 180e-6 "Tickness of Membran";
          Modelica.Blocks.Math.Division division annotation(
            Placement(visible = true, transformation(origin = {10, 24}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealOutput R_ohm(final unit = "Ohm") "Ohmic resistance" annotation(
            Placement(visible = true, transformation(origin = {100, 18}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.RealExpression Exdmem(y = d_mem) annotation(
            Placement(visible = true, transformation(origin = {-100, 30}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-90, -70}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealInput sigma_mem annotation(
            Placement(visible = true, transformation(origin = {-99, -41}, extent = {{-19, -19}, {19, 19}}, rotation = 0), iconTransformation(origin = {-90, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.Constant R_other(k = 0) "Other empirical ohmic resistance [Ω]" annotation(
            Placement(visible = true, transformation(origin = {10, -10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Add output_R_ohm annotation(
            Placement(visible = true, transformation(origin = {50, 18}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
        equation
          connect(Exdmem.y, division.u1) annotation(
            Line(points = {{-78, 30}, {-2, 30}}, color = {0, 0, 127}));
          connect(sigma_mem, division.u2) annotation(
            Line(points = {{-98, -40}, {-48, -40}, {-48, 18}, {-2, 18}}, color = {0, 0, 127}));
          connect(division.y, output_R_ohm.u1) annotation(
            Line(points = {{22, 24}, {38, 24}}, color = {0, 0, 127}));
          connect(R_other.y, output_R_ohm.u2) annotation(
            Line(points = {{22, -10}, {38, -10}, {38, 12}}, color = {0, 0, 127}));
          connect(output_R_ohm.y, R_ohm) annotation(
            Line(points = {{62, 18}, {100, 18}}, color = {0, 0, 127}));
          annotation(
            Diagram(graphics = {Bitmap(origin = {-57, 83}, extent = {{-71, -15}, {71, 15}}, imageSource = ""), Text(origin = {41, 51}, extent = {{-55, 5}, {55, -5}}, textString = "No comparison values were found. 
    However, since this has hardly any influence, it is neglected.")}, coordinateSystem(extent = {{-100, -100}, {100, 100}})));
        end R_ohm;

        model Temperature_efficency
          extends Modelica.Blocks.Icons.Block;
          Modelica.Blocks.Interfaces.RealInput T "Temperature [K]" annotation(
            Placement(visible = true, transformation(origin = {-100, 6}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-90, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product annotation(
            Placement(visible = true, transformation(origin = {-10, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealOutput T_out "Temperature [K]" annotation(
            Placement(visible = true, transformation(origin = {100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.Constant efficency_factor(k = 0.985) annotation(
            Placement(visible = true, transformation(origin = {-70, -24}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
        equation
          connect(efficency_factor.y, product.u2) annotation(
            Line(points = {{-59, -24}, {-28.5, -24}, {-28.5, -6}, {-22, -6}}, color = {0, 0, 127}));
          connect(T, product.u1) annotation(
            Line(points = {{-100, 6}, {-22, 6}}, color = {0, 0, 127}));
          connect(product.y, T_out) annotation(
            Line(points = {{1, 0}, {100, 0}}, color = {0, 0, 127}));
        end Temperature_efficency;

        block V_act_i
          extends Modelica.Blocks.Icons.Block;
          parameter Modelica.Units.SI.Temperature T_op = 310 "Operating Temperature";
          parameter Modelica.Units.SI.CurrentDensity J_0i = 1 "Exchange current density";
          parameter Real alpha_i = 0.5 "Symmetry factor";
          Modelica.Units.SI.FaradayConstant F = Modelica.Constants.F "Faraday constant";
          Real R(final unit = "J/(mol.K)") = Modelica.Constants.R "Universal gas constant";
          Modelica.Blocks.Interfaces.RealInput J(final unit = "A/m2") "Cell current density" annotation(
            Placement(visible = true, transformation(origin = {-120, 90}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-90, 76}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.RealExpression ExR(y = R) "Universal gas constant [J/ (mol K)]" annotation(
            Placement(visible = true, transformation(origin = {-90, -10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product annotation(
            Placement(visible = true, transformation(origin = {-50, -24}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product1 annotation(
            Placement(visible = true, transformation(origin = {-50, -84}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Division division annotation(
            Placement(visible = true, transformation(origin = {-10, -30}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product2 annotation(
            Placement(visible = true, transformation(origin = {-50, 36}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.Constant n(k = 2) "number of moles transferred [-]" annotation(
            Placement(visible = true, transformation(origin = {-90, 50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Division division1 annotation(
            Placement(visible = true, transformation(origin = {-10, 84}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product V_act "activation voltage [V]" annotation(
            Placement(visible = true, transformation(origin = {70, 78}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealOutput V_act_i(final unit = "V") "activation voltage [V]" annotation(
            Placement(visible = true, transformation(origin = {100, 78}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Energysystem.Hydrogen.PEM_Modell.PEM_cell_libary.asinh arsinh annotation(
            Placement(visible = true, transformation(origin = {30, 84}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.RealExpression ExT(y = T_op) "Operating Temperature" annotation(
            Placement(transformation(origin = {-116, -34}, extent = {{-10, -10}, {10, 10}})));
          Modelica.Blocks.Sources.RealExpression ExAlpha_i(y = alpha_i) "Symmetry factor" annotation(
            Placement(transformation(origin = {-116, -94}, extent = {{-10, -10}, {10, 10}})));
          Modelica.Blocks.Sources.RealExpression ExJ_0i(y = J_0i) "Exchange current density" annotation(
            Placement(transformation(origin = {-116, 26}, extent = {{-10, -10}, {10, 10}})));
          Modelica.Blocks.Sources.RealExpression ExF(y = F) "Faraday constant" annotation(
            Placement(transformation(origin = {-90, -78}, extent = {{-10, -10}, {10, 10}})));
        equation
          connect(product1.y, division.u2) annotation(
            Line(points = {{-39, -84}, {-31, -84}, {-31, -36}, {-22, -36}}, color = {0, 0, 127}));
          connect(product.y, division.u1) annotation(
            Line(points = {{-39, -24}, {-22, -24}}, color = {0, 0, 127}));
          connect(n.y, product2.u1) annotation(
            Line(points = {{-79, 50}, {-67.5, 50}, {-67.5, 42}, {-62, 42}}, color = {0, 0, 127}));
          connect(J, division1.u1) annotation(
            Line(points = {{-120, 90}, {-22, 90}}, color = {0, 0, 127}));
          connect(division.y, V_act.u2) annotation(
            Line(points = {{1, -30}, {50, -30}, {50, 71}, {58, 71}, {58, 72}}, color = {0, 0, 127}));
          connect(V_act.y, V_act_i) annotation(
            Line(points = {{81, 78}, {100, 78}}, color = {0, 0, 127}));
          connect(division1.y, arsinh.u) annotation(
            Line(points = {{1, 84}, {21, 84}}, color = {0, 0, 127}));
          connect(arsinh.y, V_act.u1) annotation(
            Line(points = {{39, 84}, {58, 84}}, color = {0, 0, 127}));
          connect(division1.u2, product2.y) annotation(
            Line(points = {{-22, 78}, {-32, 78}, {-32, 36}, {-39, 36}}, color = {0, 0, 127}));
          connect(ExJ_0i.y, product2.u2) annotation(
            Line(points = {{-104, 26}, {-62, 26}, {-62, 30}}, color = {0, 0, 127}));
          connect(ExT.y, product.u2) annotation(
            Line(points = {{-104, -34}, {-62, -34}, {-62, -30}}, color = {0, 0, 127}));
          connect(ExAlpha_i.y, product1.u2) annotation(
            Line(points = {{-104, -94}, {-62, -94}, {-62, -90}}, color = {0, 0, 127}));
          connect(ExF.y, product1.u1) annotation(
            Line(points = {{-78, -78}, {-62, -78}}, color = {0, 0, 127}));
          connect(ExR.y, product.u1) annotation(
            Line(points = {{-78, -10}, {-70, -10}, {-70, -18}, {-62, -18}}, color = {0, 0, 127}));
          annotation(
            Diagram(coordinateSystem(extent = {{-120, -100}, {100, 120}}), graphics = {Bitmap(origin = {30, -63}, extent = {{-56, -17}, {56, 17}}, imageSource = ""), Text(origin = {50, -85}, extent = {{-68, 9}, {68, -9}}, textString = "J_0,k is a material constant that must be determined experimentally")}),
            Icon(coordinateSystem(extent = {{-120, -100}, {100, 120}})));
        end V_act_i;

        block V_cell_check
          extends Modelica.Blocks.Icons.Block;
          Modelica.Blocks.Interfaces.RealInput V_cell_in(unit = "V") "real Cell Voltage after losses  [V]" annotation(
            Placement(visible = true, transformation(origin = {-100, 0}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-90, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealOutput V_cell_out(unit = "V") "real Cell Voltage after losses  [V]" annotation(
            Placement(visible = true, transformation(origin = {100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
        algorithm
          if V_cell_in > 2.5 then
            V_cell_out := 2.5;
          else
            V_cell_out := V_cell_in;
          end if;
          annotation(
            Diagram(graphics = {Text(origin = {7, -4}, extent = {{-27, 12}, {27, -12}}, textString = "V_cell < 2.5 V")}));
        end V_cell_check;

        block V_oc "The open circuit voltage"
          extends Modelica.Blocks.Icons.Block;
          parameter Modelica.Units.SI.Temperature T_op = 310 "Operating Temperature";
          parameter Modelica.Units.SI.Pressure P_O2 = 1e5 "Pressure of O2 outlet";
          parameter Modelica.Units.SI.Pressure P_H2 = 6e5 "Pressure of H2 outlet";
          Modelica.Units.SI.FaradayConstant F = Modelica.Constants.F "Faraday constant";
          Real R(final unit = "J/(mol.K)") = Modelica.Constants.R "Universal gas constant";
          Modelica.Units.SI.Voltage E_0 = 1.229 "reversible cell voltage";
          Modelica.Blocks.Math.Division division annotation(
            Placement(visible = true, transformation(origin = {-10, 74}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Log log annotation(
            Placement(visible = true, transformation(origin = {30, -52}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product2 annotation(
            Placement(visible = true, transformation(origin = {-50, 24}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product3 annotation(
            Placement(visible = true, transformation(origin = {-30, -46}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product1 annotation(
            Placement(visible = true, transformation(origin = {-40, 80}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.Constant n(k = 2) "number of moles transferred [-]" annotation(
            Placement(visible = true, transformation(origin = {-90, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Division division1 annotation(
            Placement(visible = true, transformation(origin = {0, -52}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Add V_oc(k2 = +1) "open circuit voltage" annotation(
            Placement(visible = true, transformation(origin = {70, 74}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealOutput V_OC(final unit = "V") "open circuit voltage" annotation(
            Placement(visible = true, transformation(origin = {100, 74}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Sqrt sqrt1 annotation(
            Placement(visible = true, transformation(origin = {-60, -40}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product annotation(
            Placement(visible = true, transformation(origin = {20, 68}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.Constant a_H20(k = 1) annotation(
            Placement(visible = true, transformation(origin = {-50, -90}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.RealExpression ExR(y = R) "Universal gas constant" annotation(
            Placement(transformation(origin = {-82, 90}, extent = {{-10, -10}, {10, 10}})));
          Modelica.Blocks.Sources.RealExpression ExT(y = T_op) "Operating Temperature" annotation(
            Placement(transformation(origin = {-82, 68}, extent = {{-10, -10}, {10, 10}})));
          Modelica.Blocks.Sources.RealExpression ExF(y = F) "Faraday constant" annotation(
            Placement(transformation(origin = {-92, 38}, extent = {{-10, -10}, {10, 10}})));
          Modelica.Blocks.Sources.RealExpression ExP_O2(y = P_O2) "Pressure of O2 outlet" annotation(
            Placement(transformation(origin = {-100, -40}, extent = {{-10, -10}, {10, 10}})));
          Modelica.Blocks.Sources.RealExpression ExP_H2(y = P_H2) "Pressure of H2 outlet" annotation(
            Placement(transformation(origin = {-100, -74}, extent = {{-10, -10}, {10, 10}})));
          Modelica.Blocks.Sources.RealExpression ExE_0(y = E_0) "reversible cell voltage" annotation(
            Placement(transformation(origin = {40, 94}, extent = {{-10, -10}, {10, 10}})));
        equation
          connect(n.y, product2.u2) annotation(
            Line(points = {{-79, 0}, {-71, 0}, {-71, 18}, {-62, 18}}, color = {0, 0, 127}));
          connect(product.y, V_oc.u2) annotation(
            Line(points = {{31, 68}, {58, 68}}, color = {0, 0, 127}));
          connect(division.y, product.u1) annotation(
            Line(points = {{1, 74}, {8, 74}}, color = {0, 0, 127}));
          connect(product2.y, division.u2) annotation(
            Line(points = {{-39, 24}, {-30, 24}, {-30, 68}, {-22, 68}}, color = {0, 0, 127}));
          connect(division1.y, log.u) annotation(
            Line(points = {{11, -52}, {18, -52}}, color = {0, 0, 127}));
          connect(sqrt1.y, product3.u1) annotation(
            Line(points = {{-49, -40}, {-42, -40}}, color = {0, 0, 127}));
          connect(V_oc.y, V_OC) annotation(
            Line(points = {{81, 74}, {100, 74}}, color = {0, 0, 127}));
          connect(log.y, product.u2) annotation(
            Line(points = {{41, -52}, {50, -52}, {50, -4}, {0, -4}, {0, 61}, {8, 61}, {8, 62}}, color = {0, 0, 127}));
          connect(a_H20.y, division1.u2) annotation(
            Line(points = {{-39, -90}, {-20, -90}, {-20, -58}, {-12, -58}}, color = {0, 0, 127}));
          connect(product3.y, division1.u1) annotation(
            Line(points = {{-19, -46}, {-12, -46}}, color = {0, 0, 127}));
          connect(product1.y, division.u1) annotation(
            Line(points = {{-28, 80}, {-22, 80}}, color = {0, 0, 127}));
          connect(ExR.y, product1.u1) annotation(
            Line(points = {{-70, 90}, {-64, 90}, {-64, 86}, {-52, 86}}, color = {0, 0, 127}));
          connect(ExT.y, product1.u2) annotation(
            Line(points = {{-70, 68}, {-52, 68}, {-52, 74}}, color = {0, 0, 127}));
          connect(ExF.y, product2.u1) annotation(
            Line(points = {{-80, 38}, {-70, 38}, {-70, 30}, {-62, 30}}, color = {0, 0, 127}));
          connect(ExP_O2.y, sqrt1.u) annotation(
            Line(points = {{-88, -40}, {-72, -40}}, color = {0, 0, 127}));
          connect(ExP_H2.y, product3.u2) annotation(
            Line(points = {{-88, -74}, {-54, -74}, {-54, -52}, {-42, -52}}, color = {0, 0, 127}));
          connect(ExE_0.y, V_oc.u1) annotation(
            Line(points = {{52, 94}, {58, 94}, {58, 80}}, color = {0, 0, 127}));
          annotation(
            Documentation(info = "<html>
<p>
The open circuit voltage <i>V<sub>oc</sub></i> is derived from the Nernst voltage valid for the equilibrium state:
</p>
<p align=\"center\" style=\"font-style:italic;\">
    V<sub>oc</sub> = E<sub>0</sub> + (RT / nF) &middot; ln((p<sub>H2</sub> &middot; sqrt(p<sub>O2</sub>)) / a<sub>H2O</sub>).
</p>
<p>
In this case, <i>R</i> stands for the universal gas constant [8.31447 J/(mol K)], <i>p<sub>i</sub></i> for the partial pressures of the respective substances involved, and <i>T</i> for the temperature in Kelvin. The partial pressures of hydrogen and oxygen are typically determined by the system design. The water activity <i>a<sub>H2O</sub></i> between electrode and membrane corresponds to 1 for liquid water.
</p>
<p>
The reversible cell voltage <i>E<sub>0</sub></i> is calculated with the Gibbs free energy <i>&Delta;G</i> with standard conditions, which must be expended as:
</p>
<p align=\"center\" style=\"font-style:italic;\">
    E<sub>0</sub> = &Delta;G / nF = 1.229 V.
</p>
<p>
There is a correlation between the reversible cell voltage and the temperature, but it is negligible in this context.
</html>"),
            Diagram(coordinateSystem(extent = {{-100, -100}, {100, 100}})));
        end V_oc;

        block V_ohm
          extends Modelica.Blocks.Icons.Block;
          parameter Real lamda = 24 "Humidity factor";
          parameter Modelica.Units.SI.Length d_mem = 180e-6 "Tickness of Membran";
          parameter Modelica.Units.SI.Temperature T_op = 310 "Operating Temperature";
          Modelica.Blocks.Interfaces.RealInput J(final unit = "A/m2") "Exchange current density [A/m^2]" annotation(
            Placement(visible = true, transformation(origin = {-100, 80}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-90, 76}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product annotation(
            Placement(visible = true, transformation(origin = {-30, 74}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Division output_V_ohm annotation(
            Placement(visible = true, transformation(origin = {46, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealOutput V_ohm(final unit = "V") "ohmic Voltage" annotation(
            Placement(visible = true, transformation(origin = {100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Energysystem.Hydrogen.PEM_Modell.PEM_cell_libary.Sigma_mem sigma_mem(lamda = lamda, T_op = T_op) annotation(
            Placement(visible = true, transformation(origin = {-30, -74}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.RealExpression Exd_mem(y = d_mem) annotation(
            Placement(transformation(origin = {-98, 40}, extent = {{-10, -10}, {10, 10}})));
        equation
          connect(product.y, output_V_ohm.u1) annotation(
            Line(points = {{-19, 74}, {20, 74}, {20, 6}, {34, 6}}, color = {0, 0, 127}));
          connect(output_V_ohm.y, V_ohm) annotation(
            Line(points = {{57, 0}, {100, 0}}, color = {0, 0, 127}));
          connect(J, product.u1) annotation(
            Line(points = {{-100, 80}, {-42, 80}}, color = {0, 0, 127}));
          connect(sigma_mem.Sigma_mem, output_V_ohm.u2) annotation(
            Line(points = {{-21, -74}, {21, -74}, {21, -6}, {34, -6}}, color = {0, 0, 127}));
          connect(Exd_mem.y, product.u2) annotation(
            Line(points = {{-86, 40}, {-56, 40}, {-56, 68}, {-42, 68}}, color = {0, 0, 127}));
          annotation(
            Diagram(graphics = {Bitmap(origin = {54, 82}, extent = {{-44, -26}, {44, 26}}, imageSource = "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")}, coordinateSystem(extent = {{-100, -100}, {100, 100}})));
        end V_ohm;

        model I_cell
          extends Modelica.Blocks.Icons.Block;
          parameter Modelica.Units.SI.Voltage V_nom = 230 "Nominal operating Voltage";
          parameter Real N_cell = 10 "Number of cells in a stack";
          parameter Real N_stacks = 150 "Number of stacks";
          parameter Real eta_r = 0.98 "efficency of Rectifier";
          Modelica.Blocks.Interfaces.RealInput P_el(unit = "W") annotation(
            Placement(transformation(origin = {-108, 0}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-108, 0}, extent = {{-20, -20}, {20, 20}})));
          Modelica.Blocks.Interfaces.RealOutput I_cell(unit = "A") annotation(
            Placement(transformation(origin = {108, 0}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 72}, extent = {{-10, -10}, {10, 10}})));
          Modelica.Units.SI.Power P_cell "electrical Power at cell";
          Modelica.Units.SI.Voltage U_cell "Total voltage at cell";
        equation
          P_cell = P_el/(N_stacks);
          U_cell = V_nom*eta_r/N_cell;
          I_cell = P_cell/U_cell;
        end I_cell;

        block m_dot_backup
          extends Modelica.Blocks.Icons.Block;
          Modelica.Units.SI.FaradayConstant F = Modelica.Constants.F "Faraday constant";
          parameter Real N_cell = 10 "Number of cells in a stack";
          parameter Real N_stacks = 150 "Number of stacks";
          Real N_cell_total = N_cell*N_stacks "total number of cells";
          parameter Real eta_faraday = 0.94 "Faraday efficiency";
          Modelica.Units.SI.MolarMass M_H2 = 0.00201588 "Molar Mass of Hydrogen";
          Modelica.Units.SI.MolarMass M_H2O = 0.018015268 "Molar Mass of Hydrogen";
          Modelica.Units.SI.Density rho_H2 = 0.08988 "Density H2";
          Modelica.Blocks.Interfaces.RealOutput m_dot_H2(unit = "kg/s") "Mass flow H2" annotation(
            Placement(visible = true, transformation(origin = {180, 56}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, 80}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealInput I_cell "Cell Current" annotation(
            Placement(visible = true, transformation(origin = {-140, 80}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-90, 50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealOutput m_dot_H2O(unit = "kg/s") "Mass flow H2O" annotation(
            Placement(visible = true, transformation(origin = {180, -66}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealOutput m_dot_O2(unit = "kg/s") "Mass flow O2" annotation(
            Placement(visible = true, transformation(origin = {180, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, 40}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealOutput V_dot_H2O_kum "Volume flow H2 for time t [Nm^3/t]" annotation(
            Placement(visible = true, transformation(origin = {180, -100}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, -40}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product4 annotation(
            Placement(visible = true, transformation(origin = {150, 56}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product5 annotation(
            Placement(visible = true, transformation(origin = {150, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product6 annotation(
            Placement(visible = true, transformation(origin = {150, -66}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product7 annotation(
            Placement(visible = true, transformation(origin = {150, -100}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealOutput m_dot_h2_eta "Mass flow H2 [kg/s]" annotation(
            Placement(visible = true, transformation(origin = {180, 90}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, -80}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product9 annotation(
            Placement(visible = true, transformation(origin = {150, 94}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.RealExpression ExN_cells_total(y = N_cell_total) annotation(
            Placement(transformation(origin = {-120, 112}, extent = {{-10, -10}, {10, 10}})));
        equation
          connect(product6.y, m_dot_H2O_kum) annotation(
            Line(points = {{161, -66}, {180, -66}}, color = {0, 0, 127}));
          connect(product7.y, V_dot_H2O_kum) annotation(
            Line(points = {{161, -100}, {180, -100}}, color = {0, 0, 127}));
          connect(product5.y, V_dot_H2_kum) annotation(
            Line(points = {{161, 20}, {180, 20}}, color = {0, 0, 127}));
          connect(product4.y, m_dot_H2_kum) annotation(
            Line(points = {{161, 56}, {180, 56}}, color = {0, 0, 127}));
          connect(product9.y, m_dot_h2_eta) annotation(
            Line(points = {{162, 94}, {180, 94}, {180, 90}}, color = {0, 0, 127}));
          connect(ExN_cells_total.y, product9.u2) annotation(
            Line(points = {{-108, 112}, {118, 112}, {118, 88}, {138, 88}}, color = {0, 0, 127}));
          annotation(
            Diagram(coordinateSystem(extent = {{-140, 120}, {180, -140}}), graphics = {Bitmap(origin = {-142, 158}, extent = {{-84, -12}, {84, 12}}, imageSource = "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"), Bitmap(origin = {-31, 156}, extent = {{-25, -8}, {25, 8}}, imageSource = "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")}));
        end m_dot_backup;

        block m_dot_backup2
          extends Modelica.Blocks.Icons.Block;
          parameter Real N_cell = 10 "Number of cells in a stack";
          parameter Real N_stacks = 150 "Number of stacks";
          Real N_cell_total = N_cell*N_stacks "total number of cells";
          Modelica.Blocks.Math.Division m_dot_H2O "Mass flow H2O [kg/s]" annotation(
            Placement(visible = true, transformation(origin = {10, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product3 annotation(
            Placement(visible = true, transformation(origin = {-30, -54}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product annotation(
            Placement(visible = true, transformation(origin = {-30, 4}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealOutput m_dot_H2_kum "Mass flow H2 for time t [kg/t]" annotation(
            Placement(visible = true, transformation(origin = {180, 56}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, 80}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Division m_dot_H2 "Mass flow H2 [kg/s]" annotation(
            Placement(visible = true, transformation(origin = {10, 62}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Continuous.Integrator integrator annotation(
            Placement(visible = true, transformation(origin = {90, 62}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.Constant n(k = 2) "number of moles transferred [-]" annotation(
            Placement(visible = true, transformation(origin = {-130, -100}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealInput I_cell "Cell Current [A]" annotation(
            Placement(visible = true, transformation(origin = {-140, 80}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-90, 50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealOutput m_dot_H2O_kum "Mass flow H2O for time t [kg/t]" annotation(
            Placement(visible = true, transformation(origin = {180, -66}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.Constant n_H2(k = 2) "number of moles transferred [-]" annotation(
            Placement(visible = true, transformation(origin = {-130, 10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product1 annotation(
            Placement(visible = true, transformation(origin = {-30, 68}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.Constant MolarMass_H20(k = 0.018015268) "Molar Mass H2 [kg/mol]" annotation(
            Placement(visible = true, transformation(origin = {-90, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.Constant F(k = 9.6485e4) "Faraday constant [C/mol]" annotation(
            Placement(visible = true, transformation(origin = {-90, -10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Continuous.Integrator integrator1 annotation(
            Placement(visible = true, transformation(origin = {90, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.Constant MolarMass_H2(k = 0.00201588) "Molar Mass H2 [kg/mol]" annotation(
            Placement(visible = true, transformation(origin = {-90, 30}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product2 annotation(
            Placement(visible = true, transformation(origin = {-30, -106}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.Constant F2(k = 9.6485e4) "Faraday constant [C/mol]" annotation(
            Placement(visible = true, transformation(origin = {-90, -118}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.Constant density_H2(k = 0.08988) "Density H2 [kg/m3]" annotation(
            Placement(visible = true, transformation(origin = {10, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Division division annotation(
            Placement(visible = true, transformation(origin = {50, 26}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealOutput V_dot_H2_kum "Volume flow H2 for time t [Nm^3/t]" annotation(
            Placement(visible = true, transformation(origin = {180, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, 40}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Continuous.Integrator integrator2 annotation(
            Placement(visible = true, transformation(origin = {90, 26}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.Constant density_H2O(k = 997) "Density H2O [kg/m3]" annotation(
            Placement(visible = true, transformation(origin = {10, -100}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Division division1 annotation(
            Placement(visible = true, transformation(origin = {50, -94}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Continuous.Integrator integrator3 annotation(
            Placement(visible = true, transformation(origin = {90, -94}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealOutput V_dot_H2O_kum "Volume flow H2 for time t [Nm^3/t]" annotation(
            Placement(visible = true, transformation(origin = {180, -100}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, -40}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product4 annotation(
            Placement(visible = true, transformation(origin = {150, 56}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product5 annotation(
            Placement(visible = true, transformation(origin = {150, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product6 annotation(
            Placement(visible = true, transformation(origin = {150, -66}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product7 annotation(
            Placement(visible = true, transformation(origin = {150, -100}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealOutput m_dot_h2_eta "Mass flow H2 [kg/s]" annotation(
            Placement(visible = true, transformation(origin = {180, 90}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, -80}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product8 annotation(
            Placement(visible = true, transformation(origin = {-90, 74}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.Constant eta_f(k = 0.94) annotation(
            Placement(visible = true, transformation(origin = {-130, 50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Math.Product product9 annotation(
            Placement(visible = true, transformation(origin = {150, 94}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Sources.RealExpression ExN_cells_total(y = N_cell_total) annotation(
            Placement(transformation(origin = {-120, 112}, extent = {{-10, -10}, {10, 10}})));
        equation
          connect(n.y, product2.u1) annotation(
            Line(points = {{-119, -100}, {-42, -100}}, color = {0, 0, 127}));
          connect(product2.y, m_dot_H2O.u2) annotation(
            Line(points = {{-19, -106}, {-12.5, -106}, {-12.5, -66}, {-2, -66}}, color = {0, 0, 127}));
          connect(MolarMass_H2.y, product1.u2) annotation(
            Line(points = {{-79, 30}, {-60.5, 30}, {-60.5, 62}, {-42, 62}}, color = {0, 0, 127}));
          connect(product1.y, m_dot_H2.u1) annotation(
            Line(points = {{-19, 68}, {-2, 68}}, color = {0, 0, 127}));
          connect(n_H2.y, product.u1) annotation(
            Line(points = {{-119, 10}, {-42, 10}}, color = {0, 0, 127}));
          connect(product3.y, m_dot_H2O.u1) annotation(
            Line(points = {{-19, -54}, {-2, -54}}, color = {0, 0, 127}));
          connect(MolarMass_H20.y, product3.u2) annotation(
            Line(points = {{-79, -60}, {-42, -60}}, color = {0, 0, 127}));
          connect(product.y, m_dot_H2.u2) annotation(
            Line(points = {{-19, 4}, {-10.5, 4}, {-10.5, 56}, {-2, 56}}, color = {0, 0, 127}));
          connect(m_dot_H2O.y, integrator1.u) annotation(
            Line(points = {{21, -60}, {78, -60}}, color = {0, 0, 127}));
          connect(m_dot_H2.y, integrator.u) annotation(
            Line(points = {{21, 62}, {78, 62}}, color = {0, 0, 127}));
          connect(F2.y, product2.u2) annotation(
            Line(points = {{-79, -118}, {-61.5, -118}, {-61.5, -112}, {-42, -112}}, color = {0, 0, 127}));
          connect(F.y, product.u2) annotation(
            Line(points = {{-79, -10}, {-71.5, -10}, {-71.5, -2}, {-42, -2}}, color = {0, 0, 127}));
          connect(density_H2.y, division.u2) annotation(
            Line(points = {{21, 20}, {38, 20}}, color = {0, 0, 127}));
          connect(division.y, integrator2.u) annotation(
            Line(points = {{61, 26}, {78, 26}}, color = {0, 0, 127}));
          connect(density_H2O.y, division1.u2) annotation(
            Line(points = {{21, -100}, {38, -100}}, color = {0, 0, 127}));
          connect(division1.y, integrator3.u) annotation(
            Line(points = {{61, -94}, {78, -94}}, color = {0, 0, 127}));
          connect(integrator3.y, product7.u1) annotation(
            Line(points = {{101, -94}, {138, -94}}, color = {0, 0, 127}));
          connect(integrator1.y, product6.u1) annotation(
            Line(points = {{101, -60}, {138, -60}}, color = {0, 0, 127}));
          connect(product6.y, m_dot_H2O_kum) annotation(
            Line(points = {{161, -66}, {180, -66}}, color = {0, 0, 127}));
          connect(product7.y, V_dot_H2O_kum) annotation(
            Line(points = {{161, -100}, {180, -100}}, color = {0, 0, 127}));
          connect(integrator2.y, product5.u1) annotation(
            Line(points = {{101, 26}, {138, 26}}, color = {0, 0, 127}));
          connect(product5.y, V_dot_H2_kum) annotation(
            Line(points = {{161, 20}, {180, 20}}, color = {0, 0, 127}));
          connect(integrator.y, product4.u1) annotation(
            Line(points = {{101, 62}, {138, 62}}, color = {0, 0, 127}));
          connect(product4.y, m_dot_H2_kum) annotation(
            Line(points = {{161, 56}, {180, 56}}, color = {0, 0, 127}));
          connect(eta_f.y, product8.u2) annotation(
            Line(points = {{-119, 50}, {-109.5, 50}, {-109.5, 68}, {-102, 68}}, color = {0, 0, 127}));
          connect(I_cell, product8.u1) annotation(
            Line(points = {{-140, 80}, {-102, 80}}, color = {0, 0, 127}));
          connect(product8.y, product1.u1) annotation(
            Line(points = {{-79, 74}, {-42, 74}}, color = {0, 0, 127}));
          connect(product3.u1, product8.y) annotation(
            Line(points = {{-42, -48}, {-70, -48}, {-70, 74}, {-78, 74}}, color = {0, 0, 127}));
          connect(m_dot_H2.y, division.u1) annotation(
            Line(points = {{21, 62}, {30, 62}, {30, 32}, {38, 32}}, color = {0, 0, 127}));
          connect(division1.u1, m_dot_H2O.y) annotation(
            Line(points = {{38, -88}, {32, -88}, {32, -60}, {22, -60}}, color = {0, 0, 127}));
          connect(m_dot_H2.y, product9.u1) annotation(
            Line(points = {{22, 62}, {56, 62}, {56, 100}, {138, 100}}, color = {0, 0, 127}));
          connect(product9.y, m_dot_h2_eta) annotation(
            Line(points = {{162, 94}, {180, 94}, {180, 90}}, color = {0, 0, 127}));
          connect(ExN_cells_total.y, product9.u2) annotation(
            Line(points = {{-108, 112}, {118, 112}, {118, 88}, {138, 88}}, color = {0, 0, 127}));
          connect(ExN_cells_total.y, product4.u2) annotation(
            Line(points = {{-108, 112}, {118, 112}, {118, 50}, {138, 50}}, color = {0, 0, 127}));
          connect(ExN_cells_total.y, product5.u2) annotation(
            Line(points = {{-108, 112}, {118, 112}, {118, 14}, {138, 14}}, color = {0, 0, 127}));
          connect(ExN_cells_total.y, product6.u2) annotation(
            Line(points = {{-108, 112}, {118, 112}, {118, -72}, {138, -72}}, color = {0, 0, 127}));
          connect(ExN_cells_total.y, product7.u2) annotation(
            Line(points = {{-108, 112}, {118, 112}, {118, -106}, {138, -106}}, color = {0, 0, 127}));
          annotation(
            Diagram(coordinateSystem(extent = {{-140, 120}, {180, -140}}), graphics = {Bitmap(origin = {-142, 158}, extent = {{-84, -12}, {84, 12}}, imageSource = "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"), Bitmap(origin = {-31, 156}, extent = {{-25, -8}, {25, 8}}, imageSource = "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")}));
        end m_dot_backup2;

        block Pump
          extends Modelica.Blocks.Icons.Block;
          parameter Modelica.Units.SI.Pressure P_H2 = 6e5 "Pressure of H2 outlet";
          Modelica.Blocks.Interfaces.RealInput P_el_in annotation(
            Placement(visible = true, transformation(origin = {-100, -50}, extent = {{-20, -20}, {20, 20}}, rotation = 0), iconTransformation(origin = {-90, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
          Modelica.Blocks.Interfaces.RealOutput P_el_out annotation(
            Placement(visible = true, transformation(origin = {100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
        algorithm
          if P_H2 <= 6e5 then
            P_el_out := P_el_in*0.93;
          elseif P_H2 <= 8e5 then
            P_el_out := P_el_in*0.92;
          else
            P_el_out := P_el_in*0.91;
          end if;
          annotation(
            Diagram(graphics = {Bitmap(extent = {{-46, -36}, {46, 36}}, imageSource = "")}));
        end Pump;
      end PEM_cell_libary;

      package Validation
        model PEMEL_test
          extends Modelica.Icons.Example;
          Modelica.Blocks.Sources.Ramp ramp(height = 1900, duration = 3600) annotation(
            Placement(transformation(origin = {-64, -6}, extent = {{-10, -10}, {10, 10}})));
          Modelica.Blocks.Continuous.Integrator int_VH2 annotation(
            Placement(transformation(origin = {44, -12}, extent = {{-10, -10}, {10, 10}})));
          PEMEL_cell pEMEL_cell(P_el_max = 1900, V_nom = 230, N_cell = 10, N_stacks = 1) annotation(
            Placement(transformation(origin = {-4, -6}, extent = {{-10, -10}, {10, 10}})));
        equation
          connect(ramp.y, pEMEL_cell.P_el) annotation(
            Line(points = {{-53, -6}, {-16, -6}}, color = {0, 0, 127}));
          connect(pEMEL_cell.V_dot_H2, int_VH2.u) annotation(
            Line(points = {{8, -12}, {32, -12}}, color = {0, 0, 127}));
          annotation(
            experiment(StartTime = 0, StopTime = 100, Tolerance = 1e-6, Interval = 0.2),
            Documentation(info = "<html><head></head><body>Validation of the PEM Electrolyser with mesured data<div><br>&nbsp;
        <table>
        <caption>Technical data PEM electrolyser</caption>
        <thead>
        <tr>
        <th></th>
        <th>Value</th>
        <th>Unit</th>
        <th></th>
        </tr>
        </thead>
        <tbody>
        <tr>
        <td>n<sub>cell</sub></td>
        <td>10</td>
        <td>-</td>
        <td></td>
        </tr>
        <tr>
        <td>n<sub>stack</sub></td>
        <td>1</td>
        <td>-</td>
        <td></td>
        </tr>
        <tr>
        <td>P<sub>el,max</sub></td>
        <td>1900</td>
        <td>W</td>
        <td></td>
        </tr>
        <tr>
        <td>p</td>
        <td>0 - 10</td>
        <td>bar</td>
        <td></td>
        </tr>
        <tr>
        <td>V<sub>op</sub></td>
        <td>230</td>
        <td>V</td>
        <td></td>
        </tr>
        <tr>
        <td>.V<sub>H<sub>2</sub>,max</sub></td>
        <td>0.3</td>
        <td>Nm<sup>3</sup>/h</td>
        <td></td>
        </tr>
        </tbody>
        </table><br>
        </div><div><br></div><div><br></div>
        
        <table>
        <caption>Comparison of measurements and simulation at 6 bar outlet pressure</caption>
        <thead>
        <tr>
        <th>P<sub>el</sub> [W]</th>
        <th>Measurement</th>
        <th>Simulation</th>
        <th>Relative difference [%]</th>
        </tr>
        <tr>
        <th></th>
        <th>.V<sub>H<sub>2</sub></sub> [Nm<sup>3</sup>/h]</th>
        <th>.V<sub>H<sub>2</sub></sub> [Nm<sup>3</sup>/h]</th>
        <th></th>
        </tr>
        </thead>
        <tbody>
        <tr>
        <td>334.5</td>
        <td>0.050</td>
        <td>0.054</td>
        <td>8</td>
        </tr>
        <tr>
        <td>555.0</td>
        <td>0.100</td>
        <td>0.090</td>
        <td>11</td>
        </tr>
        <tr>
        <td>817.7</td>
        <td>0.150</td>
        <td>0.133</td>
        <td>13</td>
        </tr>
        <tr>
        <td>1138.8</td>
        <td>0.200</td>
        <td>0.185</td>
        <td>8</td>
        </tr>
        <tr>
        <td>1357.8</td>
        <td>0.222</td>
        <td>0.220</td>
        <td>1</td>
        </tr>
        </tbody>
        </table>
        </body></html>"),
            Diagram(coordinateSystem(extent = {{-80, 20}, {60, -40}})));
        end PEMEL_test;

        model Voltage_Potential
          extends Modelica.Icons.Example;
          parameter Modelica.Units.SI.Pressure P_O2 = 1e5 "Pressure of O2 outlet";
          parameter Modelica.Units.SI.Pressure P_H2 = 6e5 "Pressure of H2 outlet";
          parameter Modelica.Units.SI.Temperature T_op = 310 "Operating Temperature";
          parameter Modelica.Units.SI.Power P_el_max = 1900 "Max. Operating electrical Power";
          parameter Modelica.Units.SI.Voltage V_nom = 230 "Nominal operating Voltage";
          parameter Real N_cell = 10 "Number of cells in a stack";
          parameter Real N_stacks = 150 "Number of stacks";
          parameter Modelica.Units.SI.Length d_mem = 180e-6 "Tickness of Membran" annotation(
            Dialog(group = "Membrane"));
          parameter Real lamda = 24 "Humidity factor" annotation(
            Dialog(group = "Membrane"));
          parameter Modelica.Units.SI.CurrentDensity J_0a = 1e-3 "Exchange current density, anode" annotation(
            Dialog(group = "Anode and Cathode properties"));
          parameter Modelica.Units.SI.CurrentDensity J_0c = 1000 "Exchange current density, cathode" annotation(
            Dialog(group = "Anode and Cathode properties"));
          parameter Real alpha_a = 0.8 "Symmetry factor anode" annotation(
            Dialog(group = "Anode and Cathode properties"));
          parameter Real alpha_c = 0.25 "Symmetry factor cathode" annotation(
            Dialog(group = "Anode and Cathode properties"));
          Energysystem.Hydrogen.PEM_Modell.PEM_cell_libary.J_cell j_cell "Current density [A/m^2]" annotation(
            Placement(visible = true, transformation(origin = {73, -205}, extent = {{-33, -33}, {33, 33}}, rotation = 0)));
          Energysystem.Hydrogen.PEM_Modell.PEM_cell_libary.V_oc v_oc(T_op = T_op, P_O2 = P_O2, P_H2 = P_H2) "open circuit voltage [V]" annotation(
            Placement(visible = true, transformation(origin = {212, -524}, extent = {{-32, -32}, {32, 32}}, rotation = 0)));
          Energysystem.Hydrogen.PEM_Modell.PEM_cell_libary.V_ohm v_ohm(lamda = lamda, d_mem = d_mem, T_op = T_op) "ohmic voltage [V]" annotation(
            Placement(visible = true, transformation(origin = {213, -285}, extent = {{-33, -33}, {33, 33}}, rotation = 0)));
          Energysystem.Hydrogen.PEM_Modell.PEM_cell_libary.V_act_i v_act_anode(T_op = T_op, J_0i = J_0a, alpha_i = alpha_a) "activation voltage anode [V]" annotation(
            Placement(visible = true, transformation(origin = {213.273, -365.273}, extent = {{-39.2727, -32.7273}, {32.7273, 39.2727}}, rotation = 0)));
          Energysystem.Hydrogen.PEM_Modell.PEM_cell_libary.V_act_i v_act_cathode(T_op = T_op, J_0i = J_0c, alpha_i = alpha_c) "activation voltage cathode [V]" annotation(
            Placement(visible = true, transformation(origin = {212.364, -444.364}, extent = {{-40.3636, -33.6364}, {33.6364, 40.3636}}, rotation = 0)));
          Modelica.Blocks.Math.MultiSum E(nu = 4) "real Cell Voltage after losses  [V]" annotation(
            Placement(visible = true, transformation(origin = {360, -404}, extent = {{-40, -40}, {40, 40}}, rotation = 0)));
          Energysystem.Hydrogen.PEM_Modell.PEM_cell_libary.V_cell_check E_cell_chcek annotation(
            Placement(visible = true, transformation(origin = {452, -404}, extent = {{-28, -28}, {28, 28}}, rotation = 0)));
          Modelica.Blocks.Sources.Ramp ramp(height = 50, duration = 10) annotation(
            Placement(transformation(origin = {-165, -179}, extent = {{-55, -55}, {55, 55}})));
        equation
          connect(j_cell.J_cell, v_ohm.J) annotation(
            Line(points = {{102, -204}, {140, -204}, {140, -260}, {184, -260}}, color = {0, 0, 127}));
          connect(j_cell.J_cell, v_act_anode.J) annotation(
            Line(points = {{102, -204}, {140, -204}, {140, -340}, {184, -340}}, color = {0, 0, 127}));
          connect(j_cell.J_cell, v_act_cathode.J) annotation(
            Line(points = {{102, -204}, {140, -204}, {140, -418}, {182, -418}}, color = {0, 0, 127}));
          connect(v_oc.V_OC, E.u[1]) annotation(
            Line(points = {{240, -524}, {284, -524}, {284, -404}, {320, -404}}, color = {0, 0, 127}));
          connect(v_act_cathode.V_act_i, E.u[2]) annotation(
            Line(points = {{242, -444}, {284, -444}, {284, -404}, {320, -404}}, color = {0, 0, 127}));
          connect(v_act_anode.V_act_i, E.u[3]) annotation(
            Line(points = {{242, -366}, {284, -366}, {284, -404}, {320, -404}}, color = {0, 0, 127}));
          connect(v_ohm.V_ohm, E.u[4]) annotation(
            Line(points = {{242, -284}, {284, -284}, {284, -404}, {320, -404}}, color = {0, 0, 127}));
          connect(E.y, E_cell_chcek.V_cell_in) annotation(
            Line(points = {{406, -404}, {426, -404}}, color = {0, 0, 127}));
          connect(ramp.y, j_cell.I_cell) annotation(
            Line(points = {{-104, -178}, {44, -178}}, color = {0, 0, 127}));
          annotation(
            Diagram(coordinateSystem(extent = {{-260, -100}, {500, -580}}), graphics = {Text(origin = {425, -163}, extent = {{-69, 13}, {69, -13}}, textString = "Calculation of Voltage losses"), Bitmap(origin = {386, -478}, extent = {{-70, -48}, {70, 48}}, imageSource = "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"), Rectangle(origin = {241, -362}, lineColor = {255, 0, 0}, lineThickness = 0.5, extent = {{-259, 210}, {259, -210}})}),
            Icon,
            experiment(StartTime = 0, StopTime = 10, Tolerance = 1e-6, Interval = 0.02),
            Documentation(info = "<html><head></head><body>Validation of the overvoltages</body></html>"));
        end Voltage_Potential;

        extends Modelica.Icons.Example;
      end Validation;
      annotation(
        uses(Modelica(version = "4.0.0")),
        Documentation(info = "<html><head></head><body>This subpackage contains the PEMEL Model</body></html>"));
    end PEM_Modell;

    block Hydrogen_Storage
      Real R(final unit = "J/(mol.K)") = Modelica.Constants.R "Universal gas constant";
      parameter Modelica.Units.SI.Temperature T_amb = 298.15 "Ambient temperature";
      parameter Real CF = 1 "Correction Factor";
      parameter Modelica.Units.SI.Pressure p_i = 100000 "Initial pressure";
      parameter Modelica.Units.SI.Pressure p_max = 100000*80 "Max pressure";
      parameter Modelica.Units.SI.Volume V = 1 "Volume of the Storage";
      parameter Real n = 1 "Number of storage bottles";
      Modelica.Units.SI.MolarMass M_H2 = 0.00201588 "Molar Mass of Hydrogen";
      Modelica.Units.SI.Mass m = int_m.y "Mass stored in Tank";
      Modelica.Blocks.Interfaces.RealInput m_dot(unit = "kg/s") "Mass flow in > 0 and out < 0" annotation(
        Placement(transformation(origin = {-122, 0}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-122, 0}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealOutput p(unit = "Pa") "Current pressure" annotation(
        Placement(transformation(origin = {110, 66}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 64}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput SOC(unit = "1") "State of charge of the Storage" annotation(
        Placement(transformation(origin = {112, -56}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -58}, extent = {{-10, -10}, {10, 10}})));
    protected
      Modelica.Blocks.Continuous.Integrator int_m "Mass stored in Tank" annotation(
        Placement(transformation(origin = {-70, -2}, extent = {{-10, -10}, {10, 10}})));
    public
    equation
      p = p_i + CF*m*R*T_amb/(V*n*M_H2);
      SOC = p/p_max;
      connect(m_dot, int_m.u) annotation(
        Line(points = {{-122, 0}, {-103, 0}, {-103, -2}, {-82, -2}}, color = {0, 0, 127}));
      annotation(
        Icon(graphics = {Text(textColor = {0, 0, 255}, extent = {{-150, 150}, {150, 110}}, textString = "%name"), Bitmap(origin = {0, 1}, extent = {{-94, -103}, {94, 103}}, imageSource = "")}),
        Documentation(info = "<html><head>
    <meta charset=\"UTF-8\">
    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
    <title>Hydrogen Storage Dynamics</title>
</head>
<body>
    <p>The hydrogen storage dynamics are governed by the equation:</p>
    
    <p>p<sub>i</sub> = p<sub>0</sub> + CF · <sup>ṁ<sub>H2</sub> · R · T</sup>⁄<sub>V<sub>bottle</sub> · n<sub>bottle</sub> · M<sub>H2</sub></sub>,&nbsp;</p>
    
    <p>where p<sub>i</sub> is the pressure inside the storage tank, p<sub>0</sub> the initial pressure, CF the correction factor, ṁ<sub>H2</sub> the mass flow rate of hydrogen, V<sub>bottle</sub> and n<sub>bottle</sub> denote the bottle’s volume and number of bottles, T the temperature and R the gas constant respectively. The system is designed with a maximum pressure p<sub>max</sub> of 80 bar, an initial pressure p<sub>0</sub> of 1 bar, and a bottle volume V<sub>bottle</sub> of 50 litres, mirroring laboratory setups, and n<sub>bottle</sub> indicates the count of such bottles. The correction factor (CF), integral to the equation, adjusts for deviations from ideal gas behaviour, essentially a temperature and pressure-dependent ratio of real to ideal gas volumes. It is equal to one at pressures below 138 bar at ambient temperature, reflecting the model’s assumption of a constant room temperature and a slow storage process with a maximum pressure of 80 bar, thus simplifying CF to one for this scenario. Using this information, the SOC of the storage can be calculated:</p>

    <p>SOC = <sup>p<sub>i</sub></sup>⁄<sub>p<sub>max</sub></sub>.&nbsp;</p><p><b>Refernces</b></p><p><!--StartFragment-->Albarghot, M. M., Iqbal, M. T., Pope, K., and Rolland, L. “Sizing and Dynamic Modeling of
a Power System for the MUN Explorer Autonomous Underwater Vehicle Using a Fuel Cell and
Batteries”. In: Journal of Energy 2019 (2019), pp. 1–17. issn: 2356-735X. doi: 10.1155/2019/
4531497<!--EndFragment-->

</p><p><!--StartFragment-->Gorgun, H. “Dynamic modelling of a proton exchange membrane (PEM) electrolyzer”. In: International Journal of Hydrogen Energy 31.1 (2006), pp. 29–38. issn: 03603199. doi: 10.1016/
j.ijhydene.2005.04.001<!--EndFragment-->&nbsp;</p><p>&nbsp;McCarty, R., Hord, J., and Roder, H. M. Selected properties of hydrogen (engineering design
data). 1981. url: https://nvlpubs.nist.gov/nistpubs/Legacy/MONO/nbsmonograph168.
pdf</p><p><!--StartFragment-->Onar, O. C., Uzunoglu, M., and Alam, M. S. “Dynamic modeling, design and simulation of
a wind/fuel cell/ultra-capacitor-based hybrid power generation system”. In: Journal of Power
Sources 161.1 (2006), pp. 707–722. issn: 03787753. doi: 10.1016/j.jpowsour.2006.03.055<!--EndFragment-->&nbsp;</p><p>&nbsp;Zucker, R. D. and Biblarz, O. Fundamentals of gas dynamics. 3rd ed. Hoboken, NJ: Wiley, 2019.
isbn: 978-1-119-48170-6</p><!--StartFragment--><!--EndFragment--><!--StartFragment--><!--EndFragment-->



</body></html>"));
    end Hydrogen_Storage;

    model Compressor "isothermic compressor"
      parameter Modelica.Units.SI.Pressure p_in = 6e5 "Pressure of inlet";
      parameter Modelica.Units.SI.Pressure p_out = 80e5 "Pressure of outlet";
      parameter Real eta_com = 0.8 "Compressor efficiency";
      Modelica.Units.SI.Pressure p_0 = 101325 "Atmospheric pressure";
      Modelica.Units.SI.Power P_n "Volume change work and utilisation work [J/s]";
      Modelica.Blocks.Interfaces.RealInput V_dot_in(unit = "Nm3/s") "Volume flow rate into the Compressor" annotation(
        Placement(transformation(origin = {-102, 0}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 0}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealOutput V_dot_out(unit = "Nm3/s") "Volume flow rate out of the Compressor" annotation(
        Placement(transformation(origin = {116, 44}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 40}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput Pcom(unit = "W") "Power consumption" annotation(
        Placement(transformation(origin = {108, -38}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -40}, extent = {{-10, -10}, {10, 10}})));
    algorithm
      if V_dot_in == 0 then
        V_dot_out := 0;
        P_n := 0;
        Pcom := 0;
      else
        V_dot_out := p_in*V_dot_in/p_out;
        P_n := -(p_in*V_dot_in*Modelica.Math.log(V_dot_out/V_dot_in) + p_0*(V_dot_out - V_dot_in));
        Pcom := P_n/eta_com;
      end if;
      annotation(
        Icon(graphics = {Text(textColor = {0, 0, 255}, extent = {{-150, 150}, {150, 110}}, textString = "%name"), Polygon(lineColor = {0, 0, 255}, fillColor = {95, 95, 95}, pattern = LinePattern.None, fillPattern = FillPattern.Solid, points = {{-100, -100}, {-100, 100}, {100, 50}, {100, -50}, {-100, -100}})}),
        Documentation(info = "<html><head></head><body>
    <p>An isothermal compressor has been implemented, assuming an ideal gas as the compression pressures are low. The power of the ideal compressor P<sub>com</sub> is defined as an integral over the volume flow rate:</p>
    
    <p>P<sub>com</sub> = - ∫ (p - p<sub>u</sub>) dV̇,</p>
    
    <p>where p is the compression pressure and p<sub>u</sub> is the ambient pressure. Using the efficiency η<sub>com</sub>, the effective compression power required P<sub>req</sub> can be calculated in terms of electrical power needed:</p>

    <p>P<sub>el,req</sub> = <sup>P<sub>com</sub></sup>⁄<sub>η<sub>com</sub></sub>.&nbsp;</p><p><b><br></b></p>
</body></html>"));
    end Compressor;

    model HydrogenSystem
      // PEMEL
      parameter Real N_cell = 10 "Number of cells in a stack" annotation(
        Dialog(tab = "Electrolyser", group = "General"));
      parameter Real N_stacks = 150 "Number of stacks" annotation(
        Dialog(tab = "Electrolyser", group = "General"));
      parameter Real eta_f = 0.94 "Faraday efficiency" annotation(
        Dialog(tab = "Electrolyser", group = "General"));
      parameter Modelica.Units.SI.Voltage V_nom = 230 "Nominal operating Voltage" annotation(
        Dialog(tab = "Electrolyser", group = "General"));
      parameter Modelica.Units.SI.Power P_el_max = 19000 "Max. Operating electrical Power" annotation(
        Dialog(tab = "Electrolyser", group = "General"));
      parameter Modelica.Units.SI.Pressure P_O2 = 1e5 "Pressure of O2 outlet" annotation(
        Dialog(tab = "Electrolyser", group = "General"));
      parameter Modelica.Units.SI.Pressure P_H2 = 6e5 "Pressure of H2 outlet" annotation(
        Dialog(tab = "Electrolyser", group = "General"));
      parameter Modelica.Units.SI.Temperature T_op = 310 "Operating Temperature" annotation(
        Dialog(tab = "Electrolyser", group = "General"));
      parameter Real eta_r = 0.98 "efficency of Rectifier" annotation(
        Dialog(tab = "Electrolyser", group = "Power Electronics"));
      parameter Modelica.Units.SI.Area A_mem = 1 "Cross section of the membrane" annotation(
        Dialog(tab = "Electrolyser", group = "Membrane"));
      parameter Modelica.Units.SI.Length d_mem = 180e-6 "Tickness of Membran" annotation(
        Dialog(tab = "Electrolyser", group = "Membrane"));
      parameter Real lamda = 24 "Humidity factor" annotation(
        Dialog(tab = "Electrolyser", group = "Membrane"));
      parameter Modelica.Units.SI.CurrentDensity J_0a = 1e-3 "Exchange current density, anode" annotation(
        Dialog(tab = "Electrolyser", group = "Anode and Cathode properties"));
      parameter Modelica.Units.SI.CurrentDensity J_0c = 1000 "Exchange current density, cathode" annotation(
        Dialog(tab = "Electrolyser", group = "Anode and Cathode properties"));
      parameter Real alpha_a = 0.8 "Symmetry factor anode" annotation(
        Dialog(tab = "Electrolyser", group = "Anode and Cathode properties"));
      parameter Real alpha_c = 0.25 "Symmetry factor cathode" annotation(
        Dialog(tab = "Electrolyser", group = "Anode and Cathode properties"));
      // Hydrogen Storage
      parameter Modelica.Units.SI.Volume V = 1 "Volume of the Storage" annotation(
        Dialog(tab = "Storage", group = "General"));
      parameter Real n = 1 "Number of storage bottles" annotation(
        Dialog(tab = "Storage", group = "General"));
      parameter Modelica.Units.SI.Pressure p_i = 100000 "Initial pressure" annotation(
        Dialog(tab = "Storage", group = "General"));
      parameter Modelica.Units.SI.Pressure p_max = 80e5 "Max pressure" annotation(
        Dialog(tab = "Storage", group = "General"));
      parameter Modelica.Units.SI.Temperature T_amb = 298.15 "Ambient temperature" annotation(
        Dialog(tab = "Storage", group = "General"));
      parameter Real CF = 1 "Correction Factor" annotation(
        Dialog(tab = "Storage", group = "General"));
      //Compressor
      parameter Modelica.Units.SI.Pressure p_in = P_H2 "Pressure of inlet" annotation(
        Dialog(tab = "Compressor", group = "General"));
      parameter Modelica.Units.SI.Pressure p_out = p_max "Pressure of outlet" annotation(
        Dialog(tab = "Compressor", group = "General"));
      parameter Real eta_com = 0.8 "Compressor efficiency" annotation(
        Dialog(tab = "Compressor", group = "General"));
      PEM_Modell.PEMEL_cell Electrolyser(A_mem = A_mem, N_cell = N_cell, N_stacks = N_stacks, V_nom = V_nom, P_el_max = P_el_max, P_O2 = P_O2, P_H2 = P_H2, T_op = T_op, eta_r = eta_r, d_mem = d_mem, lamda = lamda, J_0a = J_0a, J_0c = J_0c, alpha_a = alpha_a, alpha_c = alpha_c, eta_f = eta_f) "PEM Electrolyser" annotation(
        Placement(transformation(origin = {-52, -2}, extent = {{-10, -10}, {10, 10}})));
      Hydrogen_Storage Tank(V = V, n = n, p_i = p_i, p_max = p_max, T_amb = T_amb, CF = CF) "Tank for Hydrogen" annotation(
        Placement(transformation(origin = {30, 68}, extent = {{-10, -10}, {10, 10}})));
      Compressor compressor(p_in = p_in, p_out = p_out, eta_com = eta_com) "Compressor" annotation(
        Placement(transformation(origin = {0, -28}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealInput P_el(unit = "W") "Electrical Power for the Electrolyser" annotation(
        Placement(transformation(origin = {-106, 0}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, 0}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealInput m_dot_need(unit = "kg/s") "Hydrogen need mass flow" annotation(
        Placement(transformation(origin = {-104, 66}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-120, -64}, extent = {{-20, -20}, {20, 20}})));
      Modelica.Blocks.Interfaces.RealOutput P_pemel(unit = "W") "Power consumed by Electrolyser" annotation(
        Placement(transformation(origin = {96, -68}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 70}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput P_com(unit = "W") "Power consumed by Compressor" annotation(
        Placement(transformation(origin = {98, -32}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 50}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput SOC(unit = "1") "SOC of Hydrogen storage" annotation(
        Placement(transformation(origin = {70, 58}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 90}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Math.Add balance_H2_mass_flow(k1 = -1) annotation(
        Placement(transformation(origin = {-18, 68}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Math.Gain gain(k = -1) annotation(
        Placement(transformation(origin = {-48, -68}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Math.Gain gain1(k = -1) annotation(
        Placement(transformation(origin = {32, -32}, extent = {{-10, -10}, {10, 10}})));
      Buildings.Electrical.AC.ThreePhasesBalanced.Interfaces.Terminal_p term_p annotation(
        Placement(transformation(origin = {92, -90}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {-110, 90}, extent = {{-10, -10}, {10, 10}})));
      Buildings.Electrical.AC.ThreePhasesBalanced.Loads.Inductive PcomLoad(P_nominal = -2000, V_nominal = 480, mode = Buildings.Electrical.Types.Load.VariableZ_P_input) annotation(
        Placement(transformation(origin = {96, -6}, extent = {{-20, -50}, {-40, -30}})));
      Modelica.Blocks.Interfaces.RealOutput p(unit = "Pa") "Pressure in tank" annotation(
        Placement(transformation(origin = {70, 74}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 30}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput m_dot_H2(unit = "kg/s") "Mass flow of H2 produced" annotation(
        Placement(transformation(origin = {130, 46}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 10}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput m_dot_H2O(unit = "kg/s") "Mass flow of H2O consumed" annotation(
        Placement(transformation(origin = {130, 20}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -28}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput m_dot_O2(unit = "kg/s") "Mass flow of O2 produced" annotation(
        Placement(transformation(origin = {130, 34}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -8}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput V_dot_H2(unit = "m3/s") "Volume flow of H2 produced" annotation(
        Placement(transformation(origin = {130, -8}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -70}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput V_dot_H2O(unit = "m3/s") "Volume flow of H2O produced" annotation(
        Placement(transformation(origin = {130, -24}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -90}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput V_dot_O2(unit = "m3/s") "Volume flow of O2 produced" annotation(
        Placement(transformation(origin = {130, 6}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -50}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput eta_cell(unit = "1") "Cell efficiency" annotation(
        Placement(transformation(origin = {130, 60}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -110}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.RealOutput eta_energy(unit = "1") "Energy efficiency" annotation(
        Placement(transformation(origin = {130, 74}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, -132}, extent = {{-10, -10}, {10, 10}})));
      Buildings.Electrical.AC.ThreePhasesBalanced.Loads.Inductive Ppemel(P_nominal = -2000, V_nominal = 480, mode = Buildings.Electrical.Types.Load.VariableZ_P_input) annotation(
        Placement(transformation(origin = {46, -50}, extent = {{-20, -50}, {-40, -30}})));
      H2TankConSimple h2TankConSimple annotation(
        Placement(transformation(origin = {60, 96}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.BooleanOutput PEMELoff annotation(
        Placement(transformation(origin = {90, 100}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 130}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.BooleanOutput CHPoff annotation(
        Placement(transformation(origin = {90, 86}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {110, 110}, extent = {{-10, -10}, {10, 10}})));
    equation
      connect(Electrolyser.V_dot_H2, compressor.V_dot_in) annotation(
        Line(points = {{-40, -8}, {-20, -8}, {-20, -28}, {-12, -28}}, color = {0, 0, 127}));
      connect(P_el, Electrolyser.P_el) annotation(
        Line(points = {{-106, 0}, {-76, 0}, {-76, -2}, {-64, -2}}, color = {0, 0, 127}));
      connect(Tank.SOC, SOC) annotation(
        Line(points = {{42, 62}, {57, 62}, {57, 58}, {70, 58}}, color = {0, 0, 127}));
      connect(Electrolyser.m_dot_H2, balance_H2_mass_flow.u2) annotation(
        Line(points = {{-40, 0}, {-36, 0}, {-36, 62}, {-30, 62}}, color = {0, 0, 127}));
      connect(m_dot_need, balance_H2_mass_flow.u1) annotation(
        Line(points = {{-104, 66}, {-68, 66}, {-68, 74}, {-30, 74}}, color = {0, 0, 127}));
      connect(balance_H2_mass_flow.y, Tank.m_dot) annotation(
        Line(points = {{-6, 68}, {18, 68}}, color = {0, 0, 127}));
      connect(gain.y, P_pemel) annotation(
        Line(points = {{-37, -68}, {96, -68}}, color = {0, 0, 127}));
      connect(P_el, gain.u) annotation(
        Line(points = {{-106, 0}, {-76, 0}, {-76, -68}, {-60, -68}}, color = {0, 0, 127}));
      connect(compressor.Pcom, gain1.u) annotation(
        Line(points = {{11, -32}, {20, -32}}, color = {0, 0, 127}));
      connect(gain1.y, P_com) annotation(
        Line(points = {{43, -32}, {98, -32}}, color = {0, 0, 127}));
      connect(gain1.y, PcomLoad.Pow) annotation(
        Line(points = {{44, -32}, {44, -46}, {56, -46}}, color = {0, 0, 127}));
      connect(PcomLoad.terminal, term_p) annotation(
        Line(points = {{76, -46}, {76, -90}, {92, -90}}, color = {0, 120, 120}));
      connect(Tank.p, p) annotation(
        Line(points = {{42, 74}, {70, 74}}, color = {0, 0, 127}));
      connect(Electrolyser.m_dot_H2, m_dot_H2) annotation(
        Line(points = {{-40, 0}, {-36, 0}, {-36, 40}, {110, 40}, {110, 46}, {130, 46}}, color = {0, 0, 127}));
      connect(Electrolyser.m_dot_O2, m_dot_O2) annotation(
        Line(points = {{-40, -2}, {-32, -2}, {-32, 34}, {130, 34}}, color = {0, 0, 127}));
      connect(Electrolyser.m_dot_H2O, m_dot_H2O) annotation(
        Line(points = {{-40, -4}, {-28, -4}, {-28, 20}, {130, 20}}, color = {0, 0, 127}));
      connect(Electrolyser.V_dot_O2, V_dot_O2) annotation(
        Line(points = {{-40, -6}, {-24, -6}, {-24, 6}, {130, 6}}, color = {0, 0, 127}));
      connect(Electrolyser.V_dot_H2, V_dot_H2) annotation(
        Line(points = {{-40, -8}, {130, -8}}, color = {0, 0, 127}));
      connect(Electrolyser.V_dot_H2O, V_dot_H2O) annotation(
        Line(points = {{-40, -10}, {104, -10}, {104, -24}, {130, -24}}, color = {0, 0, 127}));
      connect(Electrolyser.eta_cell, eta_cell) annotation(
        Line(points = {{-40, 6}, {-38, 6}, {-38, 46}, {94, 46}, {94, 60}, {130, 60}}, color = {0, 0, 127}));
      connect(Electrolyser.eta_energy, eta_energy) annotation(
        Line(points = {{-40, 8}, {-40, 52}, {88, 52}, {88, 74}, {130, 74}}, color = {0, 0, 127}));
      connect(gain.y, Ppemel.Pow) annotation(
        Line(points = {{-36, -68}, {-26, -68}, {-26, -90}, {6, -90}}, color = {0, 0, 127}));
      connect(term_p, Ppemel.terminal) annotation(
        Line(points = {{92, -90}, {26, -90}}, color = {0, 120, 120}));
      connect(Tank.SOC, h2TankConSimple.SOC) annotation(
        Line(points = {{42, 62}, {49, 62}, {49, 96}}, color = {0, 0, 127}));
      connect(h2TankConSimple.PEMELoff, PEMELoff) annotation(
        Line(points = {{70, 100}, {90, 100}}, color = {255, 0, 255}));
      connect(h2TankConSimple.CHPoff, CHPoff) annotation(
        Line(points = {{70, 92}, {90, 92}, {90, 86}}, color = {255, 0, 255}));
      annotation(
        Icon(graphics = {Text(origin = {-10, 14}, textColor = {0, 0, 255}, extent = {{-149, -114}, {151, -154}}, textString = "%name"), Bitmap(origin = {0, 1}, extent = {{-90, -91}, {90, 91}}, imageSource = "")}),
        Diagram(coordinateSystem(extent = {{-140, 120}, {140, -100}})),
        Documentation(info = "<html><head></head><body><!--StartFragment-->The hydrogen system in the model consists of a Polymer Electrolyte Membrane Electrolyser (PEMEC), a hydrogen storage tank, and a hydrogen compressor. It produces hydrogen locally using the PEMEC, stores it in tanks, and uses the compressor to manage the storage conditions, operating under simplified ideal gas conditions for pressures up to 80 bar .<!--EndFragment--></body></html>"));
    end HydrogenSystem;

    model H2TankConSimple
      extends Modelica.Blocks.Icons.Block;
      parameter Real deaBan = 0.01 "Dead band width for switching charging/discharging on/off";
      parameter Real minCharg = 0.1 "Min. Charg for discharging";
      Modelica.Blocks.Interfaces.RealInput SOC(unit = "1") "State of Charge" annotation(
        Placement(transformation(origin = {-106, -80}, extent = {{-20, -20}, {20, 20}}), iconTransformation(origin = {-106, 0}, extent = {{-20, -20}, {20, 20}})));
      Boolean cha "charging signal";
      Boolean dis "discharging signal";
      Boolean stby "stand by signal";
      Boolean chadis "Charging while discharging by signal";
      Modelica.Blocks.Interfaces.BooleanOutput PEMELoff "True when SOC = 1, then PEMEL off" annotation(
        Placement(transformation(origin = {100, 30}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {106, 40}, extent = {{-10, -10}, {10, 10}})));
      Modelica.Blocks.Interfaces.BooleanOutput CHPoff "True when SOC = 0, then CHP off" annotation(
        Placement(transformation(origin = {96, -28}, extent = {{-10, -10}, {10, 10}}), iconTransformation(origin = {106, -40}, extent = {{-10, -10}, {10, 10}})));
    initial equation
      stby = false;
      cha = true;
      dis = false;
      chadis = false;
    algorithm
// Discharge --> 0
      when SOC > 1 - deaBan then
        stby := false;
        cha := false;
        dis := true;
        chadis := false;
      end when;
//Stand by --> 1
      when SOC < 0 + deaBan then
        stby := true;
        cha := false;
        dis := false;
        chadis := false;
      end when;
// Charge --> 2
      when SOC < 0 + deaBan + 0.01 then
        stby := false;
        cha := true;
        dis := false;
        chadis := false;
      end when;
// Charge and discharging at the same time
      when SOC >= minCharg and SOC <= 0.9 then
        stby := false;
        cha := false;
        dis := false;
        chadis := true;
      end when;
    equation
      if dis then
        PEMELoff = true;
        CHPoff = false;
      elseif cha then
        PEMELoff = false;
        CHPoff = true;
      elseif chadis then
        PEMELoff = false;
        CHPoff = false;
      else
        PEMELoff = true;
        CHPoff = true;
      end if;
      annotation(
        Documentation(info = "<html><head></head><body><!--StartFragment--><div class=\"flex-shrink-0 flex flex-col relative items-end\"><div class=\"pt-0.5 juice:pt-0\"><div class=\"gizmo-bot-avatar flex h-6 w-6 items-center justify-center overflow-hidden rounded-full juice:h-8 juice:w-8\"><div class=\"relative p-1 rounded-sm flex items-center justify-center bg-token-main-surface-primary text-token-text-primary h-8 w-8\">The PEMEC controller regulates the operation of the polymer electrolyte membrane electrolyzer, ensuring efficient hydrogen production by optimizing power input and maintaining safe operating conditions.</div></div></div></div>
<p></p>
    <p align=\"center\">
    <img alt=\"Schematics of the controll logic\" src=\"modelica://Energysystem/Documentation/PEMELControlLogic.png\">
    </p>
    <p></p>

</body></html>"),
        Icon(graphics = {Text(textColor = {0, 0, 255}, extent = {{-150, 150}, {150, 110}}, textString = "%name")}));
    end H2TankConSimple;
    annotation(
      Documentation(info = "<html><head></head><body>This package contains all relevant models for the hydrogen production</body></html>"));
  end Hydrogen;

  package CO2e_factors "Libary consisting of CO2e factors for direct emissions"
    extends Modelica.Icons.Package;
    // References: Probas (https://www.probas.umweltbundesamt.de/)
    // Emissions of selected fluids tCO2e/kg
    final constant CO2ePower CH4 = 202/1e6 "In 2020";
    // Emissions of country Energymix in the year 2022 in tCO2e/kWh
    // Reference: https://www.eea.europa.eu/data-and-maps/daviz/co2-emission-intensity-14/#tab-googlechartid_chart_41
    final constant CO2ePower Mix_Ger = 366/1e6 "Energymix emissions of Germany in 2022";
    final constant CO2ePower Mix_Fra = 66/1e6 "Energymix emissions of France in 2022";
    //Assumption based on https://www.iea.org/countries and https://www.gasag.de/magazin/nachhaltig/co2-emissionen-erneuerbare-energien#:~:text=2%2C6%20g%20CO2%2D%C3%84quivalent,kWh%20f%C3%BCr%20%C3%96kostrom%20aus%20Photovoltaik
    final constant CO2ePower Mix_green_ger = 66/1e6 "Energymix emissions for only reneweable eletricty in Germany";
    final constant CO2ePower Mix_green_fra = 31/1e6 "Energymix emissions for only reneweable eletricty in France";
    //Units
    type CO2ePower = Real(final quantity = "CO2ePower", final unit = "tCO2e/kWh");
    type CO2e = Real(final quantity = "CO2e", final unit = "tCO2e");
    annotation(
      Documentation(info = "<html><head>
    <meta charset=\"UTF-8\">
    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
    <title>CO2 Emissions and Emission Factors</title>
</head>
<body>
    <p>Sources of CO<sub>2</sub>e emissions include combustion of methane gas and electricity production, varying by location and energy mix. In 2022, emission factors were 366 gCO<sub>2</sub>e/kWh for Germany and 66 gCO<sub>2</sub>e/kWh for France. Using only green electricity, emission factors differ based on the renewable source, ranging from 4 gCO<sub>2</sub>e/kWh for hydro power to 475 gCO<sub>2</sub>e/kWh for liquid biomass. The estimated green emission factors are approximately 66 gCO<sub>2</sub>e/kWh for Germany and 31 gCO<sub>2</sub>e/kWh for France, reflecting their respective green energy mixes &nbsp;The following <b>Table </b>presents the database for the emission calculation, which is defined as:</p>
    
    <p>m<sub>CO2e</sub> = m<sub>CH4</sub> · LHV<sub>CH4</sub> · EF<sub>CH4</sub> + E<sub>con,grid</sub> · EF<sub>grid</sub>,&nbsp;</p>
    
    <p>where m<sub>CO2e</sub> represents the total emissions in tCO<sub>2</sub>e and EF represents the emission factor from the&nbsp;<b>Table</b>. In order to study emissions more realistically, a dynamic CO<sub>2</sub> emission factor and dynamic prices need to be considered. For the simulation, the user can select an individual emission factor for the electrical grid. In this thesis, these emission factors have been used and stored in the model.</p>

    <h4>Emission factor database in gCO<sub>2</sub>e/kWh.</h4>
    <table border=\"1\">
        <tbody><tr>
            <th>Variable Costs</th>
            <th>Value</th>
            <th>Description</th>
        </tr>
        <tr>
            <td>Natural gas</td>
            <td>202</td>
            <td>CH4</td>
        </tr>
        <tr>
            <td>Electricity mix Germany</td>
            <td>366</td>
            <td>Mix_Ger</td>
        </tr>
        <tr>
            <td>Electricity mix France</td>
            <td>66</td>
            <td>Mix_Fra</td>
        </tr>
        <tr>
            <td>Green electricity mix Germany</td>
            <td>66</td>
            <td>Mix_green_ger</td>
        </tr>
        <tr>
            <td>Green electricity mix France</td>
            <td>31</td>
            <td>Mix_green_fra</td>
        </tr>
    </tbody></table><br>
<div><b>Reference:</b></div><div><b><br></b></div><div><!--StartFragment-->Arbeitsgruppe Erneuerbare Energien-Statistik. Erneuerbare Energien in Zahlen. Umweltbundesamt. Publisher: Umweltbundesamt. Mar. 8, 2024. url: www.umweltbundesamt.de/themen/
klima - energie / erneuerbare - energien / erneuerbare - energien - in - zahlen # uberblick
(online - last accessed on 04/23/2024)<!--EndFragment-->

</div><div><br></div><div><!--StartFragment-->European Environment Agency. Greenhouse gas emission intensity of electricity generation.
Greenhouse gas emission intensity of electricity generation. 2023. url: www.eea.europa.eu/
data - and - maps / daviz / co2 - emission - intensity - 14 / #tab - googlechartid _ chart _ 41
(online - last accessed on 04/23/2024<!--EndFragment-->&nbsp;)</div><div><br></div><div>Lauf, T., Memmler, M., and Schneider, S. Emissionsbilanz erneuerbarer Energieträger 2021.
Umweltbundesamt, Dec. 9, 2022. 170 pp. url: www.umweltbundesamt.de/publikationen/em
issionsbilanz-erneuerbarer-energietraeger-2021 (online - last accessed on 04/23/2024)</div><div><br></div><div><!--StartFragment-->Umweltbundesamt. Kohlendioxid-Emissionsfaktoren für die deutsche Berichterstattung atmosphärischer Emissionen. Oct. 31, 2023. url: https : / / view . officeapps . live . com / op /
view.aspx?src=https%3A%2F%2Fwww.umweltbundesamt.de%2Fsites%2Fdefault%2Ffiles%
2Fmedien % 2F361 % 2Fdokumente % 2Fco2 _ ef _ liste _ 2024 _ brennstoffe _ und _ industrie _
final.xlsx&amp;wdOrigin=BROWSELINK (online - last accessed on 05/08/2024)<!--EndFragment-->&nbsp;&nbsp;</div><!--StartFragment--><!--EndFragment-->

</body></html>"));
  end CO2e_factors;

  package Costs "Libary consisting of cost informaiton"
    extends Modelica.Icons.Package;
    // Prices of gas and electricity
    // References: Eurostat (https://ec.europa.eu/eurostat/)
    final constant EuroEnergy Gas_Ger = 0.123 "Price Germany in 2023";
    final constant EuroEnergy Gas_Fra = 0.1043 "Price France in 2023";
    final constant EuroEnergy El_Ger = 0.4125 "Price Germany in 2023";
    final constant EuroEnergy El_Fra = 0.2317 "Price France in 2023";
    final constant EuroVol Water = 1.99 "Costs of water for industry";
    final constant EuroCO2 CO2_tax = 46 "Costs of water for industry";
    //Feed-in compensation
    final constant EuroEnergy Pro_Ger = 0.1018 "Average feed-in compensation Germany";
    final constant EuroEnergy Pro_Fra = 0.1287 "Average feed-in compensation France";
    // Unit costs 2025
    //References: PyPsa Documentation (https://github.com/PyPSA/technology-data/tree/master) and the Danish Energy Agency (https://ens.dk/en)
    final constant EuroPower Wind_on = 1180 "WInd onshore disrict";
    final constant EuroPower Wind_off = 1180 "Wind offshore";
    final constant EuroPower Wind_dom = 3940 "Wind domnestic";
    final constant EuroPower Solar_res = 1040 "PV for rooftop residential";
    final constant EuroPower Solar_com = 720 "PV for rooftop commercial";
    final constant EuroPower ICE_CHP = 985 "Gas engine CHP";
    final constant EuroEnergy Battery = 885 "Home Battery";
    final constant EuroPower BatInver = 303 "Home Inverter";
    final constant EuroPower PEMEL = 1188 "Electrolyzeuer";
    final constant EuroEnergy H2_tank = 101;
    final constant EuroEnergy TES = 18 "Domestic water tank storage";
    final constant EuroPower ASHP = 615 "Existing building air-sourced heat pump ";
    final constant EuroPower GSHP = 593 "Existing building ground-sourced heat pump ";
    final constant EuroPower ASHP_exfamhou = 1442 "Existing family house air-sourced heat pump ";
    final constant EuroPower GSHP_exfamhou = 1969 "Existing family house ground-sourced heat pump ";
    final constant EuroPower ST = 962 "Solar Thermal";
    //Lifetime
    final constant Liftime LTWind_on = 27 "WInd onshore";
    final constant Liftime LTWind_off = 27 "Wind offshore";
    final constant Liftime LTWind_dom = 20 "Wind domnestic";
    final constant Liftime LTSolar_res = 30 "PV for rooftop residential";
    final constant Liftime LTSolar_com = 35 "PV for rooftop commercial";
    final constant Liftime LTICE_CHP = 25 "Gas engine CHP";
    final constant Liftime LTBattery = 20 "Home Battery";
    final constant Liftime LTBatInver = 10 "Home Inverter";
    final constant Liftime LTPEMEL = 25 "Electrolyzeuer";
    final constant Liftime LTH2_tank = 20;
    final constant Liftime LTTES = 20 "Central water tank storage";
    final constant Liftime LTASHP = 18 "Air source heat Pump";
    final constant Liftime LTGSHP = 25 "Ground source heat Pump";
    final constant Liftime LTST = 25 "Solar Thermal";
    // Fixed Operation and Maintenance (FOM)
    final constant FOM FOM_Wind_on = 1.2/100 "WInd onshore";
    final constant FOM FOM_Wind_off = 2.3/100 "Wind offshore";
    final constant FOM FOM_Wind_dom = 2.5/100 "Wind domnestic";
    final constant FOM FOM_Solar_res = 1.2/100 "PV for rooftop residential";
    final constant FOM FOM_Solar_com = 1.6/100 "PV for rooftop commercial";
    final constant FOM FOM_ICE_CHP = 3.3/100 "Gas engine CHP";
    final constant FOM FOM_Battery = 0 "Home Battery";
    final constant FOM FOM_BatInver = 0.2/100 "Home Inverter";
    final constant FOM FOM_PEMEL = 2.0/100 "Electrolyzeuer";
    final constant FOM FOM_H2_tank = 0;
    final constant FOM FOM_TES = 1.0/100 "Central water tank storage";
    final constant FOM FOM_ASHP = 3.0/100 "Air source heat Pump";
    final constant FOM FOM_GSHP = 1.8/100 "Ground source heat Pump";
    final constant FOM FOM_ST = 2.6/100 "Solar Thermal";
    //Units
    type Euro = Real(final quantity = "Euro", final unit = "€");
    type EuroEnergy = Real(final quantity = "EuroEnergy", final unit = "€/kWh");
    type EuroPower = Real(final quantity = "EuroPower", final unit = "€/kW");
    type EuroArea = Real(final quantity = "EuroArea", final unit = "€/m2");
    type EuroVol = Real(final quantity = "EuroVol", final unit = "€/m3");
    type Liftime = Real(final quantity = "Liftime", final unit = "a");
    type EuroLT = Real(final quantity = "EuroLT", final unit = "€/a");
    type EuroMass = Real(final quantity = "EuroMass", final unit = "€/kg");
    type FOM = Real(final quantity = "FOM", final unit = "1");
    type EuroCO2 = Real(final quantity = "EuroCO2", final unit = "€/tCO2");
    //Functions

    function calculateLCOE
      input Real n;
      // Number of years
      input Real i;
      // Discount rate
      input Real Investment;
      // Annual Investment cost
      input Real O_M;
      // Annual O&M cost
      input Real Fuel;
      // Annual Fuel cost
      input Real Electricity;
      // Annual Electricity production
      output Real LCOE;
      // Levelized Cost of Electricity
    algorithm
      if Electricity > 0 then
        LCOE := (sum(Investment/(1 + i)^t + O_M/(1 + i)^t + Fuel/(1 + i)^t for t in 1:n))/(sum(Electricity/(1 + i)^t for t in 1:n));
      else
        LCOE := 0;
      end if;
    annotation(
        Documentation(info = "<html><head>
    <meta charset=\"UTF-8\">
    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
    <title>Levelized Cost of Electricity (LCOE)</title>
</head>
<body>
    <p>Fuction for calculation of Levelized Cost of Electricity (LCOE). LCOE measures the lifetime cost of electricity production by a given system. This way, LCOE enables easy comparison of the costs of different forms of energy production, such as wind, natural gas, and solar. The LCOE of a system is defined as:</p>
    
    <p align=\"center\">
        LCOE = <sup>Inv + ∑<sup>n</sup><sub>t=1</sub> <sup>C<sub>a</sub></sup>⁄<sub>(1+i)<sup>t</sup></sub></sup>⁄<sub>∑<sup>n</sup><sub>t=1</sub> <sup>E<sub>t,el</sub></sup>⁄<sub>(1+i)<sup>t</sup></sub></sub> (4.28)
    </p>
    
    <p>where C<sub>a</sub> represents the yearly costs of the system, covering FOM, fuel cost, interest costs, or carbon tax. E<sub>t,el</sub> represents the yearly produced electricity, and t stands for the year and goes from 1 to the end of the lifetime. Lastly, i is the interest rate, assumed to be 5%. Note that currently only FOM and fuel costs are considered.</p>
</body></html>"));
end calculateLCOE;

    function calculateLCOH
      input Real LHV = 33.3 "Lower heating value of hydrogen in kWh/kg";
      input Real eta_sys_LHV "System efficiency related to the LHV";
      input Real i "Discount rate in percentage";
      input Real n "Lifetime in years";
      input Real OPEX "Operational expenditures as percentage of CAPEX";
      input Real CAPEX "Capital expenditures in €/kW";
      input Real tau "Full load hours";
      input Real E "Electricity costs in €/kWh";
      output Real LCOH "Levelized cost of hydrogen in €/kgH2";
    algorithm
// Calculate LCOH
      if tau > 0 then
        LCOH := (LHV/eta_sys_LHV)*(((i*(1 + i)^n)/((1 + i)^n - 1) + (OPEX/100))*(CAPEX/tau) + E);
      else
        LCOH := 0;
      end if;
    annotation(
        Documentation(info = "<html><head>
    <meta charset=\"UTF-8\">
    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
    <title>LCOH of a Hydrogen Production System</title>
</head>
<body>
    <p>he LCOH of a hydrogen production system is defined as:</p>
    
    <p align=\"center\">
        LCOH = <sup>LHV<sub>H2</sub></sup>⁄<sub>η<sub>PEMEC</sub></sub> · 
        <sup>
        <sup>i</sup>⁄<sub>100</sub> · (1 + <sup>i</sup>⁄<sub>100</sub>)<sup>n</sup>
        </sup>⁄<sub>(1 + <sup>i</sup>⁄<sub>100</sub>)<sup>n</sup> - 1</sub> 
        + <sup>OPEX</sup>⁄<sub>100</sub> · <sup>CAPEX</sup>⁄<sub>τ</sub> + LOCE&nbsp;</p>
    
    <p>where η<sub>PEMEC</sub> is the PEMEC efficiency, which is 63%. The OPEX only covers the FOM in %/a, and the CAPEX is defined in €/kW. Similarly to the CHP τ is calculated using the electrical energy demand by the PEMEC and the nominal electrical power.&nbsp;</p><p><br></p><p><b>Reference:</b></p><p><!--StartFragment-->Nigbur, F., Robinius, M., Wienert, P., and Deutsch, M. Levelised cost of hydrogen. July 2023.
url: https : / / static . agora - energiewende . de / fileadmin / Projekte / 2022 / 2022 - 12 -
10_Trans4Real/A-EW_301_LCOH_WEB.pdf&nbsp;</p>
</body></html>"));
end calculateLCOH;
  equation

  annotation(
      Documentation(info = "<html><head></head><body>Package containing cost data for current natural gas prices, electricity prices, feed-in tariffs, investment costs, fixed O&amp;M costs, lift time.<div><br></div><div>Main resources were: Eurostat, Danish Energy Agency Database and PyPsa</div></body></html>"));
end Costs;
  annotation(
    uses(Modelica(version = "4.0.0"), ExternData(version = "3.0.3"), Buildings(version = "10.0.0"), FreeFluids(version = "2.7")));
end Energysystem;
